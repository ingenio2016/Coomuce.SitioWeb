Ext.define("CoomuceMod.model.ActualizacionBd.FuanAfiliado", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idFuanAfiliado",
            type: "int"
        },
        {
            name: "primerApellidoFuanAfiliado",
            type: "string"
        },
        {
            name: 'segundoApellidoFuanAfiliado',
            type: 'string'
        },
        {
            name: 'primerNombreFuanAfiliado',
            type: 'string'
        },
        {
            name: "segundoNombreFuanAfiliado",
            type: "string"
        },
        {
            name: "codigoTipoIdentificacion",
            type: "string"
        },
        {
            name: "identificacionFuanAfiliado",
            type: "string"
        },
        {
            name: "fechaNacimientoFuanAfiliado",
            type: "date",
            convert: Coomuce.Util.parseDate
        },
        {
            name: "edadFuanAfiliado",
            type: "int"
        },
        {
            name: "compDepartamento",
            type: "string"
        },
        {
            name: "compCiudad",
            type: "string"
        },
        {
            name: "puntajeSisbenFuanAfiliado",
            type: "string"
        },
        {
            name: "direccionFuanAfiliado",
            type: "string"
        },
        {
            name: "telefonoFuanAfiliado",
            type: "string"
        },
        {
            name: "celularFuanAfiliado",
            type: "string"
        },
        {
            name: "emailFuanAfiliado",
            type: "string"
        },
        {
            name: "nombreTipoEtnia",
            type: "string"
        },
        {
            name: "nombreTipoZona",
            type: "string"
        },
        {
            name: "nombreTipoSexo",
            type: "string"
        },
        {
            name: "compAfiliado",
            convert: function(v, record) {
                return record.get("identificacionFuanAfiliado") + " - " + record.get("primerApellidoFuanAfiliado") + " " + record.get("segundoApellidoFuanAfiliado") + " " + record.get("primerNombreFuanAfiliado") + " " + record.get("segundoNombreFuanAfiliado");
            }
        },
        {
            name: "nombreCompletoAfiliado",
            convert: function(v, record) {
                return record.get("primerApellidoFuanAfiliado") + " " + record.get("segundoApellidoFuanAfiliado") + " " + record.get("primerNombreFuanAfiliado") + " " + record.get("segundoNombreFuanAfiliado");
            }
        }
    ]
});

Ext.define("CoomuceMod.model.Administracion.Ciudad", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idDepartamento",
            type: "int"
        },
        {
            name: "idCiudad",
            type: "int"
        },
        {
            name: 'codigoCiudad',
            type: 'string'
        },
        {
            name: 'nombreCiudad',
            type: 'string'
        },
        {
            name: "compCiudad",
            convert: function(v, record) {
                return "(" + record.get("codigoCiudad") + ") " + record.get("nombreCiudad");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoCiudad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreCiudad"
        }
    ]
});

Ext.define("CoomuceMod.model.Administracion.Departamento", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idDepartamento",
            type: "int"
        },
        {
            name: 'codigoDepartamento',
            type: 'string'
        },
        {
            name: 'nombreDepartamento',
            type: 'string'
        },
        {
            name: "compDepartamento",
            convert: function(v, record) {
                return "(" + record.get("codigoDepartamento") + ") " + record.get("nombreDepartamento");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoDepartamento"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreDepartamento"
        }
    ]
});

Ext.define("CoomuceMod.model.Administracion.PermisosRol", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idRol",
            type: "int"
        },
        {
            name: "nombreRol",
            type: "string"
        },
        {
            name: "idMenu",
            type: "int"
        },
        {
            name: "nombreMenu",
            type: "string"
        },
        {
            name: "habilitadoRolMenu",
            type: "bool"
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreMenu"
        }
    ]
});

Ext.define("CoomuceMod.model.Administracion.Usuario", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idUsuario",
            type: "int"
        },
        {
            name: "idTipoIdentificacion",
            type: "int"
        },
        {
            name: "nombreTipoIdentificacion",
            type: "string"
        },
        {
            name: "identificacionUsuario",
            type: "string"
        },
        {
            name: "primerApellidoUsuario",
            type: "string"
        },
        {
            name: "segundoApellidoUsuario",
            type: "string"
        },
        {
            name: "primerNombreUsuario",
            type: "string"
        },
        {
            name: "segundoNombreUsuario",
            type: "string"
        },
        {
            name: "emailUsuario",
            type: "string"
        },
        {
            name: "celularUsuario",
            type: "string"
        },
        {
            name: "idRol",
            type: "int"
        },
        {
            name: "nombreRol",
            type: "string"
        },
        {
            name: "esTemporalUsuario",
            type: "bool"
        },
        {
            name: "estaHabilitadoUsuario",
            type: "bool"
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoIdentificacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "identificacionUsuario"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "primerApellidoUsuario"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "primerNombreUsuario"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "emailUsuario"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreRol"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.CondicionDiscapacidad", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idCondicionDiscapacidad",
            type: "int"
        },
        {
            name: 'codigoCondicionDiscapacidad',
            type: 'string'
        },
        {
            name: 'nombreCondicionDiscapacidad',
            type: 'string'
        },
        {
            name: "compCondicionDiscapacidad",
            convert: function(v, record) {
                return "(" + record.get("codigoCondicionDiscapacidad") + ") " + record.get("nombreCondicionDiscapacidad");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoCondicionDiscapacidad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreCondicionDiscapacidad"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.DeclaracionAutorizacion", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idDeclaracionAutorizacion",
            type: "int"
        },
        {
            name: 'codigoDeclaracionAutorizacion',
            type: 'string'
        },
        {
            name: 'descripcionDeclaracionAutorizacion',
            type: 'string'
        },
        {
            name: "compDeclaracionAutorizacion",
            convert: function(v, record) {
                return record.get("codigoDeclaracionAutorizacion") + ". " + record.get("descripcionDeclaracionAutorizacion");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoDeclaracionAutorizacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionDeclaracionAutorizacion"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.GrupoPoblacional", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idGrupoPoblacional",
            type: "int"
        },
        {
            name: 'codigoGrupoPoblacional',
            type: 'string'
        },
        {
            name: 'nombreGrupoPoblacional',
            type: 'string'
        },
        {
            name: "compGrupoPoblacional",
            convert: function(v, record) {
                return "(" + record.get("codigoGrupoPoblacional") + ") " + record.get("nombreGrupoPoblacional");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoGrupoPoblacional"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreGrupoPoblacional"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.MotivoTraslado", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idMotivoTraslado",
            type: "int"
        },
        {
            name: 'codigoMotivoTraslado',
            type: 'string'
        },
        {
            name: 'descripcionMotivoTraslado',
            type: 'string'
        },
        {
            name: "compMotivoTraslado",
            convert: function(v, record) {
                return "(" + record.get("codigoMotivoTraslado") + ") " + record.get("descripcionMotivoTraslado");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoMotivoTraslado"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionMotivoTraslado"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliacion", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoAfiliacion",
            type: "int"
        },
        {
            name: 'codigoTipoAfiliacion',
            type: 'string'
        },
        {
            name: 'nombreTipoAfiliacion',
            type: 'string'
        },
        {
            name: "compTipoAfiliacion",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoAfiliacion") + ") " + record.get("nombreTipoAfiliacion");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoAfiliacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoAfiliacion"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliado", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoAfiliado",
            type: "int"
        },
        {
            name: 'codigoTipoAfiliado',
            type: 'string'
        },
        {
            name: 'nombreTipoAfiliado',
            type: 'string'
        },
        {
            name: "compTipoAfiliado",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoAfiliado") + ") " + record.get("nombreTipoAfiliado");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoAfiliado"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoAfiliado"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoCotizante", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoCotizante",
            type: "int"
        },
        {
            name: 'codigoTipoCotizante',
            type: 'string'
        },
        {
            name: 'nombreTipoCotizante',
            type: 'string'
        },
        {
            name: "compTipoCotizante",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoCotizante") + ") " + record.get("nombreTipoCotizante");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoCotizante"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoCotizante"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoDiscapacidad", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoDiscapacidad",
            type: "int"
        },
        {
            name: 'codigoTipoDiscapacidad',
            type: 'string'
        },
        {
            name: 'nombreTipoDiscapacidad',
            type: 'string'
        },
        {
            name: "compTipoDiscapacidad",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoDiscapacidad") + ") " + record.get("nombreTipoDiscapacidad");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoDiscapacidad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoDiscapacidad"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoEtnia", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoEtnia",
            type: "int"
        },
        {
            name: 'codigoTipoEtnia',
            type: 'string'
        },
        {
            name: 'nombreTipoEtnia',
            type: 'string'
        },
        {
            name: "compTipoEtnia",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoEtnia") + ") " + record.get("nombreTipoEtnia");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoEtnia"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoEtnia"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoNovedad", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoNovedad",
            type: "int"
        },
        {
            name: 'codigoTipoNovedad',
            type: 'string'
        },
        {
            name: 'nombreTipoNovedad',
            type: 'string'
        },
        {
            name: "tipoValorCampoTipoNovedad",
            type: "string"
        },
        {
            name: "valorCampoTipoNovedad",
            type: "string"
        },
        {
            name: "compTipoNovedad",
            convert: function(v, record) {
                return record.get("codigoTipoNovedad") + ". " + record.get("nombreTipoNovedad");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoNovedad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoNovedad"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoParentesco", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoParentesco",
            type: "int"
        },
        {
            name: 'codigoTipoParentesco',
            type: 'string'
        },
        {
            name: 'nombreTipoParentesco',
            type: 'string'
        },
        {
            name: "descripcionTipoParentesco",
            type: "string"
        },
        {
            name: "compTipoParentesco",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoParentesco") + ") " + record.get("nombreTipoParentesco");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoParentesco"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoParentesco"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoRegimen", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoRegimen",
            type: "int"
        },
        {
            name: 'codigoTipoRegimen',
            type: 'string'
        },
        {
            name: 'nombreTipoRegimen',
            type: 'string'
        },
        {
            name: "compTipoRegimen",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoRegimen") + ") " + record.get("nombreTipoRegimen");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoRegimen"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoRegimen"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ActualizacionBd.TipoTramite", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoTramite",
            type: "int"
        },
        {
            name: 'codigoTipoTramite',
            type: 'string'
        },
        {
            name: 'nombreTipoTramite',
            type: 'string'
        },
        {
            name: "compTipoTramite",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoTramite") + ") " + record.get("nombreTipoTramite");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoTramite"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoTramite"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CicloVital", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idCicloVital",
            type: "int"
        },
        {
            name: 'edadMinCicloVital',
            type: 'int'
        },
        {
            name: 'edadMaxCicloVital',
            type: 'int'
        },
        {
            name: "compFactorRiesgo",
            convert: function(v, record) {
                return record.get("edadMinCicloVital") + " - " + record.get("edadMaxCicloVital");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "edadMinCicloVital"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "edadMaxCicloVital"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimal", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoAnimal",
            type: "int"
        },
        {
            name: 'codigoTipoAnimal',
            type: 'string'
        },
        {
            name: 'nombreTipoAnimal',
            type: 'string'
        },
        {
            name: "compTipoAnimal",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoAnimal") + ") " + record.get("nombreTipoAnimal");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoAnimal"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoAnimal"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionVivienda", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idCondicionVivienda",
            type: "int"
        },
        {
            name: 'nombreCondicionVivienda',
            type: 'string'
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "idCondicionVivienda"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreCondicionVivienda"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasura", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idDisposicionBasura",
            type: "int"
        },
        {
            name: 'codigoDisposicionBasura',
            type: 'string'
        },
        {
            name: 'nombreDisposicionBasura',
            type: 'string'
        },
        {
            name: "compDisposicionBasura",
            convert: function(v, record) {
                return "(" + record.get("codigoDisposicionBasura") + ") " + record.get("nombreDisposicionBasura");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoDisposicionBasura"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreDisposicionBasura"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcreta", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idDisposicionExcreta",
            type: "int"
        },
        {
            name: 'codigoDisposicionExcreta',
            type: 'string'
        },
        {
            name: 'nombreDisposicionExcreta',
            type: 'string'
        },
        {
            name: "compDisposicionExcreta",
            convert: function(v, record) {
                return "(" + record.get("codigoDisposicionExcreta") + ") " + record.get("nombreDisposicionExcreta");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoDisposicionExcreta"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreDisposicionExcreta"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.Tenencia", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTenencia",
            type: "int"
        },
        {
            name: 'codigoTenencia',
            type: 'string'
        },
        {
            name: 'nombreTenencia',
            type: 'string'
        },
        {
            name: "compTenencia",
            convert: function(v, record) {
                return "(" + record.get("codigoTenencia") + ") " + record.get("nombreTenencia");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTenencia"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTenencia"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustible", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoCombustible",
            type: "int"
        },
        {
            name: 'codigoTipoCombustible',
            type: 'string'
        },
        {
            name: 'nombreTipoCombustible',
            type: 'string'
        },
        {
            name: "compTipoCombustible",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoCombustible") + ") " + record.get("nombreTipoCombustible");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoCombustible"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoCombustible"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoVivienda", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoVivienda",
            type: "int"
        },
        {
            name: 'codigoTipoVivienda',
            type: 'string'
        },
        {
            name: 'nombreTipoVivienda',
            type: 'string'
        },
        {
            name: "compTipoVivienda",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoVivienda") + ") " + record.get("nombreTipoVivienda");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoVivienda"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoVivienda"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAgua", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTratamientoAgua",
            type: "int"
        },
        {
            name: 'codigoTratamientoAgua',
            type: 'string'
        },
        {
            name: 'nombreTratamientoAgua',
            type: 'string'
        },
        {
            name: "compTratamientoAgua",
            convert: function(v, record) {
                return "(" + record.get("codigoTratamientoAgua") + ") " + record.get("nombreTratamientoAgua");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTratamientoAgua"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTratamientoAgua"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.FactorRiesgo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idFactorRiesgo",
            type: "int"
        },
        {
            name: 'codigoFactorRiesgo',
            type: 'string'
        },
        {
            name: 'nombreFactorRiesgo',
            type: 'string'
        },
        {
            name: "compFactorRiesgo",
            convert: function(v, record) {
                return "(" + record.get("codigoFactorRiesgo") + ") " + record.get("nombreFactorRiesgo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoFactorRiesgo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreFactorRiesgo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.NivelEducativo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idNivelEducativo",
            type: "int"
        },
        {
            name: 'codigoNivelEducativo',
            type: 'string'
        },
        {
            name: 'nombreNivelEducativo',
            type: 'string'
        },
        {
            name: "compNivelEducativo",
            convert: function(v, record) {
                return "(" + record.get("codigoNivelEducativo") + ") " + record.get("nombreNivelEducativo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoNivelEducativo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreNivelEducativo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idPreguntasSubFactorRiesgo",
            type: "int"
        },
        {
            name: "idSubFactorRiesgo",
            type: "int"
        },
        {
            name: 'codigoPreguntasSubFactorRiesgo',
            type: 'string'
        },
        {
            name: 'descripcionPreguntasSubFactorRiesgo',
            type: 'string'
        },
        {
            name: "compPreguntasSubFactorRiesgo",
            convert: function(v, record) {
                return "(" + record.get("codigoPreguntasSubFactorRiesgo") + ") " + record.get("descripcionPreguntasSubFactorRiesgo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoPreguntasSubFactorRiesgo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombrePreguntasSubFactorRiesgo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.Procedencia", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idProcedencia",
            type: "int"
        },
        {
            name: 'codigoProcedencia',
            type: 'string'
        },
        {
            name: 'nombreProcedencia',
            type: 'string'
        },
        {
            name: "compProcedencia",
            convert: function(v, record) {
                return "(" + record.get("codigoProcedencia") + ") " + record.get("nombreProcedencia");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoProcedencia"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreProcedencia"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.CaracterizacionPoblacional.SubFactorRiesgo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idSubFactorRiesgo",
            type: "int"
        },
        {
            name: "idSubFactorRiesgo",
            type: "int"
        },
        {
            name: 'codigoSubFactorRiesgo',
            type: 'string'
        },
        {
            name: 'nombreSubFactorRiesgo',
            type: 'string'
        },
        {
            name: "compSubFactorRiesgo",
            convert: function(v, record) {
                return "(" + record.get("codigoSubFactorRiesgo") + ") " + record.get("nombreSubFactorRiesgo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoSubFactorRiesgo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreSubFactorRiesgo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.GrupoInteres", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idGrupoInteres",
            type: "int"
        },
        {
            name: 'codigoGrupoInteres',
            type: 'string'
        },
        {
            name: 'descripcionGrupoInteres',
            type: 'string'
        },
        {
            name: "compGrupoInteres",
            convert: function(v, record) {
                return "(" + record.get("codigoGrupoInteres") + ") " + record.get("descripcionGrupoInteres");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoGrupoInteres"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionGrupoInteres"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.MotivoConsulta", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idMotivoConsulta",
            type: "int"
        },
        {
            name: 'codigoMotivoConsulta',
            type: 'string'
        },
        {
            name: 'descripcionMotivoConsulta',
            type: 'string'
        },
        {
            name: "compMotivoConsulta",
            convert: function(v, record) {
                return "(" + record.get("codigoMotivoConsulta") + ") " + record.get("descripcionMotivoConsulta");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoMotivoConsulta"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionMotivoConsulta"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.MotivoContacto", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idMotivoContacto",
            type: "int"
        },
        {
            name: 'codigoMotivoContacto',
            type: 'string'
        },
        {
            name: 'descripcionMotivoContacto',
            type: 'string'
        },
        {
            name: "compMotivoContacto",
            convert: function(v, record) {
                return "(" + record.get("codigoMotivoContacto") + ") " + record.get("descripcionMotivoContacto");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoMotivoContacto"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionMotivoContacto"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.PiezasInformativas", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idPiezasInformativas",
            type: "int"
        },
        {
            name: 'codigoPiezasInformativas',
            type: 'string'
        },
        {
            name: 'descripcionPiezasInformativas',
            type: 'string'
        },
        {
            name: "compPiezasInformativas",
            convert: function(v, record) {
                return "(" + record.get("codigoPiezasInformativas") + ") " + record.get("descripcionPiezasInformativas");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoPiezasInformativas"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionPiezasInformativas"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.ProgramaResolucion412", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idProgramaResolucion412",
            type: "int"
        },
        {
            name: 'codigoProgramaResolucion412',
            type: 'string'
        },
        {
            name: 'descripcionProgramaResolucion412',
            type: 'string'
        },
        {
            name: "compProgramaResolucion412",
            convert: function(v, record) {
                return "(" + record.get("codigoProgramaResolucion412") + ") " + record.get("descripcionProgramaResolucion412");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoProgramaResolucion412"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "descripcionProgramaResolucion412"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idSeguimientoProgramasIntervencionRiesgo",
            type: "int"
        },
        {
            name: 'codigoSeguimientoProgramasIntervencionRiesgo',
            type: 'string'
        },
        {
            name: 'nombreSeguimientoProgramasIntervencionRiesgo',
            type: 'string'
        },
        {
            name: "compSeguimientoProgramasIntervencionRiesgo",
            convert: function(v, record) {
                return "(" + record.get("codigoSeguimientoProgramasIntervencionRiesgo") + ") " + record.get("nombreSeguimientoProgramasIntervencionRiesgo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoSeguimientoProgramasIntervencionRiesgo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreSeguimientoProgramasIntervencionRiesgo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.DemandaInducida.TipoVisitaDomiciliaria", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoVisitaDomiciliaria",
            type: "int"
        },
        {
            name: 'codigoTipoVisitaDomiciliaria',
            type: 'string'
        },
        {
            name: 'nombreTipoVisitaDomiciliaria',
            type: 'string'
        },
        {
            name: "compTipoVisitaDomiciliaria",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoVisitaDomiciliaria") + ") " + record.get("nombreTipoVisitaDomiciliaria");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoVisitaDomiciliaria"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoVisitaDomiciliaria"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.Generales.GruposFocales", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idGruposFocales",
            type: "int"
        },
        {
            name: 'codigoGruposFocales',
            type: 'string'
        },
        {
            name: 'nombreGruposFocales',
            type: 'string'
        },
        {
            name: "compGruposFocales",
            convert: function(v, record) {
                return "(" + record.get("codigoGruposFocales") + ") " + record.get("nombreGruposFocales");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoGruposFocales"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreGruposFocales"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.Generales.Ips", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idIps",
            type: "int"
        },
        {
            name: 'codigoIps',
            type: 'string'
        },
        {
            name: 'razonIps',
            type: 'string'
        },
        {
            name: "idTipoIdentificacion",
            type: "int"
        },
        {
            name: "compTipoIdentificacion",
            type: "string"
        },
        {
            name: "identificacionIps",
            type: "string"
        },
        {
            name: "direccionIps",
            type: "string"
        },
        {
            name: "telefonoIps",
            type: "string"
        },
        {
            name: "idDepartamento",
            type: "int"
        },
        {
            name: "compDepartamento",
            type: "string"
        },
        {
            name: "idCiudad",
            type: "int"
        },
        {
            name: "compCiudad",
            type: "string"
        },
        {
            name: "representanteIps",
            type: "string"
        },
        {
            name: "nivelIps",
            type: "string"
        },
        {
            name: "contactoIps",
            type: "string"
        },
        {
            name: "emailIps",
            type: "string"
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoIps"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "razonIps"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "idTipoIdentificacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "compTipoIdentificacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "identificacionIps"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "direccionIps"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "idDepartamento"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "compDepartamento"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "idCiudad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "compCiudad"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.Generales.TipoIdentificacion", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoIdentificacion",
            type: "int"
        },
        {
            name: 'codigoTipoIdentificacion',
            type: 'string'
        },
        {
            name: 'nombreTipoIdentificacion',
            type: 'string'
        },
        {
            name: "compTipoIdentificacion",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoIdentificacion") + ") " + record.get("nombreTipoIdentificacion");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoIdentificacion"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoIdentificacion"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.Generales.TipoSexo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoSexo",
            type: "int"
        },
        {
            name: 'codigoTipoSexo',
            type: 'string'
        },
        {
            name: 'nombreTipoSexo',
            type: 'string'
        },
        {
            name: "compTipoSexo",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoSexo") + ") " + record.get("nombreTipoSexo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoSexo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoSexo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.Generales.TipoZona", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idTipoZona",
            type: "int"
        },
        {
            name: 'codigoTipoZona',
            type: 'string'
        },
        {
            name: 'nombreTipoZona',
            type: 'string'
        },
        {
            name: "compTipoZona",
            convert: function(v, record) {
                return "(" + record.get("codigoTipoZona") + ") " + record.get("nombreTipoZona");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoTipoZona"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreTipoZona"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaCategoria", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idEncuestaCategoria",
            type: "int"
        },
        {
            name: "idDomVista",
            type: "string"
        },
        {
            name: "codigoEncuestaCategoria",
            type: "string"
        },
        {
            name: 'nombreEncuestaCategoria',
            type: 'string'
        },
        {
            name: 'ordenEncuestaCategoria',
            type: 'int'
        },
        {
            name: "compEncuestaCategoria",
            convert: function(v, record) {
                return "(" + record.get("codigoEncuestaCategoria") + ") " + record.get("nombreEncuestaCategoria");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoEncuestaCategoria"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreEncuestaCategoria"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaLiteral", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idEncuestaLiteral",
            type: "int"
        },
        {
            name: "idEncuestaPregunta",
            type: "int"
        },
        {
            name: "liteEncuestaLiteral",
            type: "string"
        },
        {
            name: 'textoEncuestaLiteral',
            type: 'string'
        },
        {
            name: "valorEncuestaLiteral",
            type: "int"
        },
        {
            name: "checkedEncuestaLiteral",
            type: "bool"
        },
        {
            name: "compEncuestaLiteral",
            convert: function(v, record) {
                return "(" + record.get("liteEncuestaLiteral") + ") " + record.get("textoEncuestaLiteral");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "liteEncuestaLiteral"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "textoEncuestaLiteral"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "valorEncuestaLiteral"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaPregunta", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idEncuestaPregunta",
            type: "int"
        },
        {
            name: "idEncuestaCategoria",
            type: "int"
        },
        {
            name: "codigoEncuestaPregunta",
            type: "string"
        },
        {
            name: 'textoEncuestaPregunta',
            type: 'string'
        },
        {
            name: 'tipoPreEncuestaPregunta',
            type: 'int'
        },
        {
            name: "valorEncuestaPregunta",
            type: "int"
        },
        {
            name: "compEncuestaPregunta",
            convert: function(v, record) {
                return "(" + record.get("codigoEncuestaPregunta") + ") " + record.get("textoEncuestaPregunta");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoEncuestaPregunta"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "textoEncuestaPregunta"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ParticipacionSocial.Eje", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idEje",
            type: "int"
        },
        {
            name: "codigoEje",
            type: "string"
        },
        {
            name: 'nombreEje',
            type: 'string'
        },
        {
            name: "compEje",
            convert: function(v, record) {
                return "(" + record.get("codigoEje") + ") " + record.get("nombreEje");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoEje"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreEje"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ParticipacionSocial.Modulo", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idUnidad",
            type: "int"
        },
        {
            name: "idModulo",
            type: "int"
        },
        {
            name: "codigoModulo",
            type: "string"
        },
        {
            name: 'nombreModulo',
            type: 'string'
        },
        {
            name: "compModulo",
            convert: function(v, record) {
                return "(" + record.get("codigoModulo") + ") " + record.get("nombreModulo");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoModulo"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreModulo"
        }
    ]
});

Ext.define("CoomuceMod.model.Parametros.ParticipacionSocial.Unidad", {
    extend: "Ext.data.Model",
    fields: [
        {
            name: "idEje",
            type: "int"
        },
        {
            name: "idUnidad",
            type: "int"
        },
        {
            name: "codigoUnidad",
            type: "string"
        },
        {
            name: 'nombreUnidad',
            type: 'string'
        },
        {
            name: "compUnidad",
            convert: function(v, record) {
                return "(" + record.get("codigoUnidad") + ") " + record.get("nombreUnidad");
            }
        }
    ],
    validators: [
        {
            type: "presence",
            allowEmpty: false,
            field: "codigoUnidad"
        },
        {
            type: "presence",
            allowEmpty: false,
            field: "nombreUnidad"
        }
    ]
});

Ext.define("CoomuceMod.view.ActualizacionBd.AfiliacionController", {
    extend: "Ext.app.ViewController",
    alias: "controller.actualizacionbd-afiliacion",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onBotonSiguienteClick: function(btn) {
        var me = this;
        var form = Ext.getCmp(btn.form);
        if (!form.getForm().isValid()) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                msg: "Debe rellenar todos los campos obligatorios."
            });
            return false;
        }
        var nextForm = Ext.getCmp(btn.nextForm);
        nextForm.setDisabled(false);
        Ext.getCmp("tabFuan").setActiveTab(nextForm);
    },
    onSelectionChange: function(sm, selected, eOpts) {
        var me = this;
        var selectedAuths = sm.selected.items;
        var storeAuth = Ext.getStore("declaracionAutorizacionStore").data.items;
        _.forEach(storeAuth, function(item) {
            item.data.valorFuanDeclaracionAutorizacion = false;
            _.forEach(selectedAuths, function(auth) {
                if (auth.data.idDeclaracionAutorizacion == item.data.idDeclaracionAutorizacion) {
                    item.data.valorFuanDeclaracionAutorizacion = true;
                }
            });
        });
    },
    onBlurNumber: function(number, event, eOpts) {
        number.setRawValue(Ext.util.Format.usMoney(number.getValue()));
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = me.lookupReference(combo.ciudadReference);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        } else if (combo.regimen) {
            for (var i = 0; i < combo.componentReference.length; i++) {
                var o = me.lookupReference(combo.componentReference[i]);
                o.setReadOnly(record.get("idTipoRegimen") == 1 ? false : true);
            }
        } else {
            var rec = Ext.getCmp("Grid-Beneficiarios").selModel.getSelection();
            rec[0].set(combo.idCampo, record.get(combo.idCampo));
        }
    },
    onFocusCombo: function(combo, event, eOpts) {
        if (combo.checkRecord !== undefined) {
            var record = Ext.getCmp("Grid-TipoNovedad").selModel.getSelection()[0];
            if (!Ext.isEmpty(record.get("tipoValorCampoTipoNovedad"))) {
                combo.setReadOnly(false);
                if (record.get("tipoValorCampoTipoNovedad") === "Lista") {
                    var lista = record.get("valorCampoTipoNovedad").split(";");
                    var data = [];
                    for (var i = 0; i < lista.length; i++) {
                        var item = [];
                        item.push(lista[i]);
                        data.push(item);
                    }
                    combo.setHideTrigger(false);
                    combo.getStore().loadData(data);
                } else {
                    combo.setHideTrigger(true);
                }
            } else {
                combo.setReadOnly(true);
            }
        } else {
            var record = Ext.getCmp("Grid-Beneficiarios").selModel.getSelection()[0];
            combo.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    },
    onToolBeneficiarioAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Beneficiarios').getStore();
        //var nextId = storeGrid.max("idFuanBeneficiariosAfiliado");
        var row = [
                {
                    //idFuanBeneficiariosAfiliado: (nextId == undefined ? 1 : nextId + 1),
                    idFuanAfiliado: 0,
                    idFuan: 0,
                    tipoFuanAfiliado: "Beneficiario",
                    primerApellidoFuanAfiliado: "",
                    segundoApellidoFuanAfiliado: "",
                    primerNombreFuanAfiliado: "",
                    segundoNombreFuanAfiliado: "",
                    idTipoIdentificacion: 0,
                    compTipoIdentificacion: "",
                    identificacionFuanAfiliado: "",
                    idTipoSexo: 0,
                    compTipoSexo: "",
                    fechaNacimientoFuanAfiliado: "",
                    idTipoEtnia: 0,
                    compTipoEtnia: "",
                    idTipoDiscapacidad: 0,
                    compTipoDiscapacidad: "",
                    idCondicionDiscapacidad: 0,
                    compCondicionDiscapacidad: "",
                    numCarnetFuanAfiliado: "",
                    idGrupoPoblacional: 0,
                    arlFuanAfiliado: "",
                    pensionFuanAfiliado: "",
                    ibcFuanAfiliado: 0,
                    direccionFuanAfiliado: "",
                    telefonoFuanAfiliado: "",
                    celularFuanAfiliado: "",
                    emailFuanAfiliado: "",
                    idDepartamento: 0,
                    compDepartamento: "",
                    idCiudad: 0,
                    compCiudad: "",
                    idTipoZona: 0,
                    compTipoZona: "",
                    barrioFuanAfiliado: "",
                    primerApellidoConyugueFuanAfiliado: null,
                    segundoApellidoConyugueFuanAfiliado: null,
                    primerNombreConyugueFuanAfiliado: null,
                    segundoNombreConyugueFuanAfiliado: null,
                    idTipoIdentificacionConyugue: null,
                    identificacionConyugueFuanAfiliado: null,
                    idTipoSexoConyugue: null,
                    fechaNacimientoConyugueFuanAfiliado: null,
                    upcFuanAfiliado: 0
                }
            ];
        storeGrid.insert(0, row);
    },
    onToolBeneficiarioRemoverClick: function() {
        var storeGrid = Ext.getCmp('Grid-Beneficiarios');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onToolIpsPrimariaAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-IpsPrimaria').getStore();
        var nextId = storeGrid.max("idFuanIpsPrimariaAfiliado");
        var row = [
                {
                    idFuanIpsPrimariaAfiliado: (nextId == undefined ? 1 : nextId + 1),
                    idFuanAfiliado: 0,
                    tipoFuanIpsPrimariaAfiliado: "",
                    nombreFuanIpsPrimariaAfiliado: "",
                    codigoFuanIpsPrimariaAfiliado: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onToolIpsPrimariaRemoverClick: function() {
        var storeGrid = Ext.getCmp('Grid-IpsPrimaria');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-Afiliacion");
                var infoForm = form.getForm().getValues();
                var infoFuan = {
                        idFuan: 0,
                        // inicializo este campo que no se captura en pantalla
                        idTipoTramite: parseInt(infoForm.idTipoTramite),
                        idTipoAfiliacion: infoForm.idTipoAfiliacion,
                        idTipoRegimen: infoForm.idTipoRegimen,
                        idTipoAfiliado: infoForm.idTipoAfiliado,
                        idTipoCotizante: infoForm.idTipoCotizante,
                        codigoCotizanteFuan: infoForm.codigoCotizanteFuan,
                        idUsuario: Coomuce.Util.DatosUsuario.idUsuario,
                        firmaAfiliado: infoForm["firmaNovedad"]
                    };
                var afiliados = [];
                afiliados.push({
                    idFuanAfiliado: 0,
                    idFuan: 0,
                    tipoFuanAfiliado: "Cotizante",
                    primerApellidoFuanAfiliado: infoForm.primerApellidoFuanAfiliado,
                    segundoApellidoFuanAfiliado: infoForm.segundoApellidoFuanAfiliado,
                    primerNombreFuanAfiliado: infoForm.primerNombreFuanAfiliado,
                    segundoNombreFuanAfiliado: infoForm.segundoNombreFuanAfiliado,
                    idTipoIdentificacion: infoForm.idTipoIdentificacionII,
                    identificacionFuanAfiliado: infoForm.identificacionFuanAfiliado,
                    idTipoSexo: infoForm.idTipoSexoII,
                    fechaNacimientoFuanAfiliado: infoForm.fechaNacimientoFuanAfiliado,
                    idTipoEtnia: infoForm.idTipoEtnia,
                    idTipoDiscapacidad: (infoForm.idTipoDiscapacidad != null) ? infoForm.idTipoDiscapacidad : null,
                    idCondicionDiscapacidad: (infoForm.idCondicionDiscapacidad != null) ? infoForm.idCondicionDiscapacidad : null,
                    puntajeSisbenFuanAfiliado: infoForm.puntajeSisbenFuanAfiliado,
                    numCarnetFuanAfiliado: infoForm.numCarnetFuanAfiliado,
                    idGrupoPoblacional: (infoForm.idGrupoPoblacional != null) ? infoForm.idGrupoPoblacional : null,
                    arlFuanAfiliado: infoForm.arlFuanAfiliado,
                    pensionFuanAfiliado: infoForm.pensionFuanAfiliado,
                    ibcFuanAfiliado: (infoForm.ibcFuanAfiliado != null) ? infoForm.ibcFuanAfiliado : null,
                    direccionFuanAfiliado: infoForm.direccionFuanAfiliado,
                    telefonoFuanAfiliado: infoForm.telefonoFuanAfiliado,
                    celularFuanAfiliado: infoForm.celularFuanAfiliado,
                    emailFuanAfiliado: infoForm.emailFuanAfiliado,
                    idCiudad: (infoForm.idCiudadIII != null) ? infoForm.idCiudadIII : null,
                    idTipoZona: infoForm.idTipoZona,
                    barrioFuanAfiliado: infoForm.barrioFuanAfiliado,
                    primerApellidoConyugueFuanAfiliado: infoForm.primerApellidoConyugueFuanAfiliado,
                    segundoApellidoConyugueFuanAfiliado: infoForm.segundoApellidoConyugueFuanAfiliado,
                    primerNombreConyugueFuanAfiliado: infoForm.primerNombreConyugueFuanAfiliado,
                    segundoNombreConyugueFuanAfiliado: infoForm.segundoNombreConyugueFuanAfiliado,
                    idTipoIdentificacionConyugue: (infoForm.idTipoIdentificacionConyugue != null) ? infoForm.idTipoIdentificacionConyugue : null,
                    identificacionConyugueFuanAfiliado: infoForm.identificacionConyugueFuanAfiliado,
                    idTipoSexoConyugue: (infoForm.idTipoSexoConyugue != null) ? infoForm.idTipoSexoConyugue : null,
                    fechaNacimientoConyugueFuanAfiliado: infoForm.fechaNacimientoConyugueFuanAfiliado,
                    upcFuanAfiliado: 0,
                    cabezafamilia: 1,
                    grupofamiliar: infoForm.identificacionFuanAfiliado
                });
                /*var entidadTerritorial = {
                    idFuan: 0, 
                    idCiudad: infoForm.idCiudadX,
                    numFichaSisbenFuanEntidadTerritorial: infoForm.numFichaSisbenFuanEntidadTerritorial, 
                    puntajeSisbenFuanEntidadTerritorial: infoForm.puntajeSisbenFuanEntidadTerritorial, 
                    nivelSisbenFuanEntidadTerritorial: infoForm.nivelSisbenFuanEntidadTerritorial, 
                    fechaRadicacionFuanEntidadTerritorial: infoForm.fechaRadicacionFuanEntidadTerritorial, 
                    fechaValidacionFuanEntidadTerritorial: infoForm.fechaValidacionFuanEntidadTerritorial, 
                    idUsuario: Coomuce.Util.DatosUsuario.idUsuario, 
                    observacionFuanEntidadTerritorial: infoForm.observacionFuanEntidadTerritorial
                };*/
                var empleador = {
                        idFuanEmpleadorAfiliado: 0,
                        idFuanAfiliado: 0,
                        nombreFuanEmpleadorAfiliado: infoForm.nombreFuanEmpleadorAfiliado,
                        idTipoIdentificacion: infoForm.idTipoIdentificacion,
                        identificacionFuanEmpleadorAfiliado: infoForm.identificacionFuanEmpleadorAfiliado,
                        tipoPagadorFuanEmpleadorAfiliado: infoForm.tipoPagadorFuanEmpleadorAfiliado,
                        direccionFuanEmpleadorAfiliado: infoForm.direccionFuanEmpleadorAfiliado,
                        telefonoFuanEmpleadorAfiliado: infoForm.telefonoFuanEmpleadorAfiliado,
                        emailFuanEmpleadorAfiliado: infoForm.emailFuanEmpleadorAfiliado,
                        idCiudad: infoForm.idCiudadV
                    };
                var gridBeneficiarios = Ext.getCmp("Grid-Beneficiarios");
                var gridIps = Ext.getCmp("Grid-IpsPrimaria");
                var gridDeclaracion = Ext.getCmp("Grid-DeclaracionAutorizacion");
                Ext.each(gridBeneficiarios.getStore().data.items, function(ob, index, all) {
                    var dato = ob.data;
                    dato.cabezafamilia = 0;
                    dato.grupofamiliar = infoForm.identificacionFuanAfiliado;
                    afiliados.push(dato);
                });
                var ips = [];
                Ext.each(gridIps.getStore().data.items, function(ob, index, all) {
                    var dato = ob.data;
                    ips.push(dato);
                });
                var declaracion = [];
                Ext.each(gridDeclaracion.getStore().data.items, function(ob, index, all) {
                    var dato = ob.data;
                    declaracion.push(dato);
                });
                var conf = {
                        url: Coomuce.Url.Funciones + "AfiliacionGuardar",
                        data: {
                            infoFuan: infoFuan,
                            afiliado: afiliados,
                            ips: ips,
                            declaracion: declaracion,
                            //entidadTerritorial: entidadTerritorial,
                            empleador: empleador
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            me.onBotonCancelarClick();
                        }
                    };
                console.log(conf.data);
            }
        });
    },
    //Coomuce.Util.EnviarPost(conf);
    onBotonCancelarClick: function() {
        Ext.getCmp("Form-Afiliacion").getForm().reset();
        var tabPanel = Ext.getCmp("CoomuceAfiliacion");
        tabPanel.destroy();
    },
    onUploadFirmaDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarFirma");
        var firmaNovedad = this.lookupReference("firmaNovedad");
        botonEliminar.setText(file.data);
        firmaNovedad.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadDocumentoDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarDocumento");
        var documentoNovedad = this.lookupReference("documentoNovedad");
        botonEliminar.setText(file.data);
        documentoNovedad.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Documento importado correctamente."
        });
    },
    onUploadIncapacidadPermanenteDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarIncapacidadPermanente");
        var incapacidadPermanenteNovedad = this.lookupReference("incapacidadPermanenteNovedad");
        botonEliminar.setText(file.data);
        incapacidadPermanenteNovedad.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Documento importado correctamente."
        });
    },
    onUploadFirmaError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarFirmaClick: function(btn) {
        btn.setText("");
        var firmaNovedad = this.lookupReference("firmaNovedad");
        firmaNovedad.setValue("");
    },
    onBotonEliminarDocumentoClick: function(btn) {
        btn.setText("");
        var documentoNovedad = this.lookupReference("documentoNovedad");
        documentoNovedad.setValue("");
    },
    onBotonEliminarIncapacidadPermanenteClick: function(btn) {
        btn.setText("");
        var incapacidadPermanenteNovedad = this.lookupReference("incapacidadPermanenteNovedad");
        incapacidadPermanenteNovedad.setValue("");
    }
});

Ext.define("CoomuceMod.view.ActualizacionBd.AfiliacionModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.actualizacionbd-afiliacion",
    stores: {
        getTipoTramite: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoTramite",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoTramiteAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoAfiliacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoAfiliacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoRegimen: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoRegimen",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoRegimenAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoAfiliado: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliado",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoAfiliadoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoCotizante: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoCotizante",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoCotizanteAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoSexo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoSexo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoSexoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoEtnia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoEtnia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoEtniaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoDiscapacidad: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoDiscapacidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoDiscapacidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCondicionDiscapacidad: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.CondicionDiscapacidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCondicionDiscapacidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getGrupoPoblacional: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.GrupoPoblacional",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGrupoPoblacionalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoZona: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoZona",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoZonaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoParentesco: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoParentesco",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoParentescoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoNovedad: {
            autoLoad: true,
            fields: [
                "idFuan",
                "idTipoNovedad",
                "compTipoNovedad",
                "tipoValorCampoTipoNovedad",
                "valorCampoTipoNovedad",
                "selFuanTipoNovedad",
                "valorFuanTipoNovedad"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetTipoNovedadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getMotivoTraslado: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.MotivoTraslado",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoTrasladoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDeclaracionAutorizacion: {
            storeId: "declaracionAutorizacionStore",
            autoLoad: true,
            fields: [
                "idFuan",
                "idDeclaracionAutorizacion",
                "compDeclaracionAutorizacion",
                "valorFuanDeclaracionAutorizacion"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetDeclaracionAutorizacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        setFuanBeneficiario: {
            fields: [
                "primerApellidoFuanBeneficiariosAfiliado",
                "segundoApellidoFuanBeneficiariosAfiliado",
                "primerNombreFuanBeneficiariosAfiliado",
                "segundoNombreFuanBeneficiariosAfiliado",
                "idTipoIdentificacion",
                "compTipoIdentificacion",
                "identificacionFuanBeneficiariosAfiliado",
                "idTipoSexo",
                "compTipoSexo",
                "fechaNacimientoFuanBeneficiariosAfiliado",
                "idTipoParentesco",
                "compTipoParentesco",
                "idTipoEtnia",
                "compTipoEtnia",
                "idTipoDiscapacidad",
                "compTipoDiscapacidad",
                "idCondicionDiscapacidad",
                "compCondicionDiscapacidad",
                "idDepartamento",
                "compDepartamento",
                "idCiudad",
                "compCiudad",
                "idTipoZona",
                "compTipoZona",
                "telefonoFuanBeneficiariosAfiliado",
                "upcFuanBeneficiariosAfiliado"
            ]
        },
        setFuanIpsPrimaria: {
            storeId: "ipsAfiliadoStore",
            fields: [
                "tipoFuanIpsPrimariaAfiliado",
                "nombreCompletoIps",
                "codigoFuanIpsPrimariaAfiliado"
            ]
        }
    }
});

Ext.define("CoomuceMod.view.ActualizacionBd.Afiliacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ActualizacionBd.AfiliacionController",
        "CoomuceMod.view.ActualizacionBd.AfiliacionModel"
    ],
    controller: "actualizacionbd-afiliacion",
    viewModel: {
        type: "actualizacionbd-afiliacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            id: "Form-Afiliacion",
            scrollable: true,
            items: [
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: false,
                        anchor: "100%",
                        labelWidth: 150
                    },
                    items: [
                        {
                            xtype: "numberfield",
                            hidden: true,
                            name: "idTipoTramite",
                            value: 1
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoAfiliacion}"
                            },
                            displayField: "compTipoAfiliacion",
                            editable: false,
                            fieldLabel: "Tipo de Afiliación",
                            name: "idTipoAfiliacion",
                            queryMode: "local",
                            valueField: "idTipoAfiliacion"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoRegimen}"
                            },
                            componentReference: [
                                "arlFuanAfiliado",
                                "pensionFuanAfiliado",
                                "ibcFuanAfiliado"
                            ],
                            displayField: "compTipoRegimen",
                            editable: false,
                            fieldLabel: "Régimen",
                            listeners: {
                                select: "onSelectCombo"
                            },
                            name: "idTipoRegimen",
                            regimen: true,
                            queryMode: "local",
                            valueField: "idTipoRegimen"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoAfiliado}"
                            },
                            displayField: "compTipoAfiliado",
                            editable: false,
                            fieldLabel: "Tipo de Afiliado",
                            name: "idTipoAfiliado",
                            queryMode: "local",
                            valueField: "idTipoAfiliado"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoCotizante}"
                            },
                            displayField: "compTipoCotizante",
                            editable: false,
                            fieldLabel: "Tipo de Cotizante",
                            name: "idTipoCotizante",
                            queryMode: "local",
                            valueField: "idTipoCotizante"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Código<br />(A registrar por la EPS.)",
                            name: "codigoCotizanteFuan",
                            value: "0"
                        }
                    ],
                    title: "I. DATOS DEL TRAMITE"
                },
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: false,
                        anchor: "100%",
                        labelWidth: 150
                    },
                    items: [
                        {
                            xtype: "textfield",
                            fieldLabel: "Primer apellido",
                            name: "primerApellidoFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Segundo apellido",
                            name: "segundoApellidoFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Primer nombre",
                            name: "primerNombreFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Segundo nombre",
                            name: "segundoNombreFuanAfiliado"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoIdentificacion}"
                            },
                            displayField: "compTipoIdentificacion",
                            editable: false,
                            fieldLabel: "Tipo documento de identidad",
                            name: "idTipoIdentificacionII",
                            queryMode: "local",
                            valueField: "idTipoIdentificacion"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "Número de documento de identidad",
                            name: "identificacionFuanAfiliado",
                            value: 0
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoSexo}"
                            },
                            displayField: "compTipoSexo",
                            editable: false,
                            fieldLabel: "Sexo",
                            name: "idTipoSexoII",
                            queryMode: "local",
                            valueField: "idTipoSexo"
                        },
                        {
                            xtype: "datefield",
                            fieldLabel: "Fecha de nacimiento",
                            name: "fechaNacimientoFuanAfiliado"
                        }
                    ],
                    title: "II. DATOS BÁSICOS DE IDENTIFICACIÓN<br />(del cotizante o cabeza de familia)"
                },
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: false,
                        anchor: "100%",
                        labelWidth: 150
                    },
                    items: [
                        {
                            xtype: "label",
                            html: "<b>Datos Personales</b>"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoEtnia}"
                            },
                            displayField: "compTipoEtnia",
                            editable: false,
                            fieldLabel: "Etnia",
                            name: "idTipoEtnia",
                            queryMode: "local",
                            valueField: "idTipoEtnia"
                        },
                        {
                            xtype: "combo",
                            allowBlank: true,
                            bind: {
                                store: "{getTipoDiscapacidad}"
                            },
                            displayField: "compTipoDiscapacidad",
                            editable: false,
                            fieldLabel: "Tipo discapacidad",
                            name: "idTipoDiscapacidad",
                            queryMode: "local",
                            valueField: "idTipoDiscapacidad"
                        },
                        {
                            xtype: "combo",
                            allowBlank: true,
                            bind: {
                                store: "{getCondicionDiscapacidad}"
                            },
                            displayField: "compCondicionDiscapacidad",
                            editable: false,
                            fieldLabel: "Condición discapacidad",
                            name: "idCondicionDiscapacidad",
                            queryMode: "local",
                            valueField: "idCondicionDiscapacidad"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "Puntaje SISBEN",
                            name: "puntajeSisbenFuanAfiliado"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "No. Carnet",
                            name: "numCarnetFuanAfiliado"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getGrupoPoblacional}"
                            },
                            displayField: "compGrupoPoblacional",
                            editable: false,
                            fieldLabel: "Grupo de población especial",
                            name: "idGrupoPoblacional",
                            queryMode: "local",
                            valueField: "idGrupoPoblacional"
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Administradora de Riesgos Laborales - ARL",
                            name: "arlFuanAfiliado",
                            readOnly: true,
                            reference: "arlFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Administradora de Pensiones",
                            name: "pensionFuanAfiliado",
                            readOnly: true,
                            reference: "pensionFuanAfiliado"
                        },
                        {
                            xtype: "numberfield",
                            allowBlank: true,
                            fieldLabel: "Ingreso Base de Cotización - IBC",
                            hideTrigger: true,
                            listeners: {
                                blur: "onBlurNumber"
                            },
                            name: "ibcFuanAfiliado",
                            reference: "ibcFuanAfiliado",
                            readOnly: true,
                            value: Coomuce.Util.DatosUsuario.salarioMinimo
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Dirección residencia",
                            name: "direccionFuanAfiliado"
                        },
                        {
                            xtype: "numberfield",
                            allowBlank: true,
                            fieldLabel: "Teléfono Fijo",
                            name: "telefonoFuanAfiliado",
                            value: 0
                        },
                        {
                            xtype: "numberfield",
                            allowBlank: true,
                            fieldLabel: "Teléfono Celular",
                            name: "celularFuanAfiliado",
                            value: 0
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Correo Electrónico",
                            name: "emailFuanAfiliado",
                            vtype: "email"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getDepartamento}"
                            },
                            ciudadReference: "idCiudadfIII",
                            displayField: "compDepartamento",
                            editable: false,
                            fieldLabel: "Departamento",
                            listeners: {
                                select: "onSelectCombo"
                            },
                            name: "idDepartamento",
                            queryMode: "local",
                            ubicacion: true,
                            valueField: "idDepartamento"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getCiudad}"
                            },
                            displayField: "compCiudad",
                            editable: false,
                            fieldLabel: "Municipio/Distrito",
                            name: "idCiudadIII",
                            queryMode: "local",
                            reference: "idCiudadfIII",
                            valueField: "idCiudad"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoZona}"
                            },
                            displayField: "compTipoZona",
                            editable: false,
                            fieldLabel: "Zona",
                            name: "idTipoZona",
                            queryMode: "local",
                            valueField: "idTipoZona"
                        },
                        {
                            xtype: "textfield",
                            allowBlank: true,
                            fieldLabel: "Localidad / Comuna",
                            name: "barrioFuanAfiliado"
                        }
                    ],
                    title: "III. DATOS COMPLEMENTARIOS"
                },
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: true,
                        anchor: "100%",
                        labelWidth: 150
                    },
                    items: [
                        {
                            xtype: "label",
                            html: "<b>Datos básicos de Identificación del cónyuge o compañero(a) permanente cotizante</b>"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Primer apellido",
                            name: "primerApellidoConyugueFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Segundo apellido",
                            name: "segundoApellidoConyugueFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Primer nombre",
                            name: "primerNombreConyugueFuanAfiliado"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Segundo nombre",
                            name: "segundoNombreConyugueFuanAfiliado"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoIdentificacion}"
                            },
                            displayField: "compTipoIdentificacion",
                            editable: false,
                            fieldLabel: "Tipo documento de identidad",
                            name: "idTipoIdentificacionConyugue",
                            queryMode: "local",
                            valueField: "idTipoIdentificacion"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "Número de documento de identidad",
                            name: "identificacionConyugueFuanAfiliado",
                            value: 0
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoSexo}"
                            },
                            displayField: "compTipoSexo",
                            editable: false,
                            fieldLabel: "Sexo",
                            name: "idTipoSexoConyugueFuanAfiliado",
                            queryMode: "local",
                            valueField: "idTipoSexo"
                        },
                        {
                            xtype: "datefield",
                            fieldLabel: "Fecha de nacimiento",
                            name: "fechaNacimientoConyugueFuanAfiliado"
                        },
                        {
                            xtype: "grid",
                            bind: {
                                store: "{setFuanBeneficiario}"
                            },
                            border: true,
                            columns: [
                                {
                                    dataIndex: "primerApellidoFuanAfiliado",
                                    header: "Primer apellido",
                                    width: 160,
                                    editor: {
                                        allowBlank: false
                                    }
                                },
                                {
                                    dataIndex: "segundoApellidoFuanAfiliado",
                                    header: "Segundo apellido",
                                    width: 160,
                                    editor: {
                                        allowBlank: true
                                    }
                                },
                                {
                                    dataIndex: "primerNombreFuanAfiliado",
                                    header: "Primer nombre",
                                    width: 160,
                                    editor: {
                                        allowBlank: false
                                    }
                                },
                                {
                                    dataIndex: "segundoNombreFuanAfiliado",
                                    header: "Segundo nombre",
                                    width: 160,
                                    editor: {
                                        allowBlank: true
                                    }
                                },
                                {
                                    dataIndex: "idTipoIdentificacion",
                                    header: "Id Identificación",
                                    hidden: true
                                },
                                {
                                    dataIndex: "compTipoIdentificacion",
                                    header: "Tipo de documento de identidad",
                                    width: 250,
                                    editor: {
                                        xtype: "combo",
                                        bind: {
                                            store: "{getTipoIdentificacion}"
                                        },
                                        displayField: "compTipoIdentificacion",
                                        editable: false,
                                        idCampo: "idTipoIdentificacion",
                                        listeners: {
                                            select: "onSelectCombo"
                                        },
                                        queryMode: "local",
                                        valueField: "compTipoIdentificacion"
                                    }
                                },
                                {
                                    dataIndex: "identificacionFuanAfiliado",
                                    header: "Número de documento de identidad",
                                    width: 200,
                                    editor: {
                                        xtype: "numberfield",
                                        allowBlank: true
                                    }
                                },
                                {
                                    dataIndex: "idTipoSexo",
                                    header: "Id Tipo Sexo",
                                    hidden: true
                                },
                                {
                                    dataIndex: "compTipoSexo",
                                    header: "Sexo",
                                    width: 160,
                                    editor: {
                                        xtype: "combo",
                                        bind: {
                                            store: "{getTipoSexo}"
                                        },
                                        displayField: "compTipoSexo",
                                        editable: false,
                                        idCampo: "idTipoSexo",
                                        listeners: {
                                            select: "onSelectCombo"
                                        },
                                        queryMode: "local",
                                        valueField: "compTipoSexo"
                                    }
                                },
                                {
                                    dataIndex: "fechaNacimientoFuanAfiliado",
                                    header: "Fecha de nacimiento",
                                    width: 160,
                                    editor: {
                                        xtype: "datefield",
                                        format: "d/m/Y"
                                    }
                                },
                                {
                                    text: "DATOS COMPLEMENTARIOS",
                                    columns: [
                                        //{ dataIndex: "numCarnetFuanAfiliado", header: "No. Carnet" },
                                        {
                                            dataIndex: "idTipoParentesco",
                                            header: "Id Tipo Parentesco",
                                            hidden: true
                                        },
                                        {
                                            dataIndex: "compTipoParentesco",
                                            header: "Parentesco",
                                            width: 160,
                                            editor: {
                                                xtype: "combo",
                                                bind: {
                                                    store: "{getTipoParentesco}"
                                                },
                                                displayField: "compTipoParentesco",
                                                editable: false,
                                                idCampo: "idTipoParentesco",
                                                listeners: {
                                                    select: "onSelectCombo"
                                                },
                                                queryMode: "local",
                                                valueField: "compTipoParentesco"
                                            }
                                        },
                                        {
                                            dataIndex: "idTipoEtnia",
                                            header: "Id Tipo Etnia",
                                            hidden: true
                                        },
                                        {
                                            dataIndex: "compTipoEtnia",
                                            header: "Etnia",
                                            width: 160,
                                            editor: {
                                                xtype: "combo",
                                                bind: {
                                                    store: "{getTipoEtnia}"
                                                },
                                                displayField: "compTipoEtnia",
                                                editable: false,
                                                idCampo: "idTipoEtnia",
                                                listeners: {
                                                    select: "onSelectCombo"
                                                },
                                                queryMode: "local",
                                                valueField: "compTipoEtnia"
                                            }
                                        },
                                        {
                                            text: "Discapacidad",
                                            columns: [
                                                {
                                                    dataIndex: "idTipoDiscapacidad",
                                                    header: "Id Tipo Discapacidad",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "compTipoDiscapacidad",
                                                    header: "Tipo",
                                                    width: 160,
                                                    editor: {
                                                        xtype: "combo",
                                                        bind: {
                                                            store: "{getTipoDiscapacidad}"
                                                        },
                                                        displayField: "compTipoDiscapacidad",
                                                        editable: false,
                                                        idCampo: "idTipoDiscapacidad",
                                                        listeners: {
                                                            select: "onSelectCombo"
                                                        },
                                                        queryMode: "local",
                                                        valueField: "compTipoDiscapacidad"
                                                    }
                                                },
                                                {
                                                    dataIndex: "idCondicionDiscapacidad",
                                                    header: "Id Condición Discapacidad",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "compCondicionDiscapacidad",
                                                    header: "Condición",
                                                    width: 160,
                                                    editor: {
                                                        xtype: "combo",
                                                        bind: {
                                                            store: "{getCondicionDiscapacidad}"
                                                        },
                                                        displayField: "compCondicionDiscapacidad",
                                                        editable: false,
                                                        idCampo: "idCondicionDiscapacidad",
                                                        listeners: {
                                                            select: "onSelectCombo"
                                                        },
                                                        queryMode: "local",
                                                        valueField: "compCondicionDiscapacidad"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            text: "Datos de Residencia",
                                            columns: [
                                                {
                                                    dataIndex: "idDepartamento",
                                                    header: "Id Departamento",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "compDepartamento",
                                                    header: "Departamento",
                                                    width: 160,
                                                    editor: {
                                                        xtype: "combo",
                                                        bind: {
                                                            store: "{getDepartamento}"
                                                        },
                                                        displayField: "compDepartamento",
                                                        editable: false,
                                                        idCampo: "idDepartamento",
                                                        listeners: {
                                                            select: "onSelectCombo"
                                                        },
                                                        queryMode: "local",
                                                        valueField: "compDepartamento"
                                                    }
                                                },
                                                {
                                                    dataIndex: "idCiudad",
                                                    header: "Id Ciudad",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "compCiudad",
                                                    header: "Municipio/Distrito",
                                                    width: 160,
                                                    editor: {
                                                        xtype: 'combo',
                                                        allowBlank: false,
                                                        bind: {
                                                            store: '{getCiudad}'
                                                        },
                                                        displayField: 'compCiudad',
                                                        editable: false,
                                                        idCampo: "idCiudad",
                                                        listeners: {
                                                            focus: "onFocusCombo",
                                                            select: "onSelectCombo"
                                                        },
                                                        queryMode: 'local',
                                                        valueField: 'compCiudad'
                                                    }
                                                },
                                                {
                                                    dataIndex: "idTipoZona",
                                                    header: "Id Tipo Zona",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "compTipoZona",
                                                    header: "Zona",
                                                    width: 160,
                                                    editor: {
                                                        xtype: "combo",
                                                        bind: {
                                                            store: "{getTipoZona}"
                                                        },
                                                        displayField: "compTipoZona",
                                                        editable: false,
                                                        idCampo: "idTipoZona",
                                                        listeners: {
                                                            select: "onSelectCombo"
                                                        },
                                                        queryMode: "local",
                                                        valueField: "compTipoZona"
                                                    }
                                                },
                                                {
                                                    dataIndex: "telefonoFuanAfiliado",
                                                    header: "Teléfono Fijo y/o Celular",
                                                    width: 200,
                                                    editor: {
                                                        xtype: "numberfield",
                                                        allowBlank: true
                                                    }
                                                },
                                                {
                                                    dataIndex: "upcFuanAfiliado",
                                                    header: "Valor de la UPC del afiliado adicional",
                                                    width: 250,
                                                    editor: {
                                                        xtype: "numberfield",
                                                        decimalPrecision: 0
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            columnLines: true,
                            height: 250,
                            id: "Grid-Beneficiarios",
                            plugins: {
                                ptype: 'cellediting',
                                clicksToEdit: 1
                            },
                            sortableColumns: false,
                            title: "Datos básicos de identificación de los beneficiarios y los afiliados adicionales",
                            tools: [
                                {
                                    handler: "onToolBeneficiarioAdicionarClick",
                                    tooltip: "Adicionar beneficiario",
                                    type: "plus"
                                },
                                {
                                    handler: "onToolBeneficiarioRemoverClick",
                                    tooltip: "Remover beneficiario",
                                    type: "minus"
                                }
                            ]
                        },
                        {
                            xtype: "label",
                            html: "&nbsp;"
                        },
                        {
                            xtype: "grid",
                            bind: {
                                store: "{setFuanIpsPrimaria}"
                            },
                            border: true,
                            columns: [
                                {
                                    text: "Nombre de la Institución Prestadora de Servicios de Salud - IPS",
                                    columns: [
                                        {
                                            dataIndex: "tipoFuanIpsPrimariaAfiliado",
                                            header: "Tipo",
                                            width: 160,
                                            editor: {
                                                xtype: "combo",
                                                displayField: "nombre",
                                                editable: false,
                                                queryMode: "local",
                                                store: Ext.create("Ext.data.ArrayStore", {
                                                    fields: [
                                                        "nombre"
                                                    ],
                                                    data: [
                                                        [
                                                            "C"
                                                        ],
                                                        [
                                                            "B"
                                                        ]
                                                    ]
                                                }),
                                                valueField: "nombre"
                                            }
                                        },
                                        {
                                            dataIndex: "nombreCompletoIps",
                                            name: "nombreCompletoIps",
                                            header: "",
                                            readOnly: true,
                                            width: 400,
                                            editor: {
                                                allowBlank: false,
                                                readOnly: true
                                            }
                                        }
                                    ]
                                },
                                {
                                    dataIndex: "codigoFuanIpsPrimariaAfiliado",
                                    header: "Código de la IPS<br />(A registrar por la EPS)",
                                    width: 300,
                                    editor: {
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: "widgetcolumn",
                                    header: "",
                                    width: 40,
                                    widget: {
                                        xtype: "button",
                                        componentReference: [
                                            "nombreCompletoIps"
                                        ],
                                        handler: Coomuce.Util.buscarIpsAfiliacion,
                                        inGrid: true,
                                        iconCls: "x-fa fa-list-alt",
                                        tooltip: "Lista de Ips"
                                    }
                                }
                            ],
                            columnLines: true,
                            height: 200,
                            id: "Grid-IpsPrimaria",
                            plugins: {
                                ptype: 'cellediting',
                                clicksToEdit: 1
                            },
                            sortableColumns: false,
                            title: "Selección de la EPS primaria",
                            tools: [
                                {
                                    handler: "onToolIpsPrimariaAdicionarClick",
                                    tooltip: "Adicionar IPS",
                                    type: "plus"
                                },
                                {
                                    handler: "onToolIpsPrimariaRemoverClick",
                                    tooltip: "Remover IPS",
                                    type: "minus"
                                }
                            ]
                        }
                    ],
                    title: "IV. DATOS DE IDENTIFICACIÓN DE LOS MIEMBROS DEL NÚCLEO FAMILIAR"
                },
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: true,
                        anchor: "100%",
                        labelWidth: 150
                    },
                    items: [
                        {
                            xtype: "textfield",
                            fieldLabel: "Nombre o Razón Social",
                            name: "nombreFuanEmpleadorAfiliado"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoIdentificacion}"
                            },
                            displayField: "compTipoIdentificacion",
                            editable: false,
                            fieldLabel: "Tipo documento de identidad",
                            name: "idTipoIdentificacion",
                            queryMode: "local",
                            valueField: "idTipoIdentificacion"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "Número de documento de identidad",
                            name: "identificacionFuanEmpleadorAfiliado",
                            value: 0
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Tipo de aportante o pagador pensiones (A registrar por la EPS)",
                            name: "tipoPagadorFuanEmpleadorAfiliado"
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Dirección",
                            name: "direccionFuanEmpleadorAfiliado"
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "Teléfono",
                            name: "telefonoFuanEmpleadorAfiliado",
                            value: 0
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "Correo Electrónico",
                            name: "emailFuanEmpleadorAfiliado",
                            vtype: "email"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getDepartamento}"
                            },
                            ciudadReference: "idCiudadfV",
                            displayField: "compDepartamento",
                            editable: false,
                            fieldLabel: "Departamento",
                            listeners: {
                                select: "onSelectCombo"
                            },
                            name: "idDepartamento",
                            queryMode: "local",
                            ubicacion: true,
                            valueField: "idDepartamento"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getCiudad}"
                            },
                            displayField: "compCiudad",
                            editable: false,
                            fieldLabel: "Municipio/Distrito",
                            name: "idCiudadV",
                            queryMode: "local",
                            reference: "idCiudadfV",
                            valueField: "idCiudad"
                        }
                    ],
                    title: "V. DATOS DE IDENTIFICACIÓN DEL EMPLEADOR Y OTROS APORTANTES <br />DE LAS ENTIDADES RESPONSABLES DE LA AFILIACIÓN COLECTIVA, INSTITUCIONAL O DE OFICIO"
                },
                {
                    xtype: "fieldset",
                    defaults: {
                        anchor: "100%"
                    },
                    items: [
                        {
                            xtype: "textfield",
                            name: "valorFuanDeclaracionAutorizacion",
                            hidden: true,
                            reference: "valorFuanDeclaracionAutorizacion"
                        },
                        {
                            xtype: "textfield",
                            name: "compDeclaracionAutorizacion",
                            hidden: true,
                            reference: "compDeclaracionAutorizacion"
                        },
                        {
                            xtype: "grid",
                            bind: {
                                store: "{getDeclaracionAutorizacion}"
                            },
                            columns: [
                                {
                                    dataIndex: "valorFuanDeclaracionAutorizacion",
                                    width: 40,
                                    hidden: true
                                },
                                {
                                    dataIndex: "compDeclaracionAutorizacion",
                                    header: "Descripción",
                                    width: 700
                                }
                            ],
                            columnLines: true,
                            height: 300,
                            loadMask: true,
                            selModel: {
                                type: 'checkboxmodel',
                                checkOnly: true,
                                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                                idCampo: "valorFuanDeclaracionAutorizacion",
                                compCampo: "compDeclaracionAutorizacion",
                                listeners: {
                                    selectionchange: "onSelectionChange"
                                }
                            },
                            sortableColumns: false,
                            hideHeaders: true,
                            id: "Grid-DeclaracionAutorizacion"
                        }
                    ],
                    title: "VII. DECLARACION Y AUTORIZACIONES"
                },
                /*{
                                        xtype: 'filefield',
                                        name: 'photo',
                                        fieldLabel: 'Firma',
                                        labelWidth: 50,
                                        msgTarget: 'side',
                                        allowBlank: false,
                                        anchor: '100%',
                                        buttonText: 'Cargar Archivo'
                                    }*/
                {
                    xtype: "fieldset",
                    bodyPadding: 10,
                    layout: {
                        type: "hbox"
                    },
                    items: [
                        {
                            xtype: "fieldset",
                            bodyPadding: 10,
                            layout: {
                                type: "hbox"
                            },
                            items: [
                                {
                                    xtype: 'uploader',
                                    fieldLabel: "Firma",
                                    uploadConfig: {
                                        uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                        maxFileSize: 10 * 1024 * 1024
                                    },
                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                    listeners: {
                                        'uploaddatacomplete': "onUploadFirmaDataComplete",
                                        'uploaderror': "onUploadFirmaError"
                                    }
                                },
                                {
                                    xtype: "textfield",
                                    name: "firmaNovedad",
                                    hidden: true,
                                    reference: "firmaNovedad"
                                },
                                {
                                    xtype: "button",
                                    iconCls: "x-fa fa-minus-circle",
                                    textAlign: "left",
                                    handler: "onBotonEliminarFirmaClick",
                                    reference: "botonEliminarFirma",
                                    width: 250
                                }
                            ],
                            title: "El cotizante, beneficiario o cabeza de familia"
                        }
                    ],
                    title: "VIII. FIRMAS"
                },
                {
                    xtype: "fieldset",
                    bodyPadding: 10,
                    layout: {
                        type: "vbox"
                    },
                    items: [
                        {
                            xtype: "fieldset",
                            bodyPadding: 10,
                            layout: {
                                type: "hbox"
                            },
                            items: [
                                {
                                    xtype: 'uploader',
                                    fieldLabel: "Documento",
                                    uploadConfig: {
                                        uploadUrl: Coomuce.Url.Funciones + "ImportarDocumento",
                                        maxFileSize: 10 * 1024 * 1024
                                    },
                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                    listeners: {
                                        'uploaddatacomplete': "onUploadDocumentoDataComplete",
                                        'uploaderror': "onUploadFirmaError"
                                    }
                                },
                                {
                                    xtype: "textfield",
                                    name: "documentoNovedad",
                                    hidden: true,
                                    reference: "documentoNovedad"
                                },
                                {
                                    xtype: "button",
                                    iconCls: "x-fa fa-minus-circle",
                                    textAlign: "left",
                                    handler: "onBotonEliminarDocumentoClick",
                                    reference: "botonEliminarDocumento",
                                    width: 250
                                }
                            ],
                            title: "Anexo copia del documento de Identidad"
                        },
                        {
                            xtype: "fieldset",
                            bodyPadding: 10,
                            layout: {
                                type: "hbox"
                            },
                            items: [
                                {
                                    xtype: 'uploader',
                                    fieldLabel: "IncapacidadPermanente",
                                    uploadConfig: {
                                        uploadUrl: Coomuce.Url.Funciones + "ImportarIncapacidadPermanente",
                                        maxFileSize: 10 * 1024 * 1024
                                    },
                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                    listeners: {
                                        'uploaddatacomplete': "onUploadIncapacidadPermanenteDataComplete",
                                        'uploaderror': "onUploadFirmaError"
                                    }
                                },
                                {
                                    xtype: "textfield",
                                    name: "incapacidadPermanenteNovedad",
                                    hidden: true,
                                    reference: "incapacidadPermanenteNovedad"
                                },
                                {
                                    xtype: "button",
                                    iconCls: "x-fa fa-minus-circle",
                                    textAlign: "left",
                                    handler: "onBotonEliminarIncapacidadPermanenteClick",
                                    reference: "botonEliminarIncapacidadPermanente",
                                    width: 250
                                }
                            ],
                            title: "Copia del dictamen de incapacidad permanente <br /> emitido por la autoridad competente"
                        }
                    ],
                    title: "IX. ANEXOS"
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.ActualizacionBd.ImportarBaseAfiliadosController", {
    extend: "Ext.app.ViewController",
    alias: "controller.actualizacionbd-importarbaseafiliados",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar el archivo e importar los datos?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-ImportarBase");
                form.getForm().submit({
                    url: Coomuce.Url.Funciones + "ImportarBase",
                    waitMsg: 'Cargando el archivo...',
                    success: function(fp, o) {
                        var tpl = new Ext.XTemplate('Archivo procesado en el servidor.<br />', 'Nombre: {fileName}<br />', 'Tamaño: {fileSize:fileSize}');
                        Ext.Msg.alert('Success', tpl.apply(o.result));
                        var tabPanel = Ext.getCmp("CoomuceImportarBaseAfiliados");
                        tabPanel.destroy();
                    }
                });
            }
        });
    },
    onBotonCancelarClick: function() {
        Ext.getCmp("Form-ImportarBase").getForm().reset();
        var tabPanel = Ext.getCmp("CoomuceImportarBaseAfiliados");
        tabPanel.destroy();
    }
});

Ext.define("CoomuceMod.view.ActualizacionBd.ImportarBaseAfiliadosModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.actualizacionbd-importarbaseafiliados",
    stores: {}
});

Ext.define("CoomuceMod.view.ActualizacionBd.ImportarBaseAfiliados", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ActualizacionBd.ImportarBaseAfiliadosController",
        "CoomuceMod.view.ActualizacionBd.ImportarBaseAfiliadosModel"
    ],
    controller: "actualizacionbd-importarbaseafiliados",
    viewModel: {
        type: "actualizacionbd-importarbaseafiliados"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            id: "Form-ImportarBase",
            scrollable: true,
            items: [
                {
                    xtype: "label",
                    html: "Seleccione el archivo con extension .xlsx que desea importar.<br />El archivo debe contener la siguiente estructura de columnas.<br /><br />Carnet, primerApellidoFuanAfiliado, segundoApellidoFuanAfiliado, primerNombreFuanAfiliado, segundoNombreFuanAfiliado,\tidTipoIdentificacion,  identificacionFuanAfiliado, idTipoSexo, fechaNacimientoFuanAfiliado, idTipoEtnia, idTipoDiscapacidad, idCondicionDiscapacidad, puntajeSisbenFuanAfiliado, idGrupoPoblacional, arlFuanAfiliado, pensionFuanAfiliado, ibcFuanAfiliado, direccionFuanAfiliado, telefonoFuanAfiliado, celularFuanAfiliado, emailFuanAfiliado, CodDep, CodMun, idTipoZona, barrioFuanAfiliado, primerApellidoConyugueFuanAfiliado, segundoApellidoConyugueFuanAfiliado, primerNombreConyugueFuanAfiliado, segundoNombreConyugueFuanAfiliado, idTipoIdentificacionConyugue, identificacionConyugueFuanAfiliado, idTipoSexoConyugue, fechaNacimientoConyugueFuanAfiliado, TipoIdCabezaFamilia, NumidCabezaFamilia"
                },
                {
                    xtype: "filefield",
                    emptyText: "Seleccione el archivo .xlsx",
                    fieldLabel: "Archivo",
                    name: "archivo",
                    buttonConfig: {
                        iconCls: "x-fa fa-upload",
                        text: ""
                    },
                    width: 500
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.ActualizacionBd.NovedadesController", {
    extend: "Ext.app.ViewController",
    alias: "controller.actualizacionbd-novedades",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-Novedades");
                var infoForm = form.getForm().getValues();
                var idFuanAfiliado = parseInt(infoForm.idFuanAfiliado);
                var tipoNovedad = [];
                var gridTipoNovedad = Ext.getCmp("Grid-TipoNovedad");
                Ext.each(gridTipoNovedad.getStore().data.items, function(ob, index, all) {
                    var dato = ob.data;
                    tipoNovedad.push(dato);
                });
                var idTipoIdentificacion = me.lookupReference("idTipoIdentificacion");
                var idTipoSexo = me.lookupReference("idTipoSexo");
                var idMotivoTraslado = me.lookupReference("idMotivoTraslado");
                var idDepartamento = me.lookupReference("idDepartamento");
                var idCiudad = me.lookupReference("idCiudad");
                var novedad = {
                        primerApellidoFuanAfiliado: infoForm.primerApellidoFuanAfiliado,
                        segundoApellidoFuanAfiliado: infoForm.segundoApellidoFuanAfiliado,
                        primerNombreFuanAfiliado: infoForm.primerNombreFuanAfiliado,
                        segundoNombreFuanAfiliado: infoForm.segundoNombreFuanAfiliado,
                        idTipoIdentificacion: infoForm.idTipoIdentificacion,
                        compTipoIdentificacion: idTipoIdentificacion.getRawValue(),
                        identificacionFuanAfiliado: infoForm.identificacionFuanAfiliado,
                        idTipoSexo: infoForm.idTipoSexo,
                        compTipoSexo: idTipoSexo.getRawValue(),
                        fechaNacimientoFuanAfiliado: infoForm.fechaNacimientoFuanAfiliado,
                        epsAnteriorFuanAfiliado: infoForm.epsAnteriorFuanAfiliado,
                        idMotivoTraslado: infoForm.idMotivoTraslado,
                        compMotivoTraslado: idMotivoTraslado.getRawValue(),
                        pensionFuanAfiliado: infoForm.pensionFuanAfiliado,
                        idDepartamento: infoForm.idDepartamento,
                        compDepartamento: idDepartamento.getRawValue(),
                        idCiudad: infoForm.idCiudad,
                        compCiudad: idCiudad.getRawValue(),
                        firmaNovedad: infoForm.firmaNovedad
                    };
                var conf = {
                        url: Coomuce.Url.Funciones + "NovedadesGuardar",
                        data: {
                            idFuanAfiliado: idFuanAfiliado,
                            idUsuario: Coomuce.Util.DatosUsuario.idUsuario,
                            tipoNovedad: tipoNovedad,
                            novedad: novedad
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            me.onBotonCancelarClick();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonCancelarClick: function() {
        Ext.getCmp("Form-Novedades").getForm().reset();
        var tabPanel = Ext.getCmp("CoomuceImportarBaseAfiliados");
        tabPanel.destroy();
    },
    onFocusCombo: function(combo, event, eOpts) {
        if (combo.checkRecord !== undefined) {
            var record = Ext.getCmp("Grid-TipoNovedad").selModel.getSelection()[0];
            if (!Ext.isEmpty(record.get("tipoValorCampoTipoNovedad"))) {
                combo.setReadOnly(false);
                if (record.get("tipoValorCampoTipoNovedad") === "Lista") {
                    var lista = record.get("valorCampoTipoNovedad").split(";");
                    var data = [];
                    for (var i = 0; i < lista.length; i++) {
                        var item = [];
                        item.push(lista[i]);
                        data.push(item);
                    }
                    combo.setHideTrigger(false);
                    combo.getStore().loadData(data);
                } else {
                    combo.setHideTrigger(true);
                }
            } else {
                combo.setReadOnly(true);
            }
        }
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = me.lookupReference(combo.ciudadReference);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    },
    onUploadFirmaDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarFirma");
        var firmaNovedad = this.lookupReference("firmaNovedad");
        botonEliminar.setText(file.data);
        firmaNovedad.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadFirmaError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarFirmaClick: function(btn) {
        btn.setText("");
        var firmaNovedad = this.lookupReference("firmaNovedad");
        firmaNovedad.setValue("");
    }
});

Ext.define("CoomuceMod.view.ActualizacionBd.NovedadesModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.actualizacionbd-novedades",
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoSexo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoSexo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoSexoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoNovedad: {
            autoLoad: true,
            fields: [
                "idFuan",
                "idTipoNovedad",
                "compTipoNovedad",
                "tipoValorCampoTipoNovedad",
                "valorCampoTipoNovedad",
                "selFuanTipoNovedad",
                "valorFuanTipoNovedad"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetTipoNovedadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getMotivoTraslado: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.MotivoTraslado",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoTrasladoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.ActualizacionBd.Novedades", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ActualizacionBd.NovedadesController",
        "CoomuceMod.view.ActualizacionBd.NovedadesModel"
    ],
    controller: "actualizacionbd-novedades",
    viewModel: {
        type: "actualizacionbd-novedades"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            id: "Form-Novedades",
            scrollable: true,
            items: [
                {
                    xtype: "fieldset",
                    defaults: {
                        allowBlank: false,
                        anchor: "100%"
                    },
                    items: [
                        {
                            xtype: "grid",
                            bind: {
                                store: "{getTipoNovedad}"
                            },
                            border: true,
                            columns: [
                                {
                                    dataIndex: "idTipoNovedad",
                                    header: "Id Tipo Novedad",
                                    hidden: true
                                },
                                {
                                    xtype: "checkcolumn",
                                    dataIndex: "selFuanTipoNovedad",
                                    header: "",
                                    width: 30
                                },
                                {
                                    dataIndex: "compTipoNovedad",
                                    header: "Novedad",
                                    width: 450
                                },
                                {
                                    dataIndex: "valorFuanTipoNovedad",
                                    header: "Valor Selección",
                                    width: 200,
                                    editor: {
                                        xtype: "combo",
                                        displayField: "nombre",
                                        checkRecord: true,
                                        listeners: {
                                            focus: "onFocusCombo"
                                        },
                                        queryMode: "local",
                                        store: Ext.create("Ext.data.ArrayStore", {
                                            fields: [
                                                "nombre"
                                            ]
                                        }),
                                        valueField: "nombre"
                                    }
                                }
                            ],
                            columnLines: true,
                            height: 350,
                            id: "Grid-TipoNovedad",
                            plugins: {
                                ptype: 'cellediting',
                                clicksToEdit: 1
                            },
                            title: "Tipo de Novedad"
                        },
                        {
                            xtype: "fieldset",
                            defaults: {
                                anchor: "98%",
                                bodyPadding: 10,
                                labelWidth: 150
                            },
                            height: 500,
                            scrollable: true,
                            items: [
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Primer apellido",
                                    name: "primerApellidoFuanAfiliado",
                                    reference: "primerApellidoFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Segundo apellido",
                                    name: "segundoApellidoFuanAfiliado",
                                    reference: "segundoApellidoFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Primer nombre",
                                    name: "primerNombreFuanAfiliado",
                                    reference: "primerNombreFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Segundo nombre",
                                    name: "segundoNombreFuanAfiliado",
                                    reference: "segundoNombreFuanAfiliado"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getTipoIdentificacion}"
                                    },
                                    displayField: "compTipoIdentificacion",
                                    editable: false,
                                    fieldLabel: "Tipo documento de identidad",
                                    name: "idTipoIdentificacion",
                                    queryMode: "local",
                                    reference: "idTipoIdentificacion",
                                    valueField: "idTipoIdentificacion"
                                },
                                {
                                    layout: {
                                        type: "table",
                                        columns: 2,
                                        tableAttrs: {
                                            style: {
                                                "background": "#f6f6f6",
                                                width: '100%'
                                            }
                                        }
                                    },
                                    defaults: {
                                        style: {
                                            "background": "#f6f6f6"
                                        }
                                    },
                                    items: [
                                        {
                                            items: [
                                                {
                                                    xtype: "numberfield",
                                                    hidden: true,
                                                    name: "idFuanAfiliado",
                                                    readOnly: true
                                                },
                                                {
                                                    xtype: "textfield",
                                                    anchor: "95%",
                                                    fieldLabel: "No. Documento de Identidad",
                                                    labelWidth: 150,
                                                    name: "identificacionFuanAfiliado",
                                                    width: "95%"
                                                }
                                            ]
                                        },
                                        {
                                            items: [
                                                {
                                                    xtype: "button",
                                                    componentReference: [
                                                        "idFuanAfiliado",
                                                        "idTipoIdentificacion",
                                                        "identificacionFuanAfiliado",
                                                        "primerApellidoFuanAfiliado",
                                                        "segundoApellidoFuanAfiliado",
                                                        "primerNombreFuanAfiliado",
                                                        "segundoNombreFuanAfiliado",
                                                        "idTipoSexo",
                                                        "fechaNacimientoFuanAfiliado",
                                                        "pensionFuanAfiliado",
                                                        "idDepartamento",
                                                        "idCiudad"
                                                    ],
                                                    handler: Coomuce.Util.buscarAfiliado,
                                                    iconCls: "x-fa fa-binoculars",
                                                    reference: "botonBuscarAfiliado",
                                                    tooltip: "Lista de Afiliados",
                                                    width: 30
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getTipoSexo}"
                                    },
                                    displayField: "compTipoSexo",
                                    editable: false,
                                    fieldLabel: "Sexo",
                                    name: "idTipoSexo",
                                    queryMode: "local",
                                    reference: "idTipoSexo",
                                    valueField: "idTipoSexo"
                                },
                                {
                                    xtype: "datefield",
                                    fieldLabel: "Fecha de nacimiento",
                                    name: "fechaNacimientoFuanAfiliado",
                                    reference: "fechaNacimientoFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "EPS anterior",
                                    name: "epsAnteriorFuanAfiliado",
                                    reference: "epsAnteriorFuanAfiliado"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getMotivoTraslado}"
                                    },
                                    displayField: "compMotivoTraslado",
                                    editable: false,
                                    fieldLabel: "Motivo de traslado (Código)",
                                    name: "idMotivoTraslado",
                                    queryMode: "local",
                                    valueField: "idMotivoTraslado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Caja de Compesación Familiar o Pagador de Pensiones",
                                    name: "pensionFuanAfiliado",
                                    referene: "pensionFuanAfiliado"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getDepartamento}"
                                    },
                                    ciudadReference: "idCiudad",
                                    displayField: "compDepartamento",
                                    editable: false,
                                    fieldLabel: "Departamento",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idDepartamento",
                                    queryMode: "local",
                                    ubicacion: true,
                                    valueField: "idDepartamento"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getCiudad}"
                                    },
                                    displayField: "compCiudad",
                                    editable: false,
                                    fieldLabel: "Municipio/Distrito",
                                    name: "idCiudad",
                                    queryMode: "local",
                                    reference: "idCiudad",
                                    valueField: "idCiudad"
                                },
                                {
                                    bodyPadding: 10,
                                    layout: {
                                        type: "table",
                                        columns: 2
                                    },
                                    title: "Firma",
                                    items: [
                                        {
                                            items: [
                                                {
                                                    xtype: 'uploader',
                                                    uploadConfig: {
                                                        uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                                        maxFileSize: 10 * 1024 * 1024
                                                    },
                                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                                    listeners: {
                                                        'uploaddatacomplete': "onUploadFirmaDataComplete",
                                                        'uploaderror': "onUploadFirmaError"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            items: [
                                                {
                                                    xtype: "textfield",
                                                    name: "firmaNovedad",
                                                    hidden: true,
                                                    reference: "firmaNovedad"
                                                },
                                                {
                                                    xtype: "button",
                                                    iconCls: "x-fa fa-minus-circle",
                                                    textAlign: "left",
                                                    handler: "onBotonEliminarFirmaClick",
                                                    reference: "botonEliminarFirma",
                                                    width: 250
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            title: "Reporte de Novedad"
                        }
                    ],
                    title: "VI. DATOS PARA EL REPORTE DE LA NOVEDAD"
                }
            ]
        }
    ]
});

Ext.define('CoomuceMod.view.Administracion.CiudadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.administracion-ciudad',
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var departamento = me.lookupReference("departamento");
        if (Ext.isEmpty(departamento.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: "Ciudad",
                msg: "Debe seleccionar un departamento."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Ciudad-Principal').getStore();
        var max = storeGrid.max("idCiudad");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idCiudad: (nextId == undefined ? 1 : nextId + 1),
                    idDepartamento: departamento.getValue(),
                    codigoCiudad: "",
                    nombreCiudad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm("Ciudad", "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Ciudad-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceCiudad");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        Ext.Msg.confirm("Ciudad", "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Ciudad-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: "Ciudad",
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Administracion + "CiudadCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                            var tabPanel = Ext.getCmp("CoomuceCiudad");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Ciudad-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectDepartamento: function(combo, record, eOpts) {
        var grid = Ext.getCmp("Grid-Ciudad-Principal");
        grid.getStore().proxy.setUrl(Coomuce.Url.Administracion + "GetCiudadAll?idDepartamento=" + record.data.idDepartamento);
        grid.getStore().load();
    }
});

Ext.define('CoomuceMod.view.Administracion.CiudadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.administracion-ciudad',
    stores: {
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.Ciudad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.CiudadController",
        "CoomuceMod.view.Administracion.CiudadModel"
    ],
    controller: "administracion-ciudad",
    viewModel: {
        type: "administracion-ciudad"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    displayField: "nombreDepartamento",
                    emptyText: "-- Seleccione departamento --",
                    listeners: {
                        select: "onSelectDepartamento"
                    },
                    queryMode: "local",
                    reference: "departamento",
                    valueField: "idDepartamento",
                    width: 250
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getCiudad}'
            },
            columns: [
                {
                    dataIndex: "idDepartamento",
                    header: "Id Departamento",
                    hidden: true
                },
                {
                    dataIndex: "idCiudad",
                    header: "Id Ciudad",
                    hidden: true
                },
                {
                    dataIndex: "codigoCiudad",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreCiudad",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Ciudad-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionCuerpoCorreoController", {
    extend: "Ext.app.ViewController",
    alias: "controller.administracion-configuracioncuerpocorreo",
    cargarInformacion: function(value) {
        var me = this;
        var form = Ext.getCmp('Form-ConfiguracionCuerpoCorreo-Principal');
        var mask = new Ext.LoadMask({
                msg: "Cargando datos de configuración cuerpo de correo",
                target: form
            });
        mask.show();
        me.getViewModel().getStore("getConfiguracionCuerpoCorreo").load({
            params: {
                tipo: value
            }
        });
        me.getViewModel().getStore("getConfiguracionCuerpoCorreo").on("load", function(store, records, successful, eOpts) {
            form.getForm().loadRecord(records[0]);
            mask.hide();
        });
    },
    onBotonCancelarClick: function() {
        //this.getReferences().formularioDatos.getForm().reset();
        var tabPanel = Ext.getCmp("CoomuceConfiguracionCuerpoCorreo");
        tabPanel.destroy();
    },
    onBotonGuardarClick: function() {
        var me = this;
        var form = Ext.getCmp('Form-ConfiguracionCuerpoCorreo-Principal');
        var datos = form.getForm().getValues();
        var conf = {
                url: Coomuce.Url.Administracion + "ConfiguracionCuerpoCorreoU",
                data: {
                    datos: datos
                },
                targetMask: form,
                msgMask: "Guardando datos...",
                fnSuccess: function(response) {
                    me.cargarInformacion(datos.tipoConfiguracionCuerpoCorreo);
                    var tabPanel = Ext.getCmp("CoomuceConfiguracionCuerpoCorreo");
                    tabPanel.destroy();
                }
            };
        Coomuce.Util.EnviarPost(conf);
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        me.cargarInformacion(record.get("id"));
    }
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionCuerpoCorreoModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.administracion-configuracioncuerpocorreo",
    stores: {
        getTipoConfiguracionCuerpoCorreo: {
            fields: [
                "id",
                "nombre"
            ],
            data: [
                [
                    0,
                    "Cuerpo Correo"
                ],
                [
                    1,
                    "Reenvío Cuerpo Correo"
                ]
            ]
        },
        getConfiguracionCuerpoCorreo: {
            autoLoad: false,
            fields: [
                "idConfiguracionCuerpoCorreo",
                "tipoConfiguracionCuerpoCorreo",
                "tituloConfiguracionCuerpoCorreo",
                "mensajeConfiguracionCuerpoCorreo"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetConfiguracionCuerpoCorreoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionCuerpoCorreo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.ConfiguracionCuerpoCorreoController",
        "CoomuceMod.view.Administracion.ConfiguracionCuerpoCorreoModel"
    ],
    controller: "administracion-configuracioncuerpocorreo",
    viewModel: {
        type: "administracion-configuracioncuerpocorreo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "50%"
            },
            defaultType: "textfield",
            id: "Form-ConfiguracionCuerpoCorreo-Principal",
            items: [
                {
                    hidden: true,
                    name: "idConfiguracionCuerpoCorreo"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTipoConfiguracionCuerpoCorreo}"
                    },
                    displayField: "nombre",
                    editable: false,
                    emptyText: "-- Seleccione tipo de cuerpo --",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    name: "tipoConfiguracionCuerpoCorreo",
                    queryMode: "local",
                    reference: "tipoConfiguracionCuerpoCorreo",
                    valueField: "id"
                },
                {
                    allowBlank: false,
                    emptyText: "Titulo o asunto de correo",
                    fieldLabel: "Titulo/Asunto",
                    name: "tituloConfiguracionCuerpoCorreo"
                },
                {
                    xtype: "label",
                    html: "Cuerpo"
                },
                {
                    xtype: "htmleditor",
                    height: 300,
                    name: "mensajeConfiguracionCuerpoCorreo"
                },
                {
                    xtype: "label",
                    html: "Variables: {0} = Primer Nombre, {1} = Segundo Nombre, {2} = Primer Apellido, {3} = Segundo Apellido, {4} = Usuario, {5} = Contraseña<br />Para incrustar las variables se debe digitar el digito correspondiente a la variable tal cual como se muestra."
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionGeneralController", {
    extend: "Ext.app.ViewController",
    alias: "controller.administracion-configuraciongeneral",
    cargarInformacion: function() {
        var me = this;
        var form = Ext.getCmp('Form-ConfiguracionGeneral-Principal');
        var mask = new Ext.LoadMask({
                msg: "Cargando datos de configuración general",
                target: form
            });
        mask.show();
        me.getViewModel().getStore("getConfiguracionGeneral").load();
        me.getViewModel().getStore("getConfiguracionGeneral").on("load", function(store, records, successful, eOpts) {
            form.getForm().loadRecord(records[0]);
            mask.hide();
        });
    },
    onAfterRender: function(view, eOpts) {
        var me = this;
        me.cargarInformacion();
    },
    onBotonCancelarClick: function() {
        //this.getReferences().formularioDatos.getForm().reset();
        //me.cargarInformacion();
        var tabPanel = Ext.getCmp("CoomuceConfiguracionGeneral");
        tabPanel.destroy();
    },
    onBotonGuardarClick: function() {
        var me = this;
        var form = Ext.getCmp('Form-ConfiguracionGeneral-Principal');
        var datos = form.getForm().getValues();
        datos.sslConfiguracionGeneral = (datos.sslConfiguracionGeneral == "on") ? true : false;
        console.log(datos);
        var conf = {
                url: Coomuce.Url.Administracion + "ConfiguracionGeneralU",
                data: {
                    datos: datos
                },
                targetMask: form,
                msgMask: "Guardando datos...",
                fnSuccess: function(response) {
                    me.cargarInformacion();
                    var tabPanel = Ext.getCmp("CoomuceConfiguracionGeneral");
                    tabPanel.destroy();
                }
            };
        Coomuce.Util.EnviarPost(conf);
    }
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionGeneralModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.administracion-configuraciongeneral",
    stores: {
        getConfiguracionGeneral: {
            autoLoad: false,
            fields: [
                "idConfiguracionGeneral",
                "tiempoInactividadConfiguracionGeneral",
                "salarioConfiguracionGeneral",
                "emailSalienteConfiguracionGeneral",
                "pswEmailConfiguracionGeneral",
                "ccConfiguracionGeneral",
                "csConfiguracionGeneral",
                "hostConfiguracionGeneral",
                "portConfiguracionGeneral",
                "sslConfiguracionGeneral"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetConfiguracionGeneralAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.ConfiguracionGeneral", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.ConfiguracionGeneralController",
        "CoomuceMod.view.Administracion.ConfiguracionGeneralModel"
    ],
    controller: "administracion-configuraciongeneral",
    viewModel: {
        type: "administracion-configuraciongeneral"
    },
    layout: "fit",
    listeners: {
        afterrender: "onAfterRender"
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "50%"
            },
            id: "Form-ConfiguracionGeneral-Principal",
            items: [
                {
                    xtype: "numberfield",
                    hidden: true,
                    name: "idConfiguracionGeneral"
                },
                {
                    xtype: "numberfield",
                    fieldLabel: "Tiempo inactividad (minutos)",
                    labelWidth: 150,
                    name: "tiempoInactividadConfiguracionGeneral"
                },
                {
                    xtype: "numberfield",
                    fieldLabel: "Salario minimo legal vigente",
                    hideTrigger: true,
                    labelWidth: 150,
                    name: "salarioConfiguracionGeneral"
                },
                {
                    xtype: "fieldset",
                    anchor: "60%",
                    defaults: {
                        xtype: "textfield",
                        anchor: "100%",
                        labelWidth: 150
                    },
                    height: 350,
                    items: [
                        {
                            allowBlank: false,
                            emptyText: "Dirección de correo eletrónico",
                            fieldLabel: "Dirección de correo eletrónico",
                            name: "emailSalienteConfiguracionGeneral",
                            vtype: "email"
                        },
                        {
                            allowBlank: false,
                            emptyText: "Contraseña correo",
                            fieldLabel: "Contraseña correo",
                            inputType: "password",
                            name: "pswEmailConfiguracionGeneral"
                        },
                        {
                            allowBlank: true,
                            emptyText: "Copia de correo saliente",
                            fieldLabel: "Copia de correo saliente",
                            name: "ccConfiguracionGeneral",
                            vtype: "email"
                        },
                        {
                            allowBlank: true,
                            emptyText: "Correo de soporte",
                            fieldLabel: "Correo de soporte",
                            name: "csConfiguracionGeneral"
                        },
                        {
                            allowBlank: false,
                            emptyText: "Host",
                            fieldLabel: "Host",
                            name: "hostConfiguracionGeneral"
                        },
                        {
                            xtype: "numberfield",
                            allowBlank: false,
                            emptyText: "Puerto",
                            fieldLabel: "Puerto",
                            hideTrigger: true,
                            name: "portConfiguracionGeneral"
                        },
                        {
                            xtype: "checkbox",
                            fieldLabel: "Usa ssl?",
                            name: "sslConfiguracionGeneral"
                        }
                    ],
                    title: "Configuración Correo Saliente"
                }
            ]
        }
    ]
});

Ext.define('CoomuceMod.view.Administracion.DepartamentoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.administracion-departamento',
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Departamento-Principal').getStore();
        var nextId = storeGrid.max("idDepartamento");
        var row = [
                {
                    idDepartamento: (nextId == undefined ? 1 : nextId + 1),
                    codigoDepartamento: "",
                    nombreDepartamento: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm("Departamento", "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Departamento-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceDepartamento");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        Ext.Msg.confirm("Departamento", "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Departamento-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: "Departamento",
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Administracion + "DepartamentoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                            var tabPanel = Ext.getCmp("CoomuceDepartamento");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Departamento-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Administracion.DepartamentoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.administracion-departamento',
    stores: {
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.Departamento", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.DepartamentoController",
        "CoomuceMod.view.Administracion.DepartamentoModel"
    ],
    controller: "administracion-departamento",
    viewModel: {
        type: "administracion-departamento"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getDepartamento}'
            },
            columns: [
                {
                    dataIndex: "idDepartamento",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoDepartamento",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreDepartamento",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Departamento-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Administracion.PermisosRolController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.administracion-permisosrol',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var rol = me.lookupReference("rol");
        if (Ext.isEmpty(departamento.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un rol."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-PermisosRol-Principal').getStore();
        var row = [
                {
                    idRol: rol.getValue(),
                    idMenu: 0,
                    nombreMenu: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-PermisosRol-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomucePermisosRol");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var rol = me.lookupReference("rol");
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-PermisosRol-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Administracion + "PermisosRolCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idRol: rol.getValue()
                                }
                            });
                            var tabPanel = Ext.getCmp("CoomucePermisosRol");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-PermisosRol-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectRol: function(combo, record, eOpts) {
        var grid = Ext.getCmp("Grid-PermisosRol-Principal");
        //grid.getStore().proxy.setUrl(Coomuce.Url.Administracion + "GetCiudadAll?idDepartamento=" + record.data.idDepartamento);
        grid.getStore().load({
            params: {
                idRol: record.get("idRol")
            }
        });
    },
    onSelectCombo: function(combo, rec, eOpts) {
        var record = Ext.getCmp("Grid-PermisosRol-Principal").selModel.getSelection();
        record[0].set(combo.campoId, rec.get(combo.campoId));
    }
});

Ext.define('CoomuceMod.view.Administracion.PermisosRolModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.administracion-permisosrol',
    stores: {
        getRol: {
            autoLoad: true,
            fields: [
                {
                    name: "idRol",
                    type: "int"
                },
                {
                    name: "nombreRol",
                    type: "string"
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetRolAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getMenu: {
            autoLoad: true,
            fields: [
                "idMenu",
                "nombreMenu"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetMenuAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPermisos: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.PermisosRol",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetPermisoRolAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.PermisosRol", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.PermisosRolController",
        "CoomuceMod.view.Administracion.PermisosRolModel"
    ],
    controller: "administracion-permisosrol",
    viewModel: {
        type: "administracion-permisosrol"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getRol}"
                    },
                    displayField: "nombreRol",
                    emptyText: "-- Seleccione rol --",
                    listeners: {
                        select: "onSelectRol"
                    },
                    queryMode: "local",
                    reference: "rol",
                    valueField: "idRol",
                    width: 250
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getPermisos}'
            },
            columns: [
                {
                    dataIndex: "idRol",
                    header: "Id Rol",
                    hidden: true
                },
                {
                    dataIndex: "idMenu",
                    header: "Id Menu",
                    hidden: true
                },
                {
                    dataIndex: "nombreMenu",
                    header: "Menú",
                    width: 300,
                    editor: {
                        xtype: "combo",
                        bind: {
                            store: "{getMenu}"
                        },
                        campoId: "idMenu",
                        displayField: "nombreMenu",
                        listeners: {
                            select: "onSelectDepartamento"
                        },
                        queryMode: "local",
                        valueField: "nombreMenu"
                    }
                },
                {
                    xtype: "checkcolumn",
                    dataIndex: "habilitadoRolMenu",
                    header: "Habilitado?"
                }
            ],
            columnLines: true,
            id: "Grid-PermisosRol-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define("CoomuceMod.view.Administracion.UsuarioController", {
    extend: "Ext.app.ViewController",
    alias: "controller.administracion-usuario",
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
        this.getReferences().reenviarCredencialButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var grid = Ext.getCmp('Grid-Usuario-Principal');
        // Create a record instance
        var storeGrid = grid.getStore();
        var nextId = storeGrid.max("idUsuario");
        var row = [
                {
                    idUsuario: (nextId == undefined ? 1 : nextId + 1),
                    idTipoIdentificacion: 0,
                    nombreTipoIdentificacion: "",
                    primerApellidoUsuario: "",
                    segundoApellidoUsuario: "",
                    primerNombreUsuario: "",
                    segundoNombreUsuario: "",
                    emailUsuario: "",
                    idRol: 0,
                    nombreRol: "",
                    esTemporalUsuario: true,
                    estaHabilitadoUsuario: true
                }
            ];
        storeGrid.insert(0, row);
        var rec = storeGrid.getAt(0);
        grid.getView().select(rec);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm("Usuario", "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Usuario-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceUsuario");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        Ext.Msg.confirm("Usuario", "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Usuario-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: "Usuario",
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Administracion + "UsuarioCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                            var tabPanel = Ext.getCmp("CoomuceUsuario");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Usuario-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonReenviarCredencialClick: function() {
        var grid = Ext.getCmp("Grid-Usuario-Principal");
        var record = grid.selModel.getSelection();
        if (record.length == 0) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: "Usuario",
                msg: "Debe selecconar un registro."
            });
            return false;
        }
        Ext.Msg.confirm("Usuario", "¿Esta seguro de reenviar las credenciales del usuario seleccionado?", function(btn) {
            if (btn === "yes") {
                var conf = {
                        url: Coomuce.Url.Administracion + "UsuarioReenviarCredencial",
                        data: {
                            idUsuario: record[0].data.idUsuario
                        },
                        targetMask: grid,
                        msgMask: "Reenviando credenciales de usuario...",
                        fnSuccess: function(response) {
                            grid.getStore().load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onSelectCombo: function(combo, rec, eOpts) {
        var record = Ext.getCmp("Grid-Usuario-Principal").selModel.getSelection();
        record[0].set(combo.campoId, rec.data[combo.campoId]);
    }
});

Ext.define("CoomuceMod.view.Administracion.UsuarioModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.administracion-usuario",
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getRol: {
            autoLoad: true,
            fields: [
                {
                    name: "idRol",
                    type: "int"
                },
                {
                    name: "nombreRol",
                    type: "string"
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetRolAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getUsuario: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Usuario",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetUsuarioAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Administracion.Usuario", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Administracion.UsuarioController",
        "CoomuceMod.view.Administracion.UsuarioModel"
    ],
    controller: "administracion-usuario",
    viewModel: {
        type: "administracion-usuario"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                },
                {
                    text: "Reenviar Credenciales",
                    iconCls: "x-fa fa-key",
                    handler: "onBotonReenviarCredencialClick",
                    reference: "reenviarCredencialButton",
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: "{getUsuario}"
            },
            columns: [
                {
                    dataIndex: "idUsuario",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "idTipoIdentificacion",
                    header: "Id Tipo Identificacion",
                    hidden: true
                },
                {
                    dataIndex: "nombreTipoIdentificacion",
                    header: "Tipo Identificación",
                    width: 150,
                    editor: {
                        xtype: "combo",
                        allowBlank: false,
                        bind: {
                            store: "{getTipoIdentificacion}"
                        },
                        displayField: "nombreTipoIdentificacion",
                        editable: false,
                        campoId: "idTipoIdentificacion",
                        listeners: {
                            select: "onSelectCombo"
                        },
                        queryMode: "local",
                        valueField: "nombreTipoIdentificacion"
                    }
                },
                {
                    dataIndex: "identificacionUsuario",
                    header: "No. Identificación",
                    width: 150,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "primerApellidoUsuario",
                    header: "Primer Apellido",
                    width: 150,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "segundoApellidoUsuario",
                    header: "Segundo Apellido",
                    width: 150,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "primerNombreUsuario",
                    header: "Primer Nombre",
                    width: 150,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "segundoNombreUsuario",
                    header: "Segundo Nombre",
                    width: 150,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "emailUsuario",
                    header: "Email",
                    width: 150,
                    editor: {
                        allowBlank: false,
                        vtype: "email"
                    }
                },
                {
                    dataIndex: "celularUsuario",
                    header: "Celular",
                    width: 150,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "idRol",
                    header: "Id Rol",
                    hidden: true
                },
                {
                    dataIndex: "nombreRol",
                    header: "Rol",
                    width: 150,
                    editor: {
                        xtype: "combo",
                        allowBlank: false,
                        bind: {
                            store: "{getRol}"
                        },
                        displayField: "nombreRol",
                        editable: false,
                        campoId: "idRol",
                        listeners: {
                            select: "onSelectCombo"
                        },
                        queryMode: "local",
                        valueField: "nombreRol"
                    }
                },
                {
                    xtype: "booleancolumn",
                    dataIndex: "esTemporalUsuario",
                    header: "Tiene clave temporal?",
                    trueText: "Sí",
                    falseText: "No",
                    width: 150
                },
                {
                    xtype: "checkcolumn",
                    dataIndex: "estaHabilitadoUsuario",
                    header: "Habilitado?"
                }
            ],
            columnLines: true,
            id: "Grid-Usuario-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: false,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.CaracterizacionPoblacional.HfdfrController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.caracterizacionpoblacional-hfdfr',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-Hfdfr-Principal");
                form.getForm().reset();
                var tabPanel = Ext.getCmp("CoomuceHfdfr");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                //var date = new Date();
                var form = Ext.getCmp("Form-Hfdfr-Principal");
                var df = form.getForm().getValues();
                var info = {
                        idInfoHfdfr: 0,
                        tipoDiligenciamientoHfdfr: df["tipoDiligenciamientoHfdfr"],
                        fechaVisitaHfdfr: df["fechaVisitaHfdfr"],
                        //fechaVisitaHfdfr: date.getFullYear() + "-" +
                        //    (date.getMonth() < 10 ? "0" + date.getMonth() : date.getMonth()) + "-" +
                        //    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()),
                        horaInicioHfdfr: "",
                        horaFinHfdfr: "",
                        idFuanAfiliado: parseInt(df["idFuanAfiliado"]),
                        idCiudad: df["idCiudad"],
                        veredaInfoHfdfr: df["veredaInfoHfdfr"],
                        barrioInfoHfdfr: df["barrioInfoHfdfr"],
                        telefonoInfoHfdfr: df["telefonoInfoHfdfr"],
                        firmaHfdfr: df["firmaHfdfr"],
                        idUsuario: Coomuce.Util.DatosUsuario.idUsuario
                    };
                var historia = {
                        pregunta1: df["pregunta1"],
                        pregunta2: df["pregunta2"],
                        pregunta3: df["pregunta3"],
                        pregunta4: df["pregunta4"],
                        pregunta5: df["pregunta5"],
                        pregunta6: df["pregunta6"],
                        pregunta7: df["pregunta7"],
                        pregunta8: {
                            opcionMadre: (df["pregunta8opcionMadre"] == "on" ? true : false),
                            opcionPadre: (df["pregunta8opcionPadre"] == "on" ? true : false),
                            opcionHijos: (df["pregunta8opcionHijos"] == "on" ? true : false),
                            opcionOtros: (df["pregunta8opcionOtros"] == "on" ? true : false)
                        },
                        pregunta9: df["pregunta9"],
                        pregunta10: df["pregunta10"],
                        pregunta11: df["pregunta11"],
                        pregunta12: df["pregunta12"],
                        pregunta13: df["pregunta13"],
                        pregunta14: [],
                        /// es listado
                        pregunta15: {
                            opcionA: df["pregunta15opcionA"],
                            opcionB: df["pregunta15opcionB"],
                            opcionC: df["pregunta15opcionC"],
                            opcionD: df["pregunta15opcionD"],
                            opcionE: df["pregunta15opcionE"],
                            opcionF: df["pregunta15opcionF"],
                            opcionG: df["pregunta15opcionG"]
                        },
                        pregunta16: df["pregunta16"],
                        pregunta17: df["pregunta17"],
                        pregunta18: df["pregunta18"],
                        pregunta19: df["pregunta19"],
                        pregunta20: {
                            opcionA: (df["pregunta20opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta20opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta20opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta20opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta20opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta20opcionF"] == "on" ? true : false)
                        },
                        pregunta21: df["pregunta21"],
                        pregunta22: df["pregunta22"],
                        pregunta23: df["pregunta23"],
                        pregunta24: {
                            opcionA: (df["pregunta24opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta24opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta24opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta24opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta24opcionE"] == "on" ? true : false),
                            opcionF1: (df["pregunta24opcionF1"] == "on" ? true : false),
                            opcionF2: (df["pregunta24opcionF2"] == "on" ? true : false),
                            opcionG: (df["pregunta24opcionG"] == "on" ? true : false),
                            opcionH: (df["pregunta24opcionH"] == "on" ? true : false),
                            opcionI: (df["pregunta24opcionI"] == "on" ? true : false),
                            opcionJ: (df["pregunta24opcionJ"] == "on" ? true : false),
                            opcionK: (df["pregunta24opcionK"] == "on" ? true : false),
                            opcionL: (df["pregunta24opcionL"] == "on" ? true : false),
                            opcionM: (df["pregunta24opcionM"] == "on" ? true : false),
                            opcionN: (df["pregunta24opcionN"] == "on" ? true : false),
                            opcionO: (df["pregunta24opcionO"] == "on" ? true : false)
                        },
                        pregunta25: df["pregunta25"],
                        pregunta26: [],
                        // lista
                        pregunta27: {
                            opcionA: (df["pregunta27opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta27opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta27opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta27opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta27opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta27opcionF"] == "on" ? true : false)
                        },
                        pregunta28: [],
                        // lista
                        pregunta29: df["pregunta29"],
                        pregunta30: {
                            personasF: df["pregunta30personasF"],
                            personasM: df["pregunta30personasM"],
                            personasNA: df["pregunta30personasNA"]
                        },
                        pregunta31: [],
                        // lista
                        pregunta32: [],
                        // lista
                        pregunta33: [],
                        // lista
                        pregunta34: {
                            opcionA: (df["pregunta34opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta34opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta34opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta34opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta34opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta34opcionF"] == "on" ? true : false),
                            opcionG: (df["pregunta34opcionG"] == "on" ? true : false),
                            opcionH: (df["pregunta34opcionH"] == "on" ? true : false)
                        },
                        pregunta35: df["pregunta35"],
                        pregunta36: {
                            opcionA: (df["pregunta36opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta36opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta36opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta36opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta36opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta36opcionF"] == "on" ? true : false),
                            opcionG: (df["pregunta36opcionG"] == "on" ? true : false),
                            opcionH: (df["pregunta36opcionH"] == "on" ? true : false)
                        },
                        pregunta37: df["pregunta37"],
                        pregunta38: {
                            opcionA: (df["pregunta38opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta38opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta38opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta38opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta38opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta38opcionF"] == "on" ? true : false)
                        },
                        pregunta39: {
                            opcionA: (df["pregunta39opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta39opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta39opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta39opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta39opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta39opcionF"] == "on" ? true : false)
                        },
                        pregunta40: {
                            opcionA: (df["pregunta40opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta40opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta40opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta40opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta40opcionE"] == "on" ? true : false),
                            opcionF: (df["pregunta40opcionF"] == "on" ? true : false)
                        },
                        pregunta41: {
                            ninguno: (df["pregunta41opcionNinguno"] == "on" ? true : false),
                            opcionMama: df["pregunta41opcionMama"],
                            opcionPapa: df["pregunta41opcionPapa"],
                            opcionOtro: df["pregunta41opcionOtro"]
                        },
                        pregunta42: {
                            opcionA: (df["pregunta42opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta42opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta42opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta42opcionD"] == "on" ? true : false),
                            opcionE: (df["pregunta42opcionE"] == "on" ? true : false)
                        },
                        pregunta43: df["pregunta43"],
                        pregunta44: {
                            opcionA: (df["pregunta44opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta44opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta44opcionC"] == "on" ? true : false)
                        },
                        pregunta45: {
                            edad: df["pregunta45edad"],
                            opcionA: (df["pregunta45opcionA"] == "on" ? true : false),
                            opcionB: (df["pregunta45opcionB"] == "on" ? true : false),
                            opcionC: (df["pregunta45opcionC"] == "on" ? true : false),
                            opcionD: (df["pregunta45opcionD"] == "on" ? true : false)
                        }
                    };
                //infoIfppir.gestanteIfppir = (infoIfppir.gestanteIfppir === "on" ? true : false);
                var grid14 = Ext.getCmp("Grid-Pregunta14");
                Ext.each(grid14.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta14.push({
                        nivel: item.get("compNivelEducativo"),
                        madre: item.get("madreNivelEducativo"),
                        padre: item.get("padreNivelEducativo")
                    });
                });
                var grid26 = Ext.getCmp("Grid-Pregunta26");
                Ext.each(grid26.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta26.push({
                        nombreAnimal: item.get("compTipoAnimal"),
                        seleccion: item.get("activarTipoAnimal"),
                        numero: item.get("numeroTipoAnimal")
                    });
                });
                var grid28 = Ext.getCmp("Grid-Pregunta28");
                Ext.each(grid28.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta28.push({
                        nombreAfiliado: item.get("nombre"),
                        carnet: item.get("numCarnet"),
                        edad: item.get("edad"),
                        discapacidad: item.get("codDiscapacidad")
                    });
                });
                var grid31 = Ext.getCmp("Grid-Pregunta31");
                Ext.each(grid31.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta31.push({
                        nombreFamiliar: item.get("nombre"),
                        carnet: item.get("numCarnet")
                    });
                });
                var grid32 = Ext.getCmp("Grid-Pregunta32");
                Ext.each(grid32.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta32.push({
                        nombreFamiliar: item.get("nombre"),
                        carnet: item.get("numCarnet")
                    });
                });
                var grid33 = Ext.getCmp("Grid-Pregunta33");
                Ext.each(grid33.getStore().data.items, function(item, index, allItems) {
                    historia.pregunta33.push({
                        nombreFamiliar: item.get("nombre"),
                        carnet: item.get("numCarnet")
                    });
                });
                //var itemsValidar = [];
                // solo validar cuando se edita o adiciona registros
                //if (itemsValidar.length > 0) {
                //    var validator = Coomuce.Util.dataValidate(itemsValidar);
                //    if (!validator.success) {
                //        Coomuce.Util.ShowMessage({ type: "ERROR", title: titleView, msg: validator.msg });
                //        return false;
                //    }
                //}
                var conf = {
                        url: Coomuce.Url.Funciones + "HfdfrGuardar",
                        data: {
                            info: info,
                            historia: historia
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            var tabPanel = Ext.getCmp("CoomuceHfdfr");
                            tabPanel.destroy();
                        }
                    };
                /*form.getForm().reset();
                        grid28.removeAll();
                        grid31.removeAll();
                        grid32.removeAll();
                        grid33.removeAll();*/
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBlurNumber: function(number, event, eOpts) {
        number.setRawValue(Ext.util.Format.usMoney(number.getValue()));
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.dependent) {
            var idCiudad = me.lookupReference("idCiudad");
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        } else {
            for (var i = 0; i < combo.componentReference.length; i++) {
                var o = me.lookupReference(combo.componentReference[i]);
                o.setValue(record.get(combo.componentReference[i]));
            }
        }
    },
    onChangeCheckNinguno: function(check, newValue, oldValue, eOpts) {
        var me = this;
        var pregunta41opcionMama = me.lookupReference("pregunta41opcionMama");
        var pregunta41opcionPapa = me.lookupReference("pregunta41opcionPapa");
        var pregunta41opcionOtro = me.lookupReference("pregunta41opcionOtro");
        if (newValue) {
            pregunta41opcionMama.setValue("");
            pregunta41opcionPapa.setValue("");
            pregunta41opcionOtro.setValue("");
        } else {
            pregunta41opcionMama.setValue("NO");
            pregunta41opcionPapa.setValue("NO");
            pregunta41opcionOtro.setValue("NO");
        }
        pregunta41opcionMama.setDisabled(newValue);
        pregunta41opcionPapa.setDisabled(newValue);
        pregunta41opcionOtro.setDisabled(newValue);
    },
    onChangeCheck: function(check, newValue, oldValue, eOpts) {
        var me = this;
        var pregunta8opcionCual = me.lookupReference("pregunta8opcionCual");
        if (newValue) {
            pregunta8opcionCual.setReadOnly(check.boxLabel == "OTRO" ? false : true);
        } else {
            pregunta8opcionCual.setReadOnly(true);
        }
    },
    onChangeOption: function(option, newValue, oldValue, eOpts) {
        var me = this;
        var grid = Ext.getCmp("Grid-Pregunta26");
        var pregunta27 = me.lookupReference("pregunta27");
        grid.setDisabled(option.inputValue == "SI" ? true : false);
        pregunta27.setDisabled(option.inputValue == "SI" ? true : false);
    },
    onBotonAdicionarGrid28Click: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Pregunta28').getStore();
        var row = [
                {
                    numCarnet: "",
                    nombre: "",
                    edad: 0,
                    codDiscapacidad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonRemoverGrid28Click: function() {
        var storeGrid = Ext.getCmp('Grid-Pregunta28');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonAdicionarGrid31Click: function() {
        var me = this;
        var numeroIntegrantes = me.lookupReference("numeroIntegrantes");
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Pregunta31').getStore();
        for (var i = 0; i < numeroIntegrantes.getValue(); i++) {
            var row = [
                    {
                        numCarnet: "",
                        nombre: ""
                    }
                ];
            storeGrid.insert(0, row);
        }
    },
    onBotonRemoverGrid31Click: function() {
        var storeGrid = Ext.getCmp('Grid-Pregunta31');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonAdicionarGrid32Click: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Pregunta32').getStore();
        var row = [
                {
                    numCarnet: "",
                    nombre: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonRemoverGrid32Click: function() {
        var storeGrid = Ext.getCmp('Grid-Pregunta32');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonAdicionarGrid33Click: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Pregunta33').getStore();
        var row = [
                {
                    numCarnet: "",
                    nombre: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonRemoverGrid33Click: function() {
        var storeGrid = Ext.getCmp('Grid-Pregunta33');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onUploadDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var record = source.getWidgetRecord();
        record.set("archivoAudioHfdfr", file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de audio importado correctamente."
        });
    },
    onUploadError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarArchivoClick: function(btn) {
        var record = btn.getWidgetRecord();
        record.set("archivoAudioHfdfr", "");
    },
    onBotonImportarArchivoClick: function() {
        var me = this;
        var store = Ext.create("Ext.data.Store", {
                autoLoad: true,
                fields: [
                    "idInfoHfdfr",
                    "tipoDiligenciamientoHfdfr",
                    {
                        name: "fechaVisitaHfdfr",
                        convert: Coomuce.Util.parseDate
                    },
                    "codigoTipoIdentificacion",
                    "identificacionFuanAfiliado",
                    "compAfiliado",
                    "archivoAudioHfdfr"
                ],
                proxy: {
                    timeout: 600000,
                    useDefaultXhrHeader: false,
                    type: 'ajax',
                    url: Coomuce.Url.Funciones + "GetFunHfdfrAll",
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: "total"
                    }
                }
            });
        var pagingBar = Ext.widget("pagingtoolbar", {
                store: store,
                displayInfo: true,
                displayMsg: "Registros {0} - {1} de {2}"
            });
        var grid = Ext.create("Ext.grid.Panel", {
                bbar: pagingBar,
                columns: [
                    {
                        dataIndex: "idInfoHfdfr",
                        header: "No. Plantilla"
                    },
                    {
                        dataIndex: "tipoDiligenciamientoHfdfr",
                        header: "Tipo Diligenciamiento"
                    },
                    {
                        xtype: "datecolumn",
                        dataIndex: "fechaVisitaHfdfr",
                        format: "d/m/Y",
                        header: "Fecha"
                    },
                    {
                        dataIndex: "codigoTipoIdentificacion",
                        header: "Tipo Identificación"
                    },
                    {
                        dataIndex: "identificacionFuanAfiliado",
                        header: "Identificación"
                    },
                    {
                        dataIndex: "compAfiliado",
                        header: "Afiliado"
                    },
                    {
                        xtype: "widgetcolumn",
                        header: "",
                        width: 60,
                        widget: {
                            xtype: 'uploader',
                            uploadConfig: {
                                uploadUrl: Coomuce.Url.Funciones + "ImportarAudioHfdfr",
                                maxFileSize: 10 * 1024 * 1024
                            },
                            inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                            listeners: {
                                'uploaddatacomplete': me.onUploadDataComplete,
                                'uploaderror': me.onUploadError
                            }
                        }
                    },
                    {
                        xtype: "widgetcolumn",
                        dataIndex: "archivoAudioHfdfr",
                        header: "Archivo de audio",
                        width: 200,
                        widget: {
                            xtype: "button",
                            iconCls: "x-fa fa-minus-circle",
                            textAlign: "left",
                            handler: me.onBotonEliminarArchivoClick
                        }
                    }
                ],
                columnLines: true,
                loadMask: true,
                store: store
            });
        var fnGuardarCambios = function() {
                var datos = [];
                Ext.each(store.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (!ob.phantom) {
                            datos.push({
                                idInfoHfdfr: ob.data.idInfoHfdfr,
                                archivoAudioHfdfr: ob.data.archivoAudioHfdfr
                            });
                        }
                    }
                });
                Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
                    if (btn === "yes") {
                        var conf = {
                                url: Coomuce.Url.Funciones + "HfdfrGuardarCambios",
                                data: {
                                    datos: datos
                                },
                                targetMask: grid,
                                msgMask: "Guardando datos...",
                                fnSuccess: function(response) {
                                    store.load();
                                }
                            };
                        Coomuce.Util.EnviarPost(conf);
                    }
                });
            };
        var window = Ext.create("Ext.window.Window", {
                height: 500,
                items: grid,
                layout: "fit",
                modal: true,
                tbar: {
                    items: [
                        {
                            text: "Guardar cambios",
                            handler: fnGuardarCambios
                        }
                    ]
                },
                title: "Importar archivo de audio",
                width: 500
            });
        window.show();
    },
    onUploadFirmaDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarFirma");
        var firmaHfdfr = this.lookupReference("firmaHfdfr");
        botonEliminar.setText(file.data);
        firmaHfdfr.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadFirmaError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarFirmaClick: function(btn) {
        btn.setText("");
        var firmaHfdfr = this.lookupReference("firmaHfdfr");
        firmaHfdfr.setValue("");
    }
});

Ext.define('CoomuceMod.view.CaracterizacionPoblacional.HfdfrModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.caracterizacionpoblacional-hfdfr',
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoZona: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoZona",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoZonaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getProcedencia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.Procedencia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetProcedenciaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getNivelEducativo: {
            autoLoad: true,
            fields: [
                {
                    name: "idNivelEducativo",
                    type: "int"
                },
                {
                    name: "compNivelEducativo",
                    type: "string"
                },
                {
                    name: "padreNivelEducativo",
                    type: "bool"
                },
                {
                    name: "madreNivelEducativo",
                    type: "bool"
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetNivelEducativoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCondicionVivienda: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionVivienda",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCondicionViviendaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTenencia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.Tenencia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTenenciaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoCombustible: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustible",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoCombustibleAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoVivienda: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoVivienda",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoViviendaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTratamientoAgua: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAgua",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTratamientoAguaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDisposicionExcreta: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcreta",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetDisposicionExcretaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDisposicionBasura: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasura",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetDisposicionBasuraAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoAnimal: {
            autoLoad: true,
            fields: [
                {
                    name: "idTipoAnimal",
                    type: "int"
                },
                {
                    name: "compTipoAnimal",
                    type: "string"
                },
                {
                    name: "activarTipoAnimal",
                    type: "bool"
                },
                {
                    name: "numeroTipoAnimal",
                    type: "int"
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetTipoAnimalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        //getAfiliado: {
        //    autoLoad: false,
        //    model: "CoomuceMod.model.ActualizacionBd.FuanAfiliado",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetFuanAfiliadoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        getOpciones: {
            fields: [
                "id",
                "nombre"
            ],
            data: [
                [
                    "SI",
                    "A - SI"
                ],
                [
                    "NO",
                    "B - NO"
                ],
                [
                    "AVECES",
                    "C - A VECES"
                ]
            ]
        },
        setPregunta28: {
            fields: [
                "numCarnet",
                "nombre",
                "edad",
                "codDiscapacidad"
            ]
        },
        setPregunta31: {
            fields: [
                "numCarnet",
                "nombre"
            ]
        },
        setPregunta32: {
            fields: [
                "numCarnet",
                "nombre"
            ]
        },
        setPregunta33: {
            fields: [
                "numCarnet",
                "nombre"
            ]
        }
    }
});

Ext.define("CoomuceMod.view.CaracterizacionPoblacional.Hfdfr", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.CaracterizacionPoblacional.HfdfrController",
        "CoomuceMod.view.CaracterizacionPoblacional.HfdfrModel"
    ],
    controller: "caracterizacionpoblacional-hfdfr",
    viewModel: {
        type: "caracterizacionpoblacional-hfdfr"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    /*disabled: true,*/
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    /*disabled: true,*/
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Importar archivo de audio",
                    iconCls: "x-fa fa-file-audio-o",
                    handler: "onBotonImportarArchivoClick",
                    tooltip: "Esta opción permite importar archivos de audio a las plantillas diligenciadas telefonicamente."
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "100%"
            },
            id: "Form-Hfdfr-Principal",
            scrollable: true,
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha de Visita",
                    name: "fechaVisitaHfdfr",
                    format: "d/m/Y",
                    maxValue: new Date(),
                    value: new Date()
                },
                {
                    xtype: "combo",
                    fieldLabel: "Tipo Diligenciamiento",
                    name: "tipoDiligenciamientoHfdfr",
                    store: [
                        "Personal",
                        "Telefonico"
                    ],
                    value: "Personal"
                },
                {
                    layout: {
                        type: "table",
                        columns: 6
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Departamento: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    name: "idDepartamento",
                                    hidden: true,
                                    reference: "idDepartamento"
                                },
                                {
                                    xtype: "textfield",
                                    name: "compDepartamento",
                                    readOnly: true,
                                    reference: "compDepartamento"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Municipio: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    name: "idCiudad",
                                    hidden: true,
                                    reference: "idCiudad"
                                },
                                {
                                    xtype: "textfield",
                                    name: "compCiudad",
                                    readOnly: true,
                                    reference: "compCiudad"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Vereda: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "veredaInfoHfdfr"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Barrio: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "barrioInfoHfdfr"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Teléfono: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "telefonoInfoHfdfr"
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: "label",
                    html: "<b>INFORMACIÓN FAMILIAR</b>"
                },
                {
                    layout: {
                        type: "table",
                        columns: 6
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Entrevista A: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "nombreCompletoAfiliado",
                                    readOnly: true,
                                    reference: "nombreCompletoAfiliado",
                                    width: 400
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Tipo documento <br />de identidad: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    name: "codigoTipoIdentificacion",
                                    readOnly: true,
                                    reference: "codigoTipoIdentificacion",
                                    width: 200
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Documento No.: "
                                }
                            ]
                        },
                        {
                            layout: {
                                type: "table",
                                columns: 2
                            },
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            hidden: true,
                                            name: "idFuanAfiliado"
                                        },
                                        {
                                            xtype: "textfield",
                                            hideLabel: true,
                                            name: "identificacionFuanAfiliado",
                                            readOnly: true
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "button",
                                            componentReference: [
                                                "idFuanAfiliado",
                                                "codigoTipoIdentificacion",
                                                "identificacionFuanAfiliado",
                                                "nombreCompletoAfiliado",
                                                "puntajeSisbenFuanAfiliado",
                                                "numCarnetFuanAfiliado",
                                                "idDepartamento",
                                                "compDepartamento",
                                                "idCiudad",
                                                "compCiudad"
                                            ],
                                            fechaUltFormato: "fechaUltHistoria",
                                            validarFormato: true,
                                            handler: Coomuce.Util.buscarAfiliadoHistoria,
                                            iconCls: "x-fa fa-binoculars",
                                            tooltip: "Lista de Afiliados",
                                            width: 30
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            colspan: 2,
                            html: "&nbsp;"
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Carnet: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "numCarnetFuanAfiliado",
                                    reference: "numCarnetFuanAfiliado",
                                    readOnly: true
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "Sisben: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "puntajeSisbenFuanAfiliado",
                                    readOnly: true,
                                    reference: "puntajeSisbenFuanAfiliado"
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getProcedencia}"
                    },
                    displayField: "compProcedencia",
                    editable: false,
                    fieldLabel: "1. PROCEDENCIA DE LA FAMILIA",
                    labelWidth: 200,
                    name: "pregunta1",
                    queryMode: "local",
                    reference: "idProcedencia",
                    valueField: "compProcedencia"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTipoZona}"
                    },
                    displayField: "compTipoZona",
                    editable: false,
                    fieldLabel: "2. UBICACIÓN ACTUAL DE LA FAMILIA",
                    labelWidth: 250,
                    name: "pregunta2",
                    queryMode: "local",
                    reference: "idTipoZona",
                    valueField: "compTipoZona"
                },
                {
                    layout: {
                        type: "table",
                        columns: 4
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "3. NUMERO DE PERSONAS QUE VIVEN EN EL DOMICILIO: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta3"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "9. NUMEROS DE PERSONAS MAYORES DE 65 AÑOS: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta9"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "4. NUMERO DE PERSONAS DE 6 A 18 AÑOS: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta4"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "10. NUMERO DE PERSONAS MAYORES DE 65 AÑOS QUE TRABAJAN: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta10"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "5. NUMERO DE PERSONAS DE 6 A 18 AÑOS QUE ESTUDIAN: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta5"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "11. NUMERO DE PERSONAS DE 15 A 65 AÑOS: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta11"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "6. NUMERO DE PERSONAS DE 6 A 14 AÑOS: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta6"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "12. NUMERO DE PERSONAS DE 15 A 65 AÑOS QUE TRABAJAN: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta12"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "7. NUMERO DE PERSONAS DE 6 A 14 AÑOS QUE TRABAJAN: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    hideLabel: true,
                                    name: "pregunta7"
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "label",
                                    html: "13. TOTAL DE INGRESOS MENSUALES EN LA FAMILIA: "
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hideLabel: true,
                                    hideTrigger: true,
                                    listeners: {
                                        blur: "onBlurNumber"
                                    },
                                    name: "pregunta13"
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '8. QUIEN APORTA ECONOMICAMENTE EN LA FAMILIA',
                    labelWidth: 350,
                    items: [
                        {
                            boxLabel: 'MADRE',
                            name: 'pregunta8opcionMadre',
                            listeners: {
                                change: "onChangeCheck"
                            }
                        },
                        {
                            boxLabel: 'PADRE',
                            name: 'pregunta8opcionPadre',
                            listeners: {
                                change: "onChangeCheck"
                            }
                        },
                        {
                            boxLabel: 'HIJOS',
                            name: 'pregunta8opcionHijos',
                            listeners: {
                                change: "onChangeCheck"
                            }
                        },
                        {
                            boxLabel: 'OTRO',
                            name: 'pregunta8opcionOtros',
                            listeners: {
                                change: "onChangeCheck"
                            }
                        },
                        {
                            xtype: "textfield",
                            fieldLabel: "CUAL?",
                            name: "pregunta8opcionCual",
                            readOnly: true,
                            reference: "pregunta8opcionCual"
                        }
                    ]
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{getNivelEducativo}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "compNivelEducativo",
                            header: "",
                            width: 250
                        },
                        {
                            xtype: "checkcolumn",
                            dataIndex: "madreNivelEducativo",
                            header: "Madre"
                        },
                        {
                            xtype: "checkcolumn",
                            dataIndex: "padreNivelEducativo",
                            header: "Padre"
                        }
                    ],
                    columnLines: true,
                    height: 300,
                    id: "Grid-Pregunta14",
                    tbar: {
                        items: [
                            "14. NIVEL EDUCATIVO PADRES"
                        ]
                    }
                },
                {
                    xtype: "label",
                    html: "<b>15. CONDICIONES DE LA VIVIENDA</b><br />SEÑALE UNA OPCION"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCondicionVivienda}"
                    },
                    displayField: "nombreCondicionVivienda",
                    editable: false,
                    fieldLabel: "A - EL PISO DE LA VIVIENDA ESTA CONSTRUIDO EN SU MAYOR PORCENTAJE EN",
                    labelWidth: 400,
                    name: "pregunta15opcionA",
                    queryMode: "local",
                    valueField: "nombreCondicionVivienda"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCondicionVivienda}"
                    },
                    displayField: "nombreCondicionVivienda",
                    editable: false,
                    fieldLabel: "B - EL TECHO DE LA VIVIENDA ESTA CONSTRUIDO EN SU MAYOR PORCENTAJE EN",
                    labelWidth: 400,
                    name: "pregunta15opcionB",
                    queryMode: "local",
                    valueField: "nombreCondicionVivienda"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCondicionVivienda}"
                    },
                    displayField: "nombreCondicionVivienda",
                    editable: false,
                    fieldLabel: "C - LAS PAREDES DE LA VIVIENDA ESTAN CONSTRUIDAS EN SU MAYOR PORCENTAJE EN",
                    labelWidth: 400,
                    name: "pregunta15opcionC",
                    queryMode: "local",
                    valueField: "nombreCondicionVivienda"
                },
                {
                    xtype: "numberfield",
                    fieldLabel: "D - NUMERO DE HABITACIONES DEL DOMICILIO",
                    labelWidth: 300,
                    name: "pregunta15opcionD"
                },
                {
                    xtype: "numberfield",
                    fieldLabel: "E - NUMERO DE CAMAS EN EL DOMICILIO",
                    labelWidth: 250,
                    name: "pregunta15opcionE"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTipoVivienda}"
                    },
                    displayField: "compTipoVivienda",
                    editable: false,
                    fieldLabel: "F - TIPO DE VIVIENDA",
                    labelWidth: 150,
                    name: "pregunta15opcionF",
                    queryMode: "local",
                    valueField: "compTipoVivienda"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTenencia}"
                    },
                    displayField: "compTenencia",
                    editable: false,
                    fieldLabel: "G - TENENCIA",
                    labelWidth: 100,
                    name: "pregunta15opcionG",
                    queryMode: "local",
                    valueField: "compTenencia"
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '16. LA FAMILIA COCINA EN EL MISMO SITIO DONDE DUERME',
                    labelWidth: 300,
                    name: "pregunta16",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI"
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO"
                        },
                        {
                            boxLabel: 'C - N.A',
                            inputValue: "N.A",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTipoCombustible}"
                    },
                    displayField: "compTipoCombustible",
                    editable: false,
                    fieldLabel: "17. EL TIPO DE COMBUSTIBLE UTILIZADO PARA COCINAR ES",
                    labelWidth: 400,
                    name: "pregunta17",
                    queryMode: "local",
                    valueField: "compTipoCombustible"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getTratamientoAgua}"
                    },
                    displayField: "compTratamientoAgua",
                    editable: false,
                    fieldLabel: "18. TIPO DE TRATAMIENTO CASERO DEL AGUA",
                    labelWidth: 280,
                    name: "pregunta18",
                    queryMode: "local",
                    valueField: "compTratamientoAgua"
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '19. LOS RECIPIENTES UTILIZADOS PARA EL ALMACENAMIENTO SE DESINFECTAN PERIODICAMENTE',
                    labelWidth: 400,
                    name: "pregunta19",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI"
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO"
                        },
                        {
                            boxLabel: 'C - N.A',
                            inputValue: "N.A",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '20. LA VIVIENDA CUENTA CON SERVICIOS DE',
                    labelWidth: 300,
                    items: [
                        {
                            boxLabel: 'A - LUZ',
                            name: "pregunta20opcionA"
                        },
                        {
                            boxLabel: 'B - AGUA',
                            name: "pregunta20opcionB"
                        },
                        {
                            boxLabel: 'C - TELEFONO',
                            name: "pregunta20opcionC"
                        },
                        {
                            boxLabel: 'D - ALCANTARILLADO',
                            name: "pregunta20opcionD"
                        },
                        {
                            boxLabel: 'E - RECOLECCION BASURAS',
                            name: "pregunta20opcionE"
                        },
                        {
                            boxLabel: 'F - NO APLICA',
                            name: "pregunta20opcionF"
                        }
                    ]
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDisposicionExcreta}"
                    },
                    displayField: "compDisposicionExcreta",
                    editable: false,
                    fieldLabel: "21. LA DISPOSICION DE EXCRETAS SE REALIZA",
                    labelWidth: 280,
                    name: "pregunta21",
                    queryMode: "local",
                    valueField: "compDisposicionExcreta"
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '22. EL MANEJO DE BASURAS EN EL HOGAR ES',
                    labelWidth: 300,
                    name: "pregunta22",
                    items: [
                        {
                            boxLabel: 'A - ADECUADO',
                            inputValue: "ADECUADO"
                        },
                        {
                            boxLabel: 'B - INADECUADO',
                            inputValue: "INADECUADO"
                        },
                        {
                            boxLabel: 'C - NO APLICA',
                            inputValue: "N.A",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDisposicionBasura}"
                    },
                    displayField: "compDisposicionBasura",
                    editable: false,
                    fieldLabel: "23. LA DISPOSICION FINAL DE LA BASURA SE REALIZA EN",
                    labelWidth: 280,
                    name: "pregunta23",
                    queryMode: "local",
                    valueField: "compDisposicionBasura"
                },
                {
                    xtype: "label",
                    html: "<b>CONDICIONES SOCIOAMBIENTALES</b>"
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 3,
                    fieldLabel: '24. SEÑALE CUALES FACTORES DE RIESGO AFECTAN A SU FAMILIA EN LA LOCALIDAD, VEREDA, BARRIO EN DONDE VIVE. (SEÑALE UNA O VARIAS)',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - DISPOSICION INADECUADA DE BASURAS',
                            name: "pregunta24opcionA"
                        },
                        {
                            boxLabel: 'B - CAÑOS, RIOS, LAGUNAS,CONTAMINADAS',
                            name: "pregunta24opcionB"
                        },
                        {
                            boxLabel: 'C - DESLIZAMIENTO DE TIERRA',
                            name: "pregunta24opcionC"
                        },
                        {
                            boxLabel: 'D - ARENERAS',
                            name: "pregunta24opcionD"
                        },
                        {
                            boxLabel: 'E - CARBONERAS',
                            name: "pregunta24opcionE"
                        },
                        {
                            boxLabel: 'F - VECTORES (F1-  ROEDORES)',
                            name: "pregunta24opcionF1"
                        },
                        {
                            boxLabel: 'F - VECTORES (F2-  INSECTOS)',
                            name: "pregunta24opcionF2"
                        },
                        {
                            boxLabel: 'G - INUNDACIONES',
                            name: "pregunta24opcionG"
                        },
                        {
                            boxLabel: 'H - INSEGURIDAD',
                            name: "pregunta24opcionH"
                        },
                        {
                            boxLabel: 'I - PROSTITUCION',
                            name: "pregunta24opcionI"
                        },
                        {
                            boxLabel: 'J - PANDILLISMO',
                            name: "pregunta24opcionJ"
                        },
                        {
                            boxLabel: 'K - DROGADICCION',
                            name: "pregunta24opcionK"
                        },
                        {
                            boxLabel: 'L - ALCOHOLISMO',
                            name: "pregunta24opcionL"
                        },
                        {
                            boxLabel: 'M - VIOLENCIA',
                            name: "pregunta24opcionM"
                        },
                        {
                            boxLabel: 'N - OTRO',
                            name: "pregunta24opcionN"
                        },
                        {
                            boxLabel: 'O - NINGUNA',
                            name: "pregunta24opcionO"
                        }
                    ]
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '25. TIENE LA FAMILIA ANIMALES?',
                    labelWidth: 300,
                    name: "pregunta25",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI",
                            listeners: {
                                change: "onChangeOption"
                            }
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO",
                            checked: true,
                            listeners: {
                                change: "onChangeOption"
                            }
                        }
                    ]
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{getTipoAnimal}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "compTipoAnimal",
                            header: "",
                            width: 250
                        },
                        {
                            xtype: "checkcolumn",
                            dataIndex: "activarTipoAnimal",
                            header: "Seleccionar"
                        },
                        {
                            dataIndex: "numeroTipoAnimal",
                            header: "Número",
                            width: 100,
                            editor: {
                                xtype: "numberfield",
                                allowBlank: false
                            }
                        }
                    ],
                    columnLines: true,
                    height: 200,
                    id: "Grid-Pregunta26",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    tbar: {
                        items: [
                            "26. SEÑALE CUANTOS: (PUEDE SEÑALAR UNA O VARIAS CON EL NUMERO)"
                        ]
                    }
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '27. REGISTRE SI SE ENCUENTRAN VACUNADOS (PUEDE SEÑALAR UNA O VARIAS)',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - CANINOS',
                            name: "pregunta27opcionA"
                        },
                        {
                            boxLabel: 'B - AVES',
                            name: "pregunta27opcionB"
                        },
                        {
                            boxLabel: 'C - PORCINOS',
                            name: "pregunta27opcionC"
                        },
                        {
                            boxLabel: 'D - OVINOS',
                            name: "pregunta27opcionD"
                        },
                        {
                            boxLabel: 'E - EQUINOS',
                            name: "pregunta27opcionE"
                        },
                        {
                            boxLabel: 'F - FELINOS',
                            name: "pregunta27opcionF"
                        }
                    ],
                    reference: "pregunta27"
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{setPregunta28}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "nombre",
                            header: "Nombre",
                            width: 400,
                            editor: {
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "numCarnet",
                            header: "Carnet",
                            width: 200,
                            editor: {
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "edad",
                            header: "Edad",
                            width: 100,
                            editor: {
                                xtype: "numberfield",
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "codDiscapacidad",
                            header: "Cód. Discapacidad",
                            width: 200,
                            editor: {
                                xtype: "combo",
                                allowBlank: false,
                                store: [
                                    "S",
                                    "M",
                                    "F"
                                ]
                            }
                        }
                    ],
                    columnLines: true,
                    height: 200,
                    id: "Grid-Pregunta28",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    tbar: {
                        items: [
                            "28. REGISTRE LOS AFILIADOS DISCAPACITADOS DE LA FAMILIA (S:SENSORIAL, M:MENTAL, F: FISICA)",
                            "->",
                            {
                                iconCls: "x-fa fa-plus-square",
                                tooltip: "Adicionar",
                                handler: "onBotonAdicionarGrid28Click"
                            },
                            {
                                iconCls: "x-fa fa-minus-square",
                                tooltip: "Remover",
                                handler: "onBotonRemoverGrid28Click"
                            }
                        ]
                    }
                },
                {
                    xtype: "numberfield",
                    fieldLabel: "29. REGISTRE CUANTOS INTEGRANTES DE LA FAMILIA NO HAN ASISTIDO A CONTROL ODONTOLOGICO EN EL ULTIMO AÑO",
                    labelWidth: 600,
                    name: "pregunta29"
                },
                {
                    xtype: "checkboxgroup",
                    columns: 3,
                    fieldLabel: "30. REGISTRE LAS PERSONAS  MAYORES DE 60 AÑOS QUE NO HAN RECIBIDO CONTROL MEDICO EN EL ULTIMO AÑO",
                    labelWidth: 500,
                    items: [
                        {
                            xtype: "numberfield",
                            fieldLabel: "F",
                            labelWidth: 50,
                            name: "pregunta30personasF",
                            width: 150
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "M",
                            labelWidth: 50,
                            name: "pregunta30personasM",
                            width: 150
                        },
                        {
                            xtype: "numberfield",
                            fieldLabel: "N/A",
                            labelWidth: 50,
                            name: "pregunta30personasNA",
                            width: 150
                        }
                    ]
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{setPregunta31}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "numCarnet",
                            header: "Carnet",
                            width: 200,
                            editor: {
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "nombre",
                            header: "Nombre",
                            width: 400,
                            editor: {
                                allowBlank: false
                            }
                        }
                    ],
                    columnLines: true,
                    height: 200,
                    id: "Grid-Pregunta31",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    tbar: {
                        items: [
                            "31. REGISTRE EL NUMERO DE INTEGRANTES DE LA FAMILIA QUE TENGAN TOS CON ESPECTORACION POR MAS DE 15 DIAS?",
                            {
                                xtype: "numberfield",
                                hideLabel: true,
                                reference: "numeroIntegrantes",
                                width: 80
                            },
                            "->",
                            {
                                iconCls: "x-fa fa-plus-square",
                                tooltip: "Adicionar",
                                handler: "onBotonAdicionarGrid31Click"
                            },
                            {
                                iconCls: "x-fa fa-minus-square",
                                tooltip: "Remover",
                                handler: "onBotonRemoverGrid31Click"
                            }
                        ]
                    }
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{setPregunta32}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "numCarnet",
                            header: "Carnet",
                            width: 200,
                            editor: {
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "nombre",
                            header: "Nombre",
                            width: 400,
                            editor: {
                                allowBlank: false
                            }
                        }
                    ],
                    columnLines: true,
                    height: 200,
                    id: "Grid-Pregunta32",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    tbar: {
                        items: [
                            "32. REGISTRE LOS  INTEGRANTES DE LA FAMILIA QUE PRESENTAN  MANCHAS, LESIONES, NODULOS O ULCERAS  EN LA PIEL CON O SIN SENSIBILIDAD <br />EN ALGUNA PARTE DEL CUERPO",
                            "->",
                            {
                                iconCls: "x-fa fa-plus-square",
                                tooltip: "Adicionar",
                                handler: "onBotonAdicionarGrid32Click"
                            },
                            {
                                iconCls: "x-fa fa-minus-square",
                                tooltip: "Remover",
                                handler: "onBotonRemoverGrid32Click"
                            }
                        ]
                    }
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{setPregunta33}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "numCarnet",
                            header: "Carnet",
                            width: 200,
                            editor: {
                                allowBlank: false
                            }
                        },
                        {
                            dataIndex: "nombre",
                            header: "Nombre",
                            width: 400,
                            editor: {
                                allowBlank: false
                            }
                        }
                    ],
                    columnLines: true,
                    height: 200,
                    id: "Grid-Pregunta33",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    tbar: {
                        items: [
                            "33. ALGUN MIEMBRO DE LA FAMILIA SE ENCUENTRA ENFERMO EN EL MOMENTO DE LA VISITA?",
                            {
                                xtype: "radio",
                                boxLabel: 'SI',
                                inputValue: 'SI'
                            },
                            {
                                xtype: "radio",
                                boxLabel: 'NO',
                                checked: true,
                                inputValue: 'NO'
                            },
                            "->",
                            {
                                iconCls: "x-fa fa-plus-square",
                                tooltip: "Adicionar",
                                handler: "onBotonAdicionarGrid33Click"
                            },
                            {
                                iconCls: "x-fa fa-minus-square",
                                tooltip: "Remover",
                                handler: "onBotonRemoverGrid33Click"
                            }
                        ]
                    }
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 5,
                    fieldLabel: '34. COMO CORRIGE EL MAL COMPORTAMIENTO DE  SUS HIJOS',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - CASTIGO FISICO',
                            name: "pregunta34opcionA"
                        },
                        {
                            boxLabel: 'B - REGAÑO',
                            name: "pregunta34opcionB"
                        },
                        {
                            boxLabel: 'C - ENCIERRO',
                            name: "pregunta34opcionC"
                        },
                        {
                            boxLabel: 'D - ZARANDEO',
                            name: "pregunta34opcionD"
                        },
                        {
                            boxLabel: 'E - PRIVACION',
                            name: "pregunta34opcionE"
                        },
                        {
                            boxLabel: 'F - DIALOGO',
                            name: "pregunta34opcionF"
                        },
                        {
                            boxLabel: 'G - AISLAMIENTO',
                            name: "pregunta34opcionG"
                        },
                        {
                            boxLabel: 'H - OTRO',
                            name: "pregunta34opcionH"
                        }
                    ]
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '35. HAY NIÑOS MENORES DE 12 AÑOS QUE COCINAN EN LA CASA?',
                    labelWidth: 300,
                    name: "pregunta35",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI"
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 5,
                    fieldLabel: '36. COMO SOLUCIONAN LOS CONFLICTOS DE PAREJA?',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - DIALOGANDO',
                            name: "pregunta36opcionA"
                        },
                        {
                            boxLabel: 'B - AGRESION FISICA',
                            name: "pregunta36opcionB"
                        },
                        {
                            boxLabel: 'C - PRIVACION ECONOMICA',
                            name: "pregunta36opcionC"
                        },
                        {
                            boxLabel: 'D - AGRESION VERBAL',
                            name: "pregunta36opcionD"
                        },
                        {
                            boxLabel: 'E - PRIVACION',
                            name: "pregunta36opcionE"
                        },
                        {
                            boxLabel: 'F - AGRESION SEXUAL',
                            name: "pregunta36opcionF"
                        },
                        {
                            boxLabel: 'G - OTRO',
                            name: "pregunta36opcionG"
                        },
                        {
                            boxLabel: 'H - SIN DATO',
                            name: "pregunta36opcionH"
                        }
                    ]
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '37. HA TENIDO CONFLICTOS EN EL HOGAR LLEGANDO A LA AGRESION FISICA O VERBAL',
                    labelWidth: 300,
                    name: "pregunta37",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI"
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 6,
                    fieldLabel: '38. QUIEN(ES) NORMALMENTE ES EL QUE AGREDE FISICA O SICOLOGICAMENTE EN LA FAMILIA',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - PADRE',
                            name: "pregunta38opcionA"
                        },
                        {
                            boxLabel: 'B - MADRE',
                            name: "pregunta38opcionB"
                        },
                        {
                            boxLabel: 'C - HIJOS',
                            name: "pregunta38opcionC"
                        },
                        {
                            boxLabel: 'D - PADRASTRO',
                            name: "pregunta38opcionD"
                        },
                        {
                            boxLabel: 'E - NO ES CLARO',
                            name: "pregunta38opcionE"
                        },
                        {
                            boxLabel: 'F - NO APLICA',
                            name: "pregunta38opcionF"
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 3,
                    fieldLabel: '39. CUAL(ES) ACTIVIDADES REALIZA LA FAMILIA EN EL TIEMPO LIBRE?',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - ACTIVIDADES DEPORTIVAS',
                            name: "pregunt39opcionA"
                        },
                        {
                            boxLabel: 'B - ACTIVIDADES  RECREATIVAS(LEER, TV)',
                            name: "pregunt39opcionB"
                        },
                        {
                            boxLabel: 'C - ACTIVIDADES ESPIRITUALES',
                            name: "pregunt39opcionC"
                        },
                        {
                            boxLabel: 'D - ACTIVIDADES SOCIALES',
                            name: "pregunt39opcionD"
                        },
                        {
                            boxLabel: 'E - NO REALIZA NINGUNA',
                            name: "pregunt39opcionE"
                        },
                        {
                            boxLabel: 'F - OTRAS',
                            name: "pregunt39opcionF"
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 3,
                    fieldLabel: '40. CUALES ACTIVIDADES RECREATIVAS REALIZAN LAS PERSONAS MAYORES DE 60 AÑOS EN SU FAMILIA?',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - ACTIVIDADES DEPORTIVAS',
                            name: "pregunta40opcionA"
                        },
                        {
                            boxLabel: 'B - ACTIVIDADES  RECREATIVAS(LEER, TV)',
                            name: "pregunta40opcionB"
                        },
                        {
                            boxLabel: 'C - ACTIVIDADES ESPIRITUALES',
                            name: "pregunta40opcionC"
                        },
                        {
                            boxLabel: 'D - ACTIVIDADES MANUALES',
                            name: "pregunta40opcionD"
                        },
                        {
                            boxLabel: 'E - OTRAS',
                            name: "pregunta40opcionE"
                        },
                        {
                            boxLabel: 'F - NO REALIZAN NINGUNA',
                            name: "pregunta40opcionF"
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '41. QUIEN COMPARTE EL TIEMPO LIBRE CON SUS HIJOS',
                    labelAlign: "top",
                    layout: "column",
                    items: [
                        {
                            xtype: "container",
                            columnWidth: 0.25,
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    boxLabel: 'NINGUNO',
                                    listeners: {
                                        change: "onChangeCheckNinguno"
                                    },
                                    name: "pregunta41opcionNinguno"
                                }
                            ]
                        },
                        {
                            xtype: "container",
                            columnWidth: 0.6,
                            items: [
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getOpciones}"
                                    },
                                    displayField: "nombre",
                                    editable: false,
                                    fieldLabel: "MAMA",
                                    name: "pregunta41opcionMama",
                                    queryMode: "local",
                                    reference: "pregunta41opcionMama",
                                    valueField: "id",
                                    value: "NO"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getOpciones}"
                                    },
                                    displayField: "nombre",
                                    editable: false,
                                    fieldLabel: "PAPA",
                                    name: "pregunta41opcionPapa",
                                    queryMode: "local",
                                    reference: "pregunta41opcionPapa",
                                    valueField: "id",
                                    value: "NO"
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getOpciones}"
                                    },
                                    displayField: "nombre",
                                    editable: false,
                                    fieldLabel: "OTRO",
                                    name: "pregunta41opcionOtro",
                                    queryMode: "local",
                                    reference: "pregunta41opcionOtro",
                                    valueField: "id",
                                    value: "NO"
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 3,
                    fieldLabel: '42. CAUSAS POR LAS CUALES NO COMPARTEN PADRES E HIJOS EL TIEMPO LIBRE',
                    labelAlign: "top",
                    items: [
                        {
                            boxLabel: 'A - NO LO COMPARTEN POR EXCESO DE TRABAJO',
                            name: "pregunta42opcionA"
                        },
                        {
                            boxLabel: 'B - NO LO COMPARTEN POR QUE DESCANSAN EL EL TIEMPO LIBRE',
                            name: "pregunta42opcionB"
                        },
                        {
                            boxLabel: 'C - PREFIEREN QUE LOS NIÑOS JUEGUEN SOLOS',
                            name: "pregunta42opcionC"
                        },
                        {
                            boxLabel: 'D - NO APLICA',
                            name: "pregunta42opcionD"
                        },
                        {
                            boxLabel: 'E - OTRAS',
                            name: "pregunta42opcionE"
                        }
                    ]
                },
                {
                    xtype: 'radiogroup',
                    fieldLabel: '43. HA BRINDADO ORIENTACION SEXUAL A SUS HIJOS?',
                    labelWidth: 300,
                    name: "pregunta43",
                    items: [
                        {
                            boxLabel: 'A - SI',
                            inputValue: "SI"
                        },
                        {
                            boxLabel: 'B - NO',
                            inputValue: "NO",
                            checked: true
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '44. COMO?',
                    items: [
                        {
                            boxLabel: 'A - DIALOGO ENTRE PADRES E HIJOS',
                            name: "pregunta44opcionA"
                        },
                        {
                            boxLabel: 'B - LO REALIZAN EN EL COLEGIO',
                            name: "pregunta44opcionB"
                        },
                        {
                            boxLabel: 'C - NO LO REALIZA',
                            name: "pregunta44opcionC"
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    fieldLabel: '45. CADA CUANTO TIEMPO HACE EJERCICIO LA PERSONA ENTREVISTADA MAYOR DE 18 AÑOS',
                    labelWidth: 600,
                    items: [
                        {
                            xtype: "numberfield",
                            colspan: 2,
                            fieldLabel: "Edad",
                            name: "pregunta45edad",
                            labelWidth: 80,
                            value: 18,
                            width: 200
                        }
                    ]
                },
                {
                    xtype: 'checkboxgroup',
                    columns: 2,
                    items: [
                        {
                            boxLabel: 'A - TODOS LOS DIAS 30 MINUTOS O MENOS',
                            name: "pregunta45opcionA"
                        },
                        {
                            boxLabel: 'C - MENOS DE 5 DÍAS A LA SEMANA  30 MINUTOS',
                            name: "pregunta45opcionC"
                        },
                        {
                            boxLabel: 'B - 5 DÍAS A LA SEMANA MAS O MENOS 30 MINUTOS',
                            name: "pregunta45opcionB"
                        },
                        {
                            boxLabel: 'D - EN EL TIEMPO LIBRE NO HA REALIZADO EJERCICIO EN EL ULTIMO MES',
                            name: "pregunta45opcionD"
                        }
                    ]
                },
                {
                    bodyPadding: 10,
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    title: "Firma",
                    items: [
                        {
                            items: [
                                {
                                    xtype: 'uploader',
                                    uploadConfig: {
                                        uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                        maxFileSize: 10 * 1024 * 1024
                                    },
                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                    listeners: {
                                        'uploaddatacomplete': "onUploadFirmaDataComplete",
                                        'uploaderror': "onUploadFirmaError"
                                    }
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    name: "firmaHfdfr",
                                    hidden: true,
                                    reference: "firmaHfdfr"
                                },
                                {
                                    xtype: "button",
                                    iconCls: "x-fa fa-minus-circle",
                                    textAlign: "left",
                                    handler: "onBotonEliminarFirmaClick",
                                    reference: "botonEliminarFirma",
                                    width: 250
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
});

Ext.define('CoomuceMod.view.CaracterizacionPoblacional.IfppirController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.caracterizacionpoblacional-ifppir',
    statusComponent: false,
    components: [
        "nombreCompletoAfiliado",
        "codigoTipoIdentificacion",
        "identificacionFuanAfiliado",
        "numCarnetFuanAfiliado",
        "fechaNacimientoFuanAfiliado",
        "compDepartamento",
        "compCiudad",
        "direccionFuanAfiliado",
        "telefonoFuanAfiliado",
        "celularFuanAfiliado",
        "ipsPrimariaIfppir",
        "edadFuanAfiliado",
        "puntajeSisbenFuanAfiliado",
        "razaIfppir",
        "escolaridadIfppir",
        "nombreTipoZona",
        "nombreTipoSexo",
        "familiarCercanoIfppir",
        "telefonoFamiliarIfppir",
        "gestanteIfppir",
        "fechaAplicacionIfppir",
        "pesoIfppir",
        "tallaIfppir",
        "masaCorporalIfppir",
        "perimetroAbdominalIfppir",
        "sistolicaIfppir",
        "diastolicaIfppir",
        "nacidoVivoIfppir",
        "furIfppir",
        "fppIfppir",
        "colesterolTotalIfppir",
        "colesterolLdlIfppir",
        "colesterolHdlIfppir",
        "glicemiaIfppir",
        "gIfppir",
        "pIfppir",
        "cIfppir",
        "aIfppir",
        "observacionIfppir",
        "botonGuardar",
        "botonCancelar"
    ],
    getTitleView: function() {
        return this.getView().getTitle();
    },
    fnLimpiarDatos: function() {
        var form = Ext.getCmp("Form-Ifppir-Principal");
        form.getForm().reset();
        var storeGrid = Ext.getCmp('Grid-Ifppir-Principal').getStore();
        storeGrid.removeAll();
    },
    fnEnableDisableComponent: function() {
        var me = this;
        for (var i = 0; i < me.components.length; i++) {
            var obj = me.lookupReference(me.components[i]);
            if (me.statusComponent) {
                obj.disable();
            } else {
                obj.enable();
            }
        }
        var botonNuevaFicha = me.lookupReference("botonNuevaFicha");
        var botonBuscarAfiliado = me.lookupReference("botonBuscarAfiliado");
        if (me.statusComponent) {
            botonNuevaFicha.enable();
            botonBuscarAfiliado.disable();
            me.statusComponent = false;
        } else {
            botonNuevaFicha.disable();
            botonBuscarAfiliado.enable();
            me.fnLimpiarDatos();
            me.statusComponent = true;
        }
    },
    onBotonNuevaFichaClick: function(btn) {
        var me = this;
        me.fnEnableDisableComponent();
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                me.fnLimpiarDatos();
                me.fnEnableDisableComponent();
                var tabPanel = Ext.getCmp("CoomuceIfppir");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-Ifppir-Principal");
                var infoIfppir = form.getForm().getValues();
                if (infoIfppir.idFuanAfiliado == 0 || infoIfppir.idFuanAfiliado == undefined || infoIfppir.nombreCompletoAfiliado == "") {
                    Ext.Msg.alert('Advertencia', "Los datos del Usuario estan incompletos. Por favor verifique", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.pesoIfppir == "") {
                    Ext.Msg.alert('Advertencia', "El campo peso es requerido", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.tallaIfppir == "") {
                    Ext.Msg.alert('Advertencia', "El campo altura es requerido", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.perimetroAbdominalIfppir == "") {
                    Ext.Msg.alert('Advertencia', "El campo perimetro abdominal es requerido", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.sistolicaIfppir < 100 || infoIfppir.sistolicaIfppir > 230) {
                    Ext.Msg.alert('Advertencia', "El campo sistólica debe ser mayor a 100 y menor a 230", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.diastolicaIfppir < 50 || infoIfppir.diastolicaIfppir > 140) {
                    Ext.Msg.alert('Advertencia', "El campo diastólica debe ser mayor a 50 y menor a 140", Ext.emptyFn);
                    return false;
                }
                if (infoIfppir.gestanteIfppir) {
                    if (infoIfppir.gestanteIfppir == "on") {
                        if (infoIfppir.furIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo fecha ultima menstruación es requerido", Ext.emptyFn);
                            return false;
                        }
                        if (infoIfppir.gIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo gestaciones es requerido", Ext.emptyFn);
                            return false;
                        }
                        if (infoIfppir.pIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo partos es requerido", Ext.emptyFn);
                            return false;
                        }
                        if (infoIfppir.cIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo cesareas es requerido", Ext.emptyFn);
                            return false;
                        }
                        if (infoIfppir.aIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo abortos es requerido", Ext.emptyFn);
                            return false;
                        }
                        if (infoIfppir.nacidoVivoIfppir == "") {
                            Ext.Msg.alert('Advertencia', "El campo nacido vivo es requerido", Ext.emptyFn);
                            return false;
                        }
                    }
                }
                infoIfppir.numCarneIfppir = infoIfppir.numCarnetFuanAfiliado;
                infoIfppir.idInfoIfppir = 0;
                // inicializo este campo que no se captura en pantalla
                infoIfppir.gestanteIfppir = (infoIfppir.gestanteIfppir === "on" ? true : false);
                infoIfppir.pesoIfppir = parseFloat(infoIfppir.pesoIfppir).toFixed(2);
                infoIfppir.tallaIfppir = parseInt(infoIfppir.tallaIfppir);
                infoIfppir.masaCorporalIfppir = parseFloat(infoIfppir.masaCorporalIfppir).toFixed(2);
                infoIfppir.perimetroAbdominalIfppir = parseInt(infoIfppir.perimetroAbdominalIfppir);
                infoIfppir.sistolicaIfppir = parseInt(infoIfppir.sistolicaIfppir);
                infoIfppir.diastolicaIfppir = parseInt(infoIfppir.diastolicaIfppir);
                infoIfppir.colesterolLdlIfppir = (infoIfppir.colesterolLdlIfppir) ? String(infoIfppir.colesterolLdlIfppir) : "0";
                infoIfppir.colesterolHdlIfppir = (infoIfppir.colesterolHdlIfppir) ? String(infoIfppir.colesterolHdlIfppir) : "0";
                infoIfppir.colesterolTotalIfppir = (infoIfppir.colesterolTotalIfppir) ? String(infoIfppir.colesterolTotalIfppir) : "0";
                infoIfppir.idUsuario = Coomuce.Util.DatosUsuario.idUsuario;
                var grid = Ext.getCmp('Grid-Ifppir-Principal');
                var storeGrid = grid.getStore();
                var listaIfppirModel = [];
                //var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    //if (ob.dirty) {
                    //if (ob.phantom) {
                    listaIfppirModel.push(ob.data);
                });
                //}
                //else {
                //    viejos.push(ob.data);
                //}
                //itemsValidar.push(ob);
                //}
                // solo validar cuando se edita o adiciona registros
                //if (itemsValidar.length > 0) {
                //    var validator = Coomuce.Util.dataValidate(itemsValidar);
                //    if (!validator.success) {
                //        Coomuce.Util.ShowMessage({ type: "ERROR", title: titleView, msg: validator.msg });
                //        return false;
                //    }
                //}
                var conf = {
                        url: Coomuce.Url.Funciones + "IfppirGuardar",
                        data: {
                            infoIfppir: infoIfppir,
                            listaIfppirModel: listaIfppirModel
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            me.fnLimpiarDatos();
                            me.fnEnableDisableComponent();
                            var tabPanel = Ext.getCmp("CoomuceIfppir");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.dependent) {
            var idCiudad = me.lookupReference("idCiudad");
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        } else {
            for (var i = 0; i < combo.componentReference.length; i++) {
                var o = me.lookupReference(combo.componentReference[i]);
                o.setValue(record.get(combo.componentReference[i]));
            }
            if (record.get("nombreTipoSexo") != "Femenino") {
                for (var i = 0; i < combo.disabledBySexo.length; i++) {
                    var ob = me.lookupReference(combo.disabledBySexo[i]);
                    ob.setDisabled(true);
                }
            }
            var storeGrid = Ext.getCmp('Grid-Ifppir-Principal').getStore();
            storeGrid.load({
                params: {
                    edad: record.get("edadFuanAfiliado")
                }
            });
        }
    },
    onChangeNumber: function(field, value) {
        var me = this;
        var peso = me.lookupReference("pesoIfppir");
        var talla = me.lookupReference("tallaIfppir");
        var masa = me.lookupReference("masaCorporalIfppir");
        var estatura = 0;
        peso = (peso.getValue()) ? peso.getValue() : 0;
        talla = (talla.getValue()) ? (talla.getValue()) / 100 : 0;
        estatura = Math.pow(talla, 2);
        // parseFloat(talla.getValue()) * 2; //parseFloat(talla.getValue());
        if (estatura > 0) {
            var imc = parseFloat(peso) / parseFloat(estatura);
            masa.setValue(imc);
        }
    },
    onSelectDate: function(field, value, eOpts) {
        var me = this;
        var fpp = me.lookupReference("fppIfppir");
        // el siguiente enlace es un ejemplo de como realizar calculos con fechas en javascript
        // https://stackoverflow.com/questions/563406/add-days-to-javascript-date
        var dat = new Date(value.valueOf());
        dat.setDate((dat.getDate() + 280) - 7);
        fpp.setValue(dat);
    },
    onChangeCheck: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var fur = me.lookupReference("furIfppir");
        var nacidoVivoIfppir = me.lookupReference("nacidoVivoIfppir");
        var idSexo = me.lookupReference("idTipoSexo");
        var edad = me.lookupReference("edadFuanAfiliado");
        fur.setReadOnly(!newValue);
        nacidoVivoIfppir.setReadOnly(!newValue);
        var storeGrid = Ext.getCmp('Grid-Ifppir-Principal').getStore();
        if (newValue) {
            storeGrid.proxy.setUrl(Coomuce.Url.Funciones + "GetPreguntasCicloVitalGestanteAll");
            storeGrid.load();
        } else {
            storeGrid.proxy.setUrl(Coomuce.Url.Funciones + "GetPreguntasFactorPorCicloAll");
            storeGrid.load({
                params: {
                    edad: edad.getValue(),
                    sexo: idSexo.getValue()
                }
            });
        }
    },
    onGridColumnCheckChange: function(check, rowIndex, checked, eOpts) {
        console.log(check);
        console.log(rowIndex);
        var grid = Ext.getCmp("Grid-Ifppir-Principal");
        // selecciono la fila
        grid.selModel.select(rowIndex);
        var record = grid.selModel.getSelection()[0];
        if (check.dataIndex === "respuestaSiPregunta") {
            record.set("respuestaNoPregunta", !checked);
        } else {
            record.set("respuestaSiPregunta", !checked);
        }
    },
    //    var param = {};
    //    param[combo.campoParam] = record.get(combo.campoParam);
    //    combo.getStore().load({ params: param });
    onUploadDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var record = source.getWidgetRecord();
        record.set("archivoAudioIfppir", file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de audio importado correctamente."
        });
    },
    onUploadError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarArchivoClick: function(btn) {
        var record = btn.getWidgetRecord();
        record.set("archivoAudioIfppir", "");
    },
    onBotonImportarArchivoClick: function() {
        var me = this;
        var store = Ext.create("Ext.data.Store", {
                autoLoad: true,
                fields: [
                    "idInfoIfppir",
                    "tipoDiligenciamientoIfppir",
                    "codigoTipoIdentificacion",
                    "identificacionFuanAfiliado",
                    "compAfiliado",
                    "archivoAudioIfppir"
                ],
                proxy: {
                    timeout: 600000,
                    useDefaultXhrHeader: false,
                    type: 'ajax',
                    url: Coomuce.Url.Funciones + "GetFunIfppirAll",
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: "total"
                    }
                }
            });
        var pagingBar = Ext.widget("pagingtoolbar", {
                store: store,
                displayInfo: true,
                displayMsg: "Registros {0} - {1} de {2}"
            });
        var grid = Ext.create("Ext.grid.Panel", {
                bbar: pagingBar,
                columns: [
                    {
                        dataIndex: "idInfoIfppir",
                        header: "No. Plantilla"
                    },
                    {
                        dataIndex: "tipoDiligenciamientoIfppir",
                        header: "Tipo Diligenciamiento"
                    },
                    {
                        dataIndex: "codigoTipoIdentificacion",
                        header: "Tipo Identificación"
                    },
                    {
                        dataIndex: "identificacionFuanAfiliado",
                        header: "Identificación"
                    },
                    {
                        dataIndex: "compAfiliado",
                        header: "Afiliado"
                    },
                    {
                        xtype: "widgetcolumn",
                        header: "",
                        width: 60,
                        widget: {
                            xtype: 'uploader',
                            uploadConfig: {
                                uploadUrl: Coomuce.Url.Funciones + "ImportarAudioIfppir",
                                maxFileSize: 10 * 1024 * 1024
                            },
                            inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                            listeners: {
                                'uploaddatacomplete': me.onUploadDataComplete,
                                'uploaderror': me.onUploadError
                            }
                        }
                    },
                    {
                        xtype: "widgetcolumn",
                        dataIndex: "archivoAudioIfppir",
                        header: "Archivo de audio",
                        width: 200,
                        widget: {
                            xtype: "button",
                            iconCls: "x-fa fa-minus-circle",
                            textAlign: "left",
                            handler: me.onBotonEliminarArchivoClick
                        }
                    }
                ],
                columnLines: true,
                loadMask: true,
                store: store
            });
        var fnGuardarCambios = function() {
                var datos = [];
                Ext.each(store.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (!ob.phantom) {
                            datos.push({
                                idInfoIfppir: ob.data.idInfoIfppir,
                                archivoAudioIfppir: ob.data.archivoAudioIfppir
                            });
                        }
                    }
                });
                Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
                    if (btn === "yes") {
                        var conf = {
                                url: Coomuce.Url.Funciones + "IfppirGuardarCambios",
                                data: {
                                    datos: datos
                                },
                                targetMask: grid,
                                msgMask: "Guardando datos...",
                                fnSuccess: function(response) {
                                    store.load();
                                }
                            };
                        Coomuce.Util.EnviarPost(conf);
                    }
                });
            };
        var window = Ext.create("Ext.window.Window", {
                height: 500,
                items: grid,
                layout: "fit",
                modal: true,
                tbar: {
                    items: [
                        {
                            text: "Guardar cambios",
                            handler: fnGuardarCambios
                        }
                    ]
                },
                title: "Importar archivo de audio",
                width: 500
            });
        window.show();
    },
    onUploadFirmaDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminarFirma");
        var firmaIfppir = this.lookupReference("firmaIfppir");
        botonEliminar.setText(file.data);
        firmaIfppir.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadFirmaError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarFirmaClick: function(btn) {
        btn.setText("");
        var firmaIfppir = this.lookupReference("firmaIfppir");
        firmaIfppir.setValue("");
    }
});

Ext.define('CoomuceMod.view.CaracterizacionPoblacional.IfppirModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.caracterizacionpoblacional-ifppir',
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoZona: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoZona",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoZonaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoSexo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoSexo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoSexoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasFactor: {
            autoLoad: false,
            fields: [
                {
                    name: "idPregunta",
                    type: "int"
                },
                {
                    name: "factor",
                    type: "string"
                },
                {
                    name: "subfactor",
                    type: "string"
                },
                {
                    name: "codigoPregunta",
                    type: "string"
                },
                {
                    name: "descripcionPregunta",
                    type: "string"
                },
                {
                    name: "respuestaSiPregunta",
                    type: "bool"
                },
                {
                    name: "respuestaNoPregunta",
                    type: "bool"
                }
            ],
            grouper: {
                groupFn: function(item) {
                    return "<b>" + item.get("factor") + "<br />" + item.get("subfactor") + "</b>";
                }
            },
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    Ext.each(records, function(item, index, allItems) {
                        item.data.respuestaNoPregunta = true;
                        item.commit();
                    });
                }
            },
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetPreguntasFactorPorCicloAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.CaracterizacionPoblacional.Ifppir", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.CaracterizacionPoblacional.IfppirController",
        "CoomuceMod.view.CaracterizacionPoblacional.IfppirModel"
    ],
    controller: "caracterizacionpoblacional-ifppir",
    viewModel: {
        type: "caracterizacionpoblacional-ifppir"
    },
    id: "Form-Ifppir-Panel",
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    disabled: true,
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    disabled: false,
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Nueva Ficha",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonNuevaFichaClick",
                    reference: "botonNuevaFicha"
                },
                {
                    text: "Importar archivo de audio",
                    iconCls: "x-fa fa-file-audio-o",
                    handler: "onBotonImportarArchivoClick",
                    tooltip: "Esta opción permite importar archivos de audio a las plantillas diligenciadas telefonicamente."
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "100%"
            },
            id: "Form-Ifppir-Principal",
            scrollable: true,
            items: [
                {
                    xtype: "combo",
                    fieldLabel: "Tipo Diligenciamiento",
                    name: "tipoDiligenciamientoIfppir",
                    store: [
                        "Personal",
                        "Telefonico"
                    ],
                    value: "Personal"
                },
                {
                    xtype: "fieldset",
                    style: {
                        "background-color": "#ffffff"
                    },
                    items: [
                        {
                            xtype: "textfield",
                            disabled: true,
                            fieldLabel: "Nombre del Afiliado",
                            labelWidth: 150,
                            name: "nombreCompletoAfiliado",
                            readOnly: true,
                            reference: "nombreCompletoAfiliado",
                            width: 600
                        },
                        {
                            layout: {
                                type: "table",
                                columns: 4
                            },
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Tipo documento <br />de identidad: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "codigoTipoIdentificacion",
                                            readOnly: true,
                                            reference: "codigoTipoIdentificacion",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Documento No.: "
                                        }
                                    ]
                                },
                                {
                                    layout: {
                                        type: "table",
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            items: [
                                                {
                                                    xtype: "numberfield",
                                                    hidden: true,
                                                    name: "idFuanAfiliado"
                                                },
                                                {
                                                    xtype: "textfield",
                                                    disabled: true,
                                                    hideLabel: true,
                                                    name: "identificacionFuanAfiliado",
                                                    readOnly: true,
                                                    reference: "identificacionFuanAfiliado"
                                                }
                                            ]
                                        },
                                        {
                                            items: [
                                                {
                                                    xtype: "button",
                                                    componentReference: [
                                                        "idFuanAfiliado",
                                                        "codigoTipoIdentificacion",
                                                        "identificacionFuanAfiliado",
                                                        "nombreCompletoAfiliado",
                                                        "fechaNacimientoFuanAfiliado",
                                                        "compDepartamento",
                                                        "compCiudad",
                                                        "direccionFuanAfiliado",
                                                        "telefonoFuanAfiliado",
                                                        "celularFuanAfiliado",
                                                        "puntajeSisbenFuanAfiliado",
                                                        "edadFuanAfiliado",
                                                        "nombreTipoZona",
                                                        "idTipoSexo",
                                                        "nombreTipoSexo",
                                                        "numCarnetFuanAfiliado"
                                                    ],
                                                    disabled: true,
                                                    disabledBySexo: [
                                                        "gestanteIfppir",
                                                        "furIfppir",
                                                        "fppIfppir",
                                                        "gIfppir",
                                                        "pIfppir",
                                                        "cIfppir",
                                                        "aIfppir",
                                                        "nacidoVivoIfppir"
                                                    ],
                                                    fechaUltFormato: "fechaUltFicha",
                                                    validarFormato: true,
                                                    handler: Coomuce.Util.buscarAfiliadoFicha,
                                                    iconCls: "x-fa fa-binoculars",
                                                    preguntasIdentificacion: true,
                                                    reference: "botonBuscarAfiliado",
                                                    tooltip: "Lista de Afiliados",
                                                    width: 30
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Carné: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            readOnly: true,
                                            name: "numCarnetFuanAfiliado",
                                            reference: "numCarnetFuanAfiliado"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Fecha de nacimiento: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "datefield",
                                            disabled: true,
                                            hideLabel: true,
                                            format: "d/m/Y",
                                            name: "fechaNacimientoFuanAfiliado",
                                            readOnly: true,
                                            reference: "fechaNacimientoFuanAfiliado"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Departamento: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "compDepartamento",
                                            readOnly: true,
                                            reference: "compDepartamento",
                                            width: 300
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Municipio: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "compCiudad",
                                            readOnly: true,
                                            reference: "compCiudad",
                                            width: 300
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: "textfield",
                            disabled: true,
                            fieldLabel: "Dirección",
                            name: "direccionFuanAfiliado",
                            readOnly: true,
                            reference: "direccionFuanAfiliado",
                            width: 600
                        },
                        {
                            layout: {
                                type: "table",
                                columns: 4
                            },
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Teléfono: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "telefonoFuanAfiliado",
                                            readOnly: true,
                                            reference: "telefonoFuanAfiliado",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Celular: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "celularFuanAfiliado",
                                            readOnly: true,
                                            reference: "celularFuanAfiliado",
                                            width: 200
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: "textfield",
                            disabled: true,
                            readOnly: true,
                            fieldLabel: "Ips Primaria",
                            name: "ipsPrimariaIfppir",
                            reference: "ipsPrimariaIfppir",
                            width: 400
                        },
                        {
                            layout: {
                                type: "table",
                                columns: 8
                            },
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Edad: "
                                        }
                                    ]
                                },
                                {
                                    colspan: 3,
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            disabled: true,
                                            hideLabel: true,
                                            hideTrigger: true,
                                            name: "edadFuanAfiliado",
                                            readOnly: true,
                                            reference: "edadFuanAfiliado",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Sisben: "
                                        }
                                    ]
                                },
                                {
                                    colspan: 3,
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "puntajeSisbenFuanAfiliado",
                                            readOnly: true,
                                            reference: "puntajeSisbenFuanAfiliado",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Raza: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            readOnly: true,
                                            hideLabel: true,
                                            name: "razaIfppir",
                                            reference: "razaIfppir",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Escolaridad: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            readOnly: true,
                                            name: "escolaridadIfppir",
                                            reference: "escolaridadIfppir",
                                            width: 200
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Zona: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "nombreTipoZona",
                                            readOnly: true,
                                            reference: "nombreTipoZona"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Sexo: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            hidden: true,
                                            name: "idTipoSexo",
                                            reference: "idTipoSexo"
                                        },
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "nombreTipoSexo",
                                            readOnly: true,
                                            reference: "nombreTipoSexo",
                                            width: 200
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: "fieldset",
                            layout: {
                                type: "table",
                                columns: 4
                            },
                            style: {
                                "background-color": "#ffffff"
                            },
                            title: "Familiar Más Cercano",
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Nombre: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "familiarCercanoIfppir",
                                            reference: "familiarCercanoIfppir",
                                            width: 400
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Teléfono: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "telefonoFamiliarIfppir",
                                            reference: "telefonoFamiliarIfppir"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: "checkbox",
                            disabled: true,
                            fieldLabel: "Gestante",
                            listeners: {
                                change: "onChangeCheck"
                            },
                            name: "gestanteIfppir",
                            reference: "gestanteIfppir",
                            value: false
                        },
                        {
                            defaults: {
                                border: true,
                                height: 40
                            },
                            layout: {
                                type: "table",
                                columns: 4
                            },
                            items: [
                                {
                                    colspan: 2,
                                    //height: 20,
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Fecha de aplicación de toma de datos en salud"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Fecha Última Menstruación: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "datefield",
                                            disabled: true,
                                            format: "d/m/Y",
                                            hideLabel: true,
                                            listeners: {
                                                select: "onSelectDate"
                                            },
                                            name: "furIfppir",
                                            readOnly: true,
                                            reference: "furIfppir"
                                        }
                                    ]
                                },
                                {
                                    colspan: 2,
                                    items: [
                                        {
                                            xtype: "datefield",
                                            disabled: true,
                                            format: "d/m/Y",
                                            hideLabel: true,
                                            name: "fechaAplicacionIfppir",
                                            reference: "fechaAplicacionIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Fecha Probable de Parto: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "datefield",
                                            disabled: true,
                                            format: "d/m/Y",
                                            hideLabel: true,
                                            name: "fppIfppir",
                                            readOnly: true,
                                            reference: "fppIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Peso (kg)"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: true,
                                            decimalPrecision: 2,
                                            disabled: true,
                                            hideLabel: true,
                                            hideTrigger: true,
                                            listeners: {
                                                change: "onChangeNumber"
                                            },
                                            name: "pesoIfppir",
                                            reference: "pesoIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Gestaciones:"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "gIfppir",
                                            reference: "gIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Altura (cm)"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: false,
                                            disabled: true,
                                            hideLabel: true,
                                            hideTrigger: true,
                                            listeners: {
                                                change: "onChangeNumber"
                                            },
                                            name: "tallaIfppir",
                                            reference: "tallaIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Partos:"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "pIfppir",
                                            reference: "pIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Indice de masa corporal"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: true,
                                            decimalPrecision: 2,
                                            disabled: true,
                                            hideLabel: true,
                                            name: "masaCorporalIfppir",
                                            readOnly: true,
                                            reference: "masaCorporalIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Cesáreas:"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "cIfppir",
                                            reference: "cIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Perímetro Abdominal (cm)"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: false,
                                            disabled: true,
                                            hideLabel: true,
                                            name: "perimetroAbdominalIfppir",
                                            reference: "perimetroAbdominalIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Abortos:"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "aIfppir",
                                            reference: "aIfppir"
                                        }
                                    ]
                                },
                                {
                                    height: 80,
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Tensión Arterial"
                                        }
                                    ]
                                },
                                {
                                    height: 80,
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: false,
                                            disabled: true,
                                            fieldLabel: "Sistólica (mm Hg)",
                                            labelWidth: 120,
                                            minValue: 100,
                                            maxValue: 230,
                                            name: "sistolicaIfppir",
                                            reference: "sistolicaIfppir",
                                            width: 220
                                        },
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: false,
                                            disabled: true,
                                            fieldLabel: "Diastólica (mm Hg)",
                                            labelWidth: 120,
                                            minValue: 50,
                                            maxValue: 140,
                                            name: "diastolicaIfppir",
                                            reference: "diastolicaIfppir",
                                            width: 220
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Nacido Vivo"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            allowDecimals: false,
                                            disabled: false,
                                            hideLabel: true,
                                            name: "nacidoVivoIfppir",
                                            reference: "nacidoVivoIfppir"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            layout: {
                                type: "table",
                                columns: 8
                            },
                            items: [
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Colesterol Total: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "colesterolTotalIfppir",
                                            reference: "colesterolTotalIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Colesterol LDL: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "colesterolLdlIfppir",
                                            reference: "colesterolLdlIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Colesterol HDL: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "colesterolHdlIfppir",
                                            reference: "colesterolHdlIfppir"
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "label",
                                            html: "Glicemia: "
                                        }
                                    ]
                                },
                                {
                                    items: [
                                        {
                                            xtype: "textfield",
                                            disabled: true,
                                            hideLabel: true,
                                            name: "glicemiaIfppir",
                                            reference: "glicemiaIfppir"
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    title: "Datos Básicos Afiliado"
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{getPreguntasFactor}"
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "idPregunta",
                            header: "Id Pregunta",
                            hidden: true
                        },
                        {
                            text: "Factor de Riesgo",
                            columns: [
                                {
                                    dataIndex: "codigoPregunta",
                                    header: "Código",
                                    width: 100
                                },
                                {
                                    dataIndex: "descripcionPregunta",
                                    header: "Pregunta",
                                    width: 600
                                }
                            ]
                        },
                        {
                            text: "Respuesta",
                            columns: [
                                {
                                    xtype: "checkcolumn",
                                    dataIndex: "respuestaSiPregunta",
                                    header: "Si",
                                    listeners: {
                                        checkchange: "onGridColumnCheckChange"
                                    },
                                    width: 100
                                },
                                {
                                    xtype: "checkcolumn",
                                    dataIndex: "respuestaNoPregunta",
                                    header: "No",
                                    listeners: {
                                        checkchange: "onGridColumnCheckChange"
                                    },
                                    width: 100
                                }
                            ]
                        }
                    ],
                    columnLines: true,
                    features: [
                        {
                            ftype: 'grouping'
                        }
                    ],
                    height: 300,
                    id: "Grid-Ifppir-Principal",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    sortableColumns: false
                },
                {
                    xtype: "textarea",
                    disabled: true,
                    fieldLabel: "Observaciones",
                    name: "observacionIfppir",
                    reference: "observacionIfppir",
                    width: 600
                },
                {
                    bodyPadding: 10,
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    title: "Firma",
                    items: [
                        {
                            items: [
                                {
                                    xtype: 'uploader',
                                    uploadConfig: {
                                        uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                        maxFileSize: 10 * 1024 * 1024
                                    },
                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                    listeners: {
                                        'uploaddatacomplete': "onUploadFirmaDataComplete",
                                        'uploaderror': "onUploadFirmaError"
                                    }
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    name: "firmaIfppir",
                                    hidden: true,
                                    reference: "firmaIfppir"
                                },
                                {
                                    xtype: "button",
                                    iconCls: "x-fa fa-minus-circle",
                                    textAlign: "left",
                                    handler: "onBotonEliminarFirmaClick",
                                    reference: "botonEliminarFirma",
                                    width: 250
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.DemandaInducida.PurisuController", {
    extend: "Ext.app.ViewController",
    alias: "controller.demandainducida-purisu",
    statusComponent: false,
    components: [
        "idDepartamento",
        "idCiudad",
        "botonGuardar",
        "botonCancelar",
        "botonGridAdicionar",
        "botonGridRemover"
    ],
    getTitleView: function() {
        return this.getView().getTitle();
    },
    fnLimpiarDatos: function() {
        var form = Ext.getCmp("Form-Purisu-Principal");
        form.getForm().reset();
        var storeGrid = Ext.getCmp('Grid-Purisu-Principal').getStore();
        storeGrid.removeAll();
    },
    fnEnableDisableComponent: function() {
        var me = this;
        for (var i = 0; i < me.components.length; i++) {
            var obj = me.lookupReference(me.components[i]);
            if (me.statusComponent) {
                obj.disable();
            } else {
                obj.enable();
            }
        }
        var botonNuevaPlanilla = me.lookupReference("botonNuevaPlanilla");
        var botonBuscarAfiliado = me.lookupReference("botonBuscarAfiliado");
        if (me.statusComponent) {
            botonNuevaPlanilla.enable();
            botonBuscarAfiliado.disable();
            me.statusComponent = false;
        } else {
            botonNuevaPlanilla.disable();
            botonBuscarAfiliado.enable();
            me.fnLimpiarDatos();
            me.statusComponent = true;
        }
    },
    onBotonNuevaPlanillaClick: function(btn) {
        var me = this;
        me.fnEnableDisableComponent();
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                me.fnLimpiarDatos();
                me.fnEnableDisableComponent();
                var tabPanel = Ext.getCmp("CoomucePurisu");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var grid = Ext.getCmp('Grid-Purisu-Principal');
        var storeGrid = grid.getStore();
        if (storeGrid.data.items.length == 0) {
            Coomuce.Util.ShowMessage({
                type: "INFO",
                title: "Atención",
                msg: "Debe agregar datos a la lista para continuar"
            });
        } else {
            Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
                if (btn === "yes") {
                    //var fechaAtencionPurisu = me.lookupReference("fechaAtencionPurisu");
                    var form = Ext.getCmp("Form-Purisu-Principal");
                    var infoForm = form.getForm().getValues();
                    var infoPurisu = {
                            idInfoPurisu: 0,
                            // inicializo este campo que no se captura en pantalla
                            fechaAtencionPurisu: infoForm.fechaAtencionPurisu,
                            idDepartamento: infoForm.idDepartamento,
                            idCiudad: infoForm.idCiudad,
                            idUsuario: Coomuce.Util.DatosUsuario.idUsuario,
                            tipoDiligenciamientoInfoPurisu: infoForm.tipoDiligenciamientoInfoPurisu
                        };
                    var grid = Ext.getCmp('Grid-Purisu-Principal');
                    var storeGrid = grid.getStore();
                    var listaPurisuModel = [];
                    //var itemsValidar = [];
                    Ext.each(storeGrid.data.items, function(ob, index, all) {
                        var dato = ob.data;
                        dato.idTipoVisitaDomiciliaria = Ext.isEmpty(dato.idTipoVisitaDomiciliaria) ? null : dato.idTipoVisitaDomiciliaria;
                        dato.idProgramaResolucion412 = Ext.isEmpty(dato.idProgramaResolucion412) ? null : dato.idProgramaResolucion412;
                        dato.idGrupoInteres = Ext.isEmpty(dato.idGrupoInteres) ? null : dato.idGrupoInteres;
                        dato.idSeguimientoProgramasIntervencionRiesgo = Ext.isEmpty(dato.idSeguimientoProgramasIntervencionRiesgo) ? null : dato.idSeguimientoProgramasIntervencionRiesgo;
                        dato.idGruposFocales = Ext.isEmpty(dato.idGruposFocales) ? null : dato.idGruposFocales;
                        if (dato.idMotivoConsulta.length > 0) {
                            dato.idMotivoConsulta = dato.idMotivoConsulta.split(",");
                        }
                        if (dato.idMotivoContacto.length > 0) {
                            dato.idMotivoContacto = dato.idMotivoContacto.split(",");
                        }
                        if (dato.idPiezasInformativas.length > 0) {
                            dato.idPiezasInformativas = dato.idPiezasInformativas.split(",");
                        }
                        dato.idEje = Ext.isEmpty(dato.idEje) ? null : dato.idEje;
                        dato.idEje1 = Ext.isEmpty(dato.idEje1) ? null : dato.idEje1;
                        dato.idModulo = Ext.isEmpty(dato.idModulo) ? null : dato.idModulo;
                        dato.idModulo1 = Ext.isEmpty(dato.idModulo1) ? null : dato.idModulo1;
                        dato.idUnidad = Ext.isEmpty(dato.idUnidad) ? null : dato.idUnidad;
                        dato.idUnidad1 = Ext.isEmpty(dato.idUnidad1) ? null : dato.idUnidad1;
                        //dato.numCarnePurisu = dato.numCarnetFuanAfiliado;
                        //if (ob.dirty) {
                        //if (ob.phantom) {
                        listaPurisuModel.push(dato);
                    });
                    //}
                    //else {
                    //    viejos.push(ob.data);
                    //}
                    //itemsValidar.push(ob);
                    //}
                    var conf = {
                            url: Coomuce.Url.Funciones + "PurisuGuardar",
                            data: {
                                infoPurisu: infoPurisu,
                                listaPurisuModel: listaPurisuModel
                            },
                            targetMask: form,
                            msgMask: "Guardando datos...",
                            fnSuccess: function(response) {
                                me.fnLimpiarDatos();
                                me.fnEnableDisableComponent();
                                //form.getForm().reset();
                                //firmaPurisu.setValue("");
                                //botonEliminar.setText("");
                                Ext.getCmp("Grid-MotivosConsulta").selModel.deselectAll();
                                Ext.getCmp("Grid-MotivosContacto").selModel.deselectAll();
                                Ext.getCmp("Grid-PiezasInformativas").selModel.deselectAll();
                                var tabPanel = Ext.getCmp("CoomucePurisu");
                                tabPanel.destroy();
                            }
                        };
                    console.log(conf);
                    Coomuce.Util.EnviarPost(conf);
                }
            });
        }
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.dependent) {
            //var rec = Ext.getCmp("Grid-Purisu-Principal").selModel.getSelection();
            //    if (combo.updateRecords !== undefined) {
            //        for (var i = 0; i < combo.campos.length; i++) {
            //            var ob = me.lookupReference(combo.campos[i]);
            //            ob.setValue(record.get(combo.campos[i]));
            //        }
            //    }
            //    else {
            //        rec[0].set(combo.idCampo, record.get(combo.idCampo));
            //    }
            //}
            //else {
            var ob = me.lookupReference(combo.campoDependent);
            var name = "";
            if (combo.name === "idEje1" || combo.name === "idUnidad1" || combo.name === "idModulo1") {
                name = combo.name.substring(0, combo.name.length - 1);
            } else {
                name = combo.name;
            }
            var params = {};
            params[name] = record.get(name);
            ob.getStore().load({
                params: params
            });
        }
    },
    onSelectionChange: function(sm, selected, eOpts) {
        var me = this;
        if (selected.length > sm.maxSelection) {
            for (var i = sm.maxSelection; i < selected.length; i++) {
                var rec = selected[i];
                sm.deselect(rec, true);
            }
            // deseleccionar registros que sobrepasan el limite
            return false;
        }
        if (selected.length > 0) {
            var valueId = selected.map(function(item) {
                    return item.data[sm.idCampo];
                });
            var valueComp = selected.map(function(item) {
                    return item.data[sm.compCampo];
                });
            var ob = me.lookupReference(sm.idCampo);
            ob.setValue(valueId);
            ob = me.lookupReference(sm.compCampo);
            ob.setValue(valueComp);
        }
    },
    onBotonGridAdicionarClick: function(btn) {
        var me = this;
        if (Ext.getCmp('identificacionFuanAfiliado').getValue() == "") {
            Coomuce.Util.ShowMessage({
                type: "INFO",
                title: "Atención",
                msg: "Debe Cargar un Afiliado para continuar"
            });
        } else {
            var botonEliminar = this.lookupReference("botonEliminar");
            var firmaPurisu = me.lookupReference("firmaPurisu");
            var form = Ext.getCmp("Form-Datos");
            var datos = form.getForm().getValues();
            var grid = Ext.getCmp('Grid-Purisu-Principal');
            var storeGrid = grid.getStore();
            var nextId = storeGrid.max("idPurisu");
            var ult = storeGrid.getCount();
            datos.idInfoPurisu = 0;
            datos.idPurisu = (nextId === undefined ? 1 : nextId + 1);
            for (var i = 0; i < btn.combos.length; i++) {
                var ob = me.lookupReference(btn.combos[i]);
                datos[btn.campos[i]] = ob.getRawValue();
            }
            datos.idFuanAfiliado = parseInt(datos.idFuanAfiliado);
            datos.numCarnePurisu = datos.numCarnetFuanAfiliado;
            datos.usisPurisu = (datos.usisPurisu == undefined ? false : (datos.usisPurisu === "on" ? true : false));
            datos.ipsPrimariaPurisu = (datos.ipsPrimariaPurisu == undefined ? false : (datos.ipsPrimariaPurisu === "on" ? true : false));
            datos.telefonicaPurisu = (datos.telefonicaPurisu == undefined ? false : (datos.telefonicaPurisu === "on" ? true : false));
            datos.cauPurisu = (datos.cauPurisu == undefined ? false : (datos.cauPurisu === "on" ? true : false));
            datos.actividadExtramuralPurisu = (datos.actividadExtramuralPurisu == undefined ? false : (datos.actividadExtramuralPurisu === "on" ? true : false));
            datos.firmaPurisu = firmaPurisu.getValue();
            console.log(datos);
            var row = [];
            row.push(datos);
            storeGrid.insert(ult, row);
            Ext.Msg.confirm("Atención", "Desea agregar una nueva Canalización a este Afiliado?", function(btn) {
                if (btn === "yes") {} else {
                    form.getForm().reset();
                    firmaPurisu.setValue("");
                    botonEliminar.setText("");
                    Ext.getCmp("Grid-MotivosConsulta").selModel.deselectAll();
                    Ext.getCmp("Grid-MotivosContacto").selModel.deselectAll();
                    Ext.getCmp("Grid-PiezasInformativas").selModel.deselectAll();
                }
            });
        }
    },
    onBotonGridRemoverClick: function() {
        var storeGrid = Ext.getCmp('Grid-Purisu-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onUploadDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var botonEliminar = this.lookupReference("botonEliminar");
        var firmaPurisu = this.lookupReference("firmaPurisu");
        botonEliminar.setText(file.data);
        firmaPurisu.setValue(file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarArchivoClick: function(btn) {
        btn.setText("");
        var firmaPurisu = this.lookupReference("firmaPurisu");
        firmaPurisu.setValue("");
    },
    onUploadAudioDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var record = source.getWidgetRecord();
        record.set("archivoAudioInfoPurisu", file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de audio importado correctamente."
        });
    },
    onBotonEliminarArchivoAudioClick: function(btn) {
        var record = btn.getWidgetRecord();
        record.set("archivoAudioInfoPurisu", "");
    },
    onBotonImportarArchivoClick: function() {
        var me = this;
        var store = Ext.create("Ext.data.Store", {
                autoLoad: true,
                fields: [
                    "idInfoPurisu",
                    "tipoDiligenciamientoInfoPurisu",
                    {
                        name: "fechaAtencionPurisu",
                        convert: Coomuce.Util.parseDate
                    },
                    "nombreCompletoUsuario",
                    "idCiudad",
                    "idUsuario",
                    "archivoAudioInfoPurisu"
                ],
                proxy: {
                    timeout: 600000,
                    useDefaultXhrHeader: false,
                    type: 'ajax',
                    url: Coomuce.Url.Funciones + "GetPurisuAll",
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: "total"
                    }
                }
            });
        var pagingBar = Ext.widget("pagingtoolbar", {
                store: store,
                displayInfo: true,
                displayMsg: "Registros {0} - {1} de {2}"
            });
        var grid = Ext.create("Ext.grid.Panel", {
                bbar: pagingBar,
                columns: [
                    {
                        dataIndex: "idInfoPurisu",
                        header: "No. Plantilla"
                    },
                    {
                        dataIndex: "tipoDiligenciamientoInfoPurisu",
                        header: "Tipo Diligenciamiento"
                    },
                    {
                        xtype: "datecolumn",
                        dataIndex: "fechaAtencionPurisu",
                        format: "d/m/Y",
                        header: "Fecha"
                    },
                    {
                        dataIndex: "nombreCompletoUsuario",
                        header: "Usuario"
                    },
                    {
                        xtype: "widgetcolumn",
                        header: "",
                        width: 60,
                        widget: {
                            xtype: 'uploader',
                            uploadConfig: {
                                uploadUrl: Coomuce.Url.Funciones + "ImportarAudioPurisu",
                                maxFileSize: 10 * 1024 * 1024
                            },
                            inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                            listeners: {
                                'uploaddatacomplete': me.onUploadAudioDataComplete,
                                'uploaderror': me.onUploadError
                            }
                        }
                    },
                    {
                        xtype: "widgetcolumn",
                        dataIndex: "archivoAudioInfoPurisu",
                        header: "Archivo de audio",
                        width: 200,
                        widget: {
                            xtype: "button",
                            iconCls: "x-fa fa-minus-circle",
                            textAlign: "left",
                            handler: me.onBotonEliminarArchivoAudioClick
                        }
                    }
                ],
                columnLines: true,
                loadMask: true,
                store: store
            });
        var fnGuardarCambios = function() {
                var datos = [];
                Ext.each(store.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (!ob.phantom) {
                            datos.push({
                                idInfoPurisu: ob.data.idInfoPurisu,
                                idCiudad: ob.data.idCiudad,
                                idUsuario: ob.data.idUsuario,
                                archivoAudioInfoPurisu: ob.data.archivoAudioInfoPurisu,
                                tipoDiligenciamientoInfoPurisu: ob.data.tipoDiligenciamientoInfoPurisu
                            });
                        }
                    }
                });
                Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
                    if (btn === "yes") {
                        var conf = {
                                url: Coomuce.Url.Funciones + "PurisuGuardarCambios",
                                data: {
                                    datos: datos
                                },
                                targetMask: grid,
                                msgMask: "Guardando datos...",
                                fnSuccess: function(response) {
                                    store.load();
                                }
                            };
                        Coomuce.Util.EnviarPost(conf);
                    }
                });
            };
        var window = Ext.create("Ext.window.Window", {
                height: 500,
                items: grid,
                layout: "fit",
                modal: true,
                tbar: {
                    items: [
                        {
                            text: "Guardar cambios",
                            handler: fnGuardarCambios
                        }
                    ]
                },
                title: "Importar archivo de audio",
                width: 500
            });
        window.show();
    }
});

Ext.define("CoomuceMod.view.DemandaInducida.PurisuModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.demandainducida-purisu",
    stores: {
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        //getAfiliado: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.ActualizacionBd.FuanAfiliado",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetFuanAfiliadoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        //getTipoIdentificacion: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        getTipoVisitaDomiciliaria: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.TipoVisitaDomiciliaria",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoVisitaDomiciliariaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        //getTipoSexo: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.Parametros.Generales.TipoSexo",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Parametros + "GetTipoSexoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        getProgramaResolucion412: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.ProgramaResolucion412",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetProgramaResolucion412All",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getGrupoInteres: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.GrupoInteres",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGrupoInteresAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getSeguimientoProgramasIntervencionRiesgo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSeguimientoProgramasIntervencionRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getMotivoConsulta: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.MotivoConsulta",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoConsultaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getMotivoContacto: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.MotivoContacto",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoContactoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getGruposFocales: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.GruposFocales",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGruposFocalesAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPiezasInformativas: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.PiezasInformativas",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPiezasInformativasAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getEje: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Eje",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEjeAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getUnidad: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Unidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetUnidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getModulo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Modulo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetModuloAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        setItemsPurisu: {
            fields: [
                "idInfoPurisu",
                "idPurisu",
                "idFuanAfiliado",
                "codigoTipoIdentificacion",
                "identificacionFuanAfiliado",
                "idTipoVisitaDomiciliaria",
                "compTipoVisitaDomiciliaria",
                "usisPurisu",
                "ipsPrimariaPurisu",
                "telefonicaPurisu",
                "cauPurisu",
                "actividadExtramuralPurisu",
                "edadFuanAfiliado",
                "nombreTipoSexo",
                "idProgramaResolucion412",
                "compProgramaResolucion412",
                "idGrupoInteres",
                "compGrupoInteres",
                "idSeguimientoProgramasIntervencionRiesgo",
                "compSeguimientoProgramasIntervencionRiesgo",
                "idMotivoConsulta",
                "compMotivoConsulta",
                "idMotivoContacto",
                "compMotivoContacto",
                "numAutorizacionPurisu",
                "idGruposFocales",
                "compGruposFocales",
                "idEje",
                "compEje",
                "idUnidad",
                "compUnidad",
                "idModulo",
                "compModulo",
                "idEje1",
                "compEje1",
                "idUnidad1",
                "compUnidad1",
                "idModulo1",
                "compModulo1",
                "idPiezasInformativas",
                "compPiezasInformativas",
                "firmaPurisu"
            ]
        }
    }
});

Ext.define("CoomuceMod.view.DemandaInducida.Purisu", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.DemandaInducida.PurisuController",
        "CoomuceMod.view.DemandaInducida.PurisuModel"
    ],
    controller: "demandainducida-purisu",
    viewModel: {
        type: "demandainducida-purisu"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    disabled: true,
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    disabled: false,
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Nueva Planilla",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonNuevaPlanillaClick",
                    reference: "botonNuevaPlanilla"
                },
                {
                    text: "Importar archivo de audio",
                    iconCls: "x-fa fa-file-audio-o",
                    handler: "onBotonImportarArchivoClick",
                    tooltip: "Esta opción permite importar archivos de audio a las plantillas diligenciadas telefonicamente."
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            id: "Form-Purisu-Principal",
            scrollable: true,
            items: [
                {
                    xtype: "combo",
                    anchor: "90%",
                    fieldLabel: "Tipo Diligenciamiento",
                    labelWidth: 150,
                    name: "tipoDiligenciamientoInfoPurisu",
                    store: [
                        "Personal",
                        "Telefonico"
                    ],
                    value: "Personal"
                },
                {
                    xtype: "datefield",
                    anchor: "40%",
                    fieldLabel: "Fecha atención",
                    format: "d/m/Y",
                    labelWidth: 150,
                    name: "fechaAtencionPurisu",
                    reference: "fechaAtencionPurisu",
                    value: new Date()
                },
                {
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getDepartamento}"
                                    },
                                    campoDependent: "idCiudad",
                                    dependent: true,
                                    disabled: true,
                                    displayField: "compDepartamento",
                                    editable: false,
                                    fieldLabel: "Departamento",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idDepartamento",
                                    queryMode: "local",
                                    reference: "idDepartamento",
                                    valueField: "idDepartamento",
                                    width: 400
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getCiudad}"
                                    },
                                    disabled: true,
                                    displayField: "compCiudad",
                                    editable: false,
                                    fieldLabel: "Municipio",
                                    name: "idCiudad",
                                    queryMode: "local",
                                    reference: "idCiudad",
                                    valueField: "idCiudad",
                                    width: 400
                                }
                            ]
                        }
                    ]
                },
                {
                    items: [
                        {
                            xtype: "form",
                            bodyPadding: 10,
                            border: true,
                            collapsible: true,
                            header: false,
                            id: "Form-Datos",
                            items: [
                                {
                                    xtype: "fieldset",
                                    defaults: {
                                        anchor: "100%"
                                    },
                                    items: [
                                        {
                                            xtype: "numberfield",
                                            hidden: true,
                                            name: "idFuanAfiliado",
                                            reference: "idFuanAfiliado"
                                        },
                                        {
                                            xtype: "textfield",
                                            fieldLabel: "2. No. Carné",
                                            name: "numCarnetFuanAfiliado",
                                            readOnly: true,
                                            reference: "numCarnetFuanAfiliado"
                                        },
                                        {
                                            xtype: "textfield",
                                            fieldLabel: "3. Tipo Identificación del Usuario",
                                            name: "codigoTipoIdentificacion",
                                            reference: "codigoTipoIdentificacion"
                                        },
                                        {
                                            layout: {
                                                type: "table",
                                                columns: 2
                                            },
                                            items: [
                                                {
                                                    items: [
                                                        {
                                                            xtype: "textfield",
                                                            fieldLabel: "4. No. Documento de Identidad",
                                                            name: "identificacionFuanAfiliado",
                                                            id: "identificacionFuanAfiliado",
                                                            readOnly: true
                                                        }
                                                    ]
                                                },
                                                {
                                                    items: [
                                                        {
                                                            xtype: "button",
                                                            disabled: true,
                                                            componentReference: [
                                                                "idFuanAfiliado",
                                                                "codigoTipoIdentificacion",
                                                                "identificacionFuanAfiliado",
                                                                "edadFuanAfiliado",
                                                                "nombreTipoSexo",
                                                                "numCarnetFuanAfiliado"
                                                            ],
                                                            handler: Coomuce.Util.buscarAfiliado,
                                                            iconCls: "x-fa fa-binoculars",
                                                            reference: "botonBuscarAfiliado",
                                                            tooltip: "Lista de Afiliados",
                                                            width: 30
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            xtype: "fieldset",
                                            defaults: {
                                                anchor: "100%"
                                            },
                                            items: [
                                                {
                                                    xtype: "combo",
                                                    bind: {
                                                        store: "{getTipoVisitaDomiciliaria}"
                                                    },
                                                    displayField: "compTipoVisitaDomiciliaria",
                                                    editable: false,
                                                    fieldLabel: "5. Visita Domiciliaria",
                                                    //idCampo: "idTipoVisitaDomiciliaria",
                                                    //listeners: {
                                                    //    select: "onSelectCombo"
                                                    //},
                                                    name: "idTipoVisitaDomiciliaria",
                                                    queryMode: "local",
                                                    reference: "idTipoVisitaDomiciliaria",
                                                    valueField: "idTipoVisitaDomiciliaria"
                                                },
                                                {
                                                    xtype: "checkbox",
                                                    fieldLabel: "6. USIS (Oficina Municipal)",
                                                    name: "usisPurisu"
                                                },
                                                {
                                                    xtype: "checkbox",
                                                    fieldLabel: "7. IPS Primaria",
                                                    name: "ipsPrimariaPurisu"
                                                },
                                                {
                                                    xtype: "checkbox",
                                                    fieldLabel: "8. Telefonica",
                                                    name: "telefonicaPurisu"
                                                },
                                                {
                                                    xtype: "checkbox",
                                                    fieldLabel: "9. CAU (Defensor del Usuario)",
                                                    name: "cauPurisu"
                                                },
                                                {
                                                    xtype: "checkbox",
                                                    fieldLabel: "10. Actividades Extramurales",
                                                    name: "actividadExtramuralPurisu"
                                                }
                                            ],
                                            title: "UBICACIÓN"
                                        },
                                        {
                                            xtype: "numberfield",
                                            fieldLabel: "11. Edad",
                                            name: "edadFuanAfiliado",
                                            readOnly: true,
                                            reference: "edadFuanAfiliado"
                                        },
                                        {
                                            xtype: "textfield",
                                            fieldLabel: "12. Genero",
                                            name: "nombreTipoSexo",
                                            readOnly: true,
                                            reference: "nombreTipoSexo"
                                        }
                                    ],
                                    title: "DATOS GENERALES"
                                },
                                {
                                    xtype: "fieldset",
                                    defaults: {
                                        anchor: "100%"
                                    },
                                    items: [
                                        {
                                            xtype: "fieldset",
                                            defaults: {
                                                anchor: "100%"
                                            },
                                            items: [
                                                {
                                                    xtype: "combo",
                                                    bind: {
                                                        store: "{getProgramaResolucion412}"
                                                    },
                                                    displayField: "compProgramaResolucion412",
                                                    editable: false,
                                                    fieldLabel: "13. Programas Res. 412",
                                                    name: "idProgramaResolucion412",
                                                    queryMode: "local",
                                                    reference: "idProgramaResolucion412",
                                                    valueField: "idProgramaResolucion412"
                                                },
                                                {
                                                    xtype: "combo",
                                                    bind: {
                                                        store: "{getGrupoInteres}"
                                                    },
                                                    displayField: "compGrupoInteres",
                                                    editable: false,
                                                    fieldLabel: "14. Programas Grupos de Interés en Salud",
                                                    name: "idGrupoInteres",
                                                    queryMode: "local",
                                                    reference: "idGrupoInteres",
                                                    valueField: "idGrupoInteres"
                                                }
                                            ],
                                            title: "Finalidad de la Canalización"
                                        },
                                        {
                                            xtype: "combo",
                                            bind: {
                                                store: "{getSeguimientoProgramasIntervencionRiesgo}"
                                            },
                                            displayField: "compSeguimientoProgramasIntervencionRiesgo",
                                            editable: false,
                                            fieldLabel: "15. Seguimiento Prog. Intervención del Riesgo",
                                            name: "idSeguimientoProgramasIntervencionRiesgo",
                                            queryMode: "local",
                                            reference: "idSeguimientoProgramasIntervencionRiesgo",
                                            valueField: "idSeguimientoProgramasIntervencionRiesgo"
                                        }
                                    ]
                                },
                                {
                                    xtype: "fieldset",
                                    defaults: {
                                        anchor: "100%"
                                    },
                                    items: [
                                        {
                                            xtype: "textfield",
                                            name: "idMotivoConsulta",
                                            hidden: true,
                                            reference: "idMotivoConsulta"
                                        },
                                        {
                                            xtype: "textfield",
                                            name: "compMotivoConsulta",
                                            hidden: true,
                                            reference: "compMotivoConsulta"
                                        },
                                        {
                                            xtype: "grid",
                                            bind: {
                                                store: "{getMotivoConsulta}"
                                            },
                                            border: true,
                                            columns: [
                                                {
                                                    dataIndex: "idMotivoConsulta",
                                                    header: "Id",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "codigoMotivoConsulta",
                                                    header: "Código",
                                                    width: 100
                                                },
                                                {
                                                    dataIndex: "descripcionMotivoConsulta",
                                                    header: "Descripción",
                                                    width: 300
                                                }
                                            ],
                                            columnLines: true,
                                            height: 200,
                                            id: "Grid-MotivosConsulta",
                                            loadMask: true,
                                            selModel: {
                                                type: 'checkboxmodel',
                                                checkOnly: true,
                                                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                                                maxSelection: 2,
                                                idCampo: "idMotivoConsulta",
                                                compCampo: "compMotivoConsulta",
                                                listeners: {
                                                    selectionchange: "onSelectionChange"
                                                }
                                            },
                                            sortableColumns: false,
                                            tbar: {
                                                items: [
                                                    "16. Motivo de Consulta (Afiliado)"
                                                ]
                                            }
                                        },
                                        {
                                            xtype: "textfield",
                                            name: "idMotivoContacto",
                                            hidden: true,
                                            reference: "idMotivoContacto"
                                        },
                                        {
                                            xtype: "textfield",
                                            name: "compMotivoContacto",
                                            hidden: true,
                                            reference: "compMotivoContacto"
                                        },
                                        {
                                            xtype: "grid",
                                            bind: {
                                                store: "{getMotivoContacto}"
                                            },
                                            border: true,
                                            columns: [
                                                {
                                                    dataIndex: "idMotivoContacto",
                                                    header: "Id",
                                                    hidden: true
                                                },
                                                {
                                                    dataIndex: "codigoMotivoContacto",
                                                    header: "Código",
                                                    width: 100
                                                },
                                                {
                                                    dataIndex: "descripcionMotivoContacto",
                                                    header: "Descripción",
                                                    width: 300
                                                }
                                            ],
                                            columnLines: true,
                                            height: 200,
                                            id: "Grid-MotivosContacto",
                                            loadMask: true,
                                            selModel: {
                                                type: 'checkboxmodel',
                                                checkOnly: true,
                                                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                                                maxSelection: 2,
                                                idCampo: "idMotivoContacto",
                                                compCampo: "compMotivoContacto",
                                                listeners: {
                                                    selectionchange: "onSelectionChange"
                                                }
                                            },
                                            sortableColumns: false,
                                            tbar: {
                                                items: [
                                                    "17. Motivo de Contacto (EPS-S)"
                                                ]
                                            }
                                        },
                                        {
                                            xtype: "numberfield",
                                            fieldLabel: "18. No. de Autorización",
                                            minValue: 0,
                                            name: "numAutorizacionPurisu"
                                        }
                                    ],
                                    title: "INFORMACIÓN Y ORIENTACIÓN"
                                },
                                {
                                    xtype: "fieldset",
                                    defaults: {
                                        anchor: "100%"
                                    },
                                    items: [
                                        {
                                            xtype: "combo",
                                            bind: {
                                                store: "{getGruposFocales}"
                                            },
                                            displayField: "compGruposFocales",
                                            editable: false,
                                            fieldLabel: "19. Código del Grupo Focal",
                                            name: "idGruposFocales",
                                            queryMode: "local",
                                            reference: "idGruposFocales",
                                            valueField: "idGruposFocales"
                                        },
                                        {
                                            xtype: "fieldset",
                                            defaults: {
                                                anchor: "100%"
                                            },
                                            items: [
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getEje}"
                                                    },
                                                    campoDependent: "idUnidad",
                                                    dependent: true,
                                                    displayField: "compEje",
                                                    editable: false,
                                                    fieldLabel: "ET",
                                                    listeners: {
                                                        select: "onSelectCombo"
                                                    },
                                                    name: "idEje",
                                                    queryMode: "local",
                                                    reference: "idEje",
                                                    valueField: "idEje"
                                                },
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getUnidad}"
                                                    },
                                                    campoDependent: "idModulo",
                                                    dependent: true,
                                                    displayField: "compUnidad",
                                                    fieldLabel: "U",
                                                    editable: false,
                                                    listeners: {
                                                        select: "onSelectCombo"
                                                    },
                                                    name: "idUnidad",
                                                    queryMode: "local",
                                                    reference: "idUnidad",
                                                    valueField: "idUnidad"
                                                },
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getModulo}"
                                                    },
                                                    displayField: "compModulo",
                                                    editable: false,
                                                    fieldLabel: "M",
                                                    name: "idModulo",
                                                    queryMode: "local",
                                                    reference: "idModulo",
                                                    valueField: "idModulo"
                                                },
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getEje}"
                                                    },
                                                    campoDependent: "idUnidad1",
                                                    dependent: true,
                                                    displayField: "compEje",
                                                    editable: false,
                                                    fieldLabel: "ET",
                                                    listeners: {
                                                        select: "onSelectCombo"
                                                    },
                                                    name: "idEje1",
                                                    queryMode: "local",
                                                    reference: "idEje1",
                                                    valueField: "idEje"
                                                },
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getUnidad}"
                                                    },
                                                    campoDependent: "idModulo1",
                                                    dependent: true,
                                                    displayField: "compUnidad",
                                                    fieldLabel: "U",
                                                    editable: false,
                                                    listeners: {
                                                        select: "onSelectCombo"
                                                    },
                                                    name: "idUnidad1",
                                                    queryMode: "local",
                                                    reference: "idUnidad1",
                                                    valueField: "idUnidad"
                                                },
                                                {
                                                    xtype: "combo",
                                                    allowBlank: false,
                                                    bind: {
                                                        store: "{getModulo}"
                                                    },
                                                    displayField: "compModulo",
                                                    editable: false,
                                                    fieldLabel: "M",
                                                    name: "idModulo1",
                                                    queryMode: "local",
                                                    reference: "idModulo1",
                                                    valueField: "idModulo"
                                                }
                                            ],
                                            title: "PIEFI"
                                        }
                                    ],
                                    title: "EDUCACIÓN Y FORMACIÓN INTEGRAL"
                                },
                                {
                                    xtype: "textfield",
                                    name: "idPiezasInformativas",
                                    hidden: true,
                                    reference: "idPiezasInformativas"
                                },
                                {
                                    xtype: "textfield",
                                    name: "compPiezasInformativas",
                                    hidden: true,
                                    reference: "compPiezasInformativas"
                                },
                                {
                                    xtype: "grid",
                                    bind: {
                                        store: "{getPiezasInformativas}"
                                    },
                                    border: true,
                                    columns: [
                                        {
                                            dataIndex: "idPiezasInformativas",
                                            header: "Id",
                                            hidden: true
                                        },
                                        {
                                            dataIndex: "codigoPiezasInformativas",
                                            header: "Código",
                                            width: 100
                                        },
                                        {
                                            dataIndex: "descripcionPiezasInformativas",
                                            header: "Descripción",
                                            width: 300
                                        }
                                    ],
                                    columnLines: true,
                                    height: 200,
                                    id: "Grid-PiezasInformativas",
                                    loadMask: true,
                                    selModel: {
                                        type: 'checkboxmodel',
                                        checkOnly: true,
                                        //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                                        maxSelection: 3,
                                        idCampo: "idPiezasInformativas",
                                        compCampo: "compPiezasInformativas",
                                        listeners: {
                                            selectionchange: "onSelectionChange"
                                        }
                                    },
                                    sortableColumns: false,
                                    tbar: {
                                        items: [
                                            "20. Código de Piezas Informátivas Entregadas al Usuario"
                                        ]
                                    }
                                },
                                {
                                    layout: {
                                        type: "table",
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            items: [
                                                {
                                                    xtype: 'uploader',
                                                    uploadConfig: {
                                                        uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                                        maxFileSize: 10 * 1024 * 1024
                                                    },
                                                    inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                                    listeners: {
                                                        'uploaddatacomplete': "onUploadDataComplete",
                                                        'uploaderror': "onUploadError"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            items: [
                                                {
                                                    xtype: "textfield",
                                                    name: "firmaPurisu",
                                                    hidden: true,
                                                    reference: "firmaPurisu"
                                                },
                                                {
                                                    xtype: "button",
                                                    iconCls: "x-fa fa-minus-circle",
                                                    textAlign: "left",
                                                    handler: "onBotonEliminarArchivoClick",
                                                    reference: "botonEliminar",
                                                    width: 250
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            region: "west",
                            scrollable: true,
                            split: true,
                            tbar: {
                                items: [
                                    {
                                        combos: [
                                            "idTipoVisitaDomiciliaria",
                                            "idProgramaResolucion412",
                                            "idGrupoInteres",
                                            "idSeguimientoProgramasIntervencionRiesgo",
                                            "idGruposFocales",
                                            "idEje",
                                            "idUnidad",
                                            "idModulo",
                                            "idEje1",
                                            "idUnidad1",
                                            "idModulo1"
                                        ],
                                        campos: [
                                            "compTipoVisitaDomiciliaria",
                                            "compProgramaResolucion412",
                                            "compGrupoInteres",
                                            "compSeguimientoProgramasIntervencionRiesgo",
                                            "compGruposFocales",
                                            "compEje",
                                            "compUnidad",
                                            "compModulo",
                                            "compEje1",
                                            "compUnidad1",
                                            "compModulo1"
                                        ],
                                        disabled: true,
                                        handler: "onBotonGridAdicionarClick",
                                        iconCls: "x-fa fa-plus-circle",
                                        reference: "botonGridAdicionar",
                                        text: "Agregar datos a lista"
                                    }
                                ]
                            },
                            width: 500
                        },
                        {
                            xtype: "grid",
                            bind: {
                                store: "{setItemsPurisu}"
                            },
                            border: true,
                            columns: [
                                {
                                    xtype: "rownumberer"
                                },
                                {
                                    text: "DATOS GENERALES",
                                    columns: [
                                        {
                                            dataIndex: "numCarnePurisu",
                                            header: "2. No. Carné"
                                        },
                                        {
                                            dataIndex: "codigoTipoIdentificacion",
                                            header: "3. Tipo Identificación del Usuario"
                                        },
                                        {
                                            dataIndex: "identificacionFuanAfiliado",
                                            header: "4. No. Documento de Identidad"
                                        },
                                        {
                                            text: "UBICACIÓN",
                                            columns: [
                                                {
                                                    dataIndex: "compTipoVisitaDomiciliaria",
                                                    header: "5. Visita Domiciliaria"
                                                },
                                                {
                                                    xtype: "checkcolumn",
                                                    dataIndex: "usisPurisu",
                                                    header: "6. USIS (Oficina Municipal)"
                                                },
                                                {
                                                    xtype: "checkcolumn",
                                                    dataIndex: "ipsPrimariaPurisu",
                                                    header: "7. IPS Primaria"
                                                },
                                                {
                                                    xtype: "checkcolumn",
                                                    dataIndex: "telefonicaPurisu",
                                                    header: "8. Telefonica"
                                                },
                                                {
                                                    xtype: "checkcolumn",
                                                    dataIndex: "cauPurisu",
                                                    header: "9. CAU (Defensor del Usuario)"
                                                },
                                                {
                                                    xtype: "checkcolumn",
                                                    dataIndex: "actividadExtramuralPurisu",
                                                    header: "10. Actividades Extramurales"
                                                }
                                            ]
                                        },
                                        {
                                            dataIndex: "edadFuanAfiliado",
                                            header: "11. Edad"
                                        },
                                        {
                                            dataIndex: "nombreTipoSexo",
                                            header: "12. Genero"
                                        }
                                    ]
                                },
                                {
                                    text: "",
                                    columns: [
                                        {
                                            text: "Finalidad de la Canalización",
                                            columns: [
                                                {
                                                    dataIndex: "compProgramaResolucion412",
                                                    header: "13. Programas Res. 412"
                                                },
                                                {
                                                    dataIndex: "compGrupoInteres",
                                                    header: "14. Programas Grupos de Interés en Salud"
                                                }
                                            ]
                                        },
                                        {
                                            dataIndex: "compSeguimientoProgramasIntervencionRiesgo",
                                            header: "15. Seguimiento Prog. Intervención del Riesgo"
                                        }
                                    ]
                                },
                                {
                                    text: "INFORMACIÓN Y ORIENTACIÓN",
                                    columns: [
                                        {
                                            dataIndex: "compMotivoConsulta",
                                            header: "16. Motivo de Consulta (Afiliado)"
                                        },
                                        {
                                            cellWrap: true,
                                            dataIndex: "compMotivoContacto",
                                            header: "17. Motivo de Contacto (EPS-S)"
                                        },
                                        {
                                            dataIndex: "numAutorizacionPurisu",
                                            header: "18. No. de Autorización"
                                        }
                                    ]
                                },
                                {
                                    text: "EDUCACIÓN Y FORMACIÓN INTEGRAL",
                                    columns: [
                                        {
                                            dataIndex: "compGruposFocales",
                                            header: "19. Código del Grupo Focal"
                                        },
                                        {
                                            text: "PIEFI",
                                            columns: [
                                                {
                                                    dataIndex: "compEje",
                                                    header: "ET"
                                                },
                                                {
                                                    dataIndex: "compUnidad",
                                                    header: "U"
                                                },
                                                {
                                                    dataIndex: "compModulo",
                                                    header: "M"
                                                },
                                                {
                                                    dataIndex: "compEje1",
                                                    header: "ET"
                                                },
                                                {
                                                    dataIndex: "compUnidad1",
                                                    header: "U"
                                                },
                                                {
                                                    dataIndex: "compModulo1",
                                                    header: "M"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    cellWrap: true,
                                    dataIndex: "compPiezasInformativas",
                                    header: "20. Código de Piezas Informátivas Entregadas al Usuario"
                                }
                            ],
                            columnLines: true,
                            id: "Grid-Purisu-Principal",
                            plugins: {
                                ptype: 'cellediting',
                                clicksToEdit: 1
                            },
                            region: "center",
                            sortableColumns: false,
                            tbar: {
                                items: [
                                    {
                                        disabled: true,
                                        handler: "onBotonGridRemoverClick",
                                        iconCls: "x-fa fa-minus-circle",
                                        reference: "botonGridRemover",
                                        text: "Remover"
                                    }
                                ]
                            }
                        }
                    ],
                    layout: "border",
                    height: 450
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaEpsController", {
    extend: "Ext.app.ViewController",
    alias: "controller.informacionorientacion-encuestaeps",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    fnGenerarPlantilla: function(data) {
        var contenedorEncuesta = Ext.getCmp("ContenidoEncuestaEps");
        Ext.Array.each(data, function(itemCat) {
            var fs = Ext.create("Ext.form.FieldSet", {
                    anchor: "100%",
                    defaults: {
                        anchor: "100%"
                    },
                    layout: "anchor",
                    style: "padding-top: 5px;padding-bottom: 5px;",
                    title: itemCat.nombreEncuestaCategoria
                });
            Ext.Array.each(itemCat.preguntas, function(itemPre) {
                var obj, label;
                label = Ext.create("Ext.form.Label", {
                    text: itemPre.textoEncuestaPregunta
                });
                fs.add(label);
                switch (itemPre.tipoPreEncuestaPregunta) {
                    case 1:
                        // "ÚNICA RESPUESTA"
                        obj = Ext.create("Ext.form.RadioGroup", {
                            allowBlank: false,
                            columns: 1,
                            name: "id_pre_" + itemPre.idEncuestaPregunta,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral,
                                checked: itemPre.literales[i].checkedEncuestaLiteral
                            });
                        };
                        //obj = Ext.create("Ext.form.RadioGroup", {
                        //    name: "id_pre_" + itemPre.idEncuestaPregunta,
                        //    items: [
                        //        { boxLabel: "SI", inputValue: itemPre.valorEncuestaPregunta },
                        //        { boxLabel: "NO", inputValue: 0, checked: true }
                        //    ],
                        //    vertical: true
                        //});
                        break;
                    case 2:
                        // "MÚLTIPLES RESPUESTAS"
                        obj = Ext.create("Ext.form.CheckboxGroup", {
                            allowBlank: false,
                            columns: 1,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                name: "id_lit_" + itemPre.literales[i].idEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral
                            });
                        };
                        break;
                    case 3:
                        //"SELECCIONE UNA"
                        obj = Ext.create("Ext.form.RadioGroup", {
                            allowBlank: false,
                            columns: 1,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                name: "id_lit_" + itemPre.literales[i].idEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral
                            });
                        };
                        break;
                }
                fs.add(obj);
            });
            contenedorEncuesta.add(fs);
        });
    },
    onAfterRender: function(view) {
        var me = this;
        var store = me.getViewModel().getStore("getEncuesta");
        store.on("load", function(store, records, successful, operation, eOpts) {
            var res = Ext.decode(operation._response.responseText);
            me.fnGenerarPlantilla(res.data);
        });
        store.load({
            params: {
                idDomVista: me.getView().getId()
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-EncuestaEps");
                if (!form.getForm().isValid()) {
                    Coomuce.Util.ShowMessage({
                        type: "ERROR",
                        title: titleView,
                        msg: "Hay campos obligatorios que deben ser diligenciados."
                    });
                    return false;
                }
                var datos = form.getForm().getValues();
                var encuestaEps = {};
                var resPre = [];
                var resLit = [];
                for (var key in datos) {
                    if (key === 'length' || !datos.hasOwnProperty(key))  {
                        
                        continue;
                    }
                    
                    var value = datos[key];
                    switch (key.substring(0, 6)) {
                        case "id_pre":
                            resPre.push({
                                idEncuestaEps: 0,
                                // inicializo este campo que no se captura en pantalla
                                idEncuestaPregunta: parseInt(key.substring(7)),
                                valorEncuestaEpsRespPregunta: value
                            });
                            break;
                        case "id_lit":
                            resLit.push({
                                idEncuestaEps: 0,
                                // inicializo este campo que no se captura en pantalla
                                idEncuestaLiteral: parseInt(key.substring(7)),
                                valorEncuestaEpsRespLiteral: value
                            });
                            break;
                        default:
                            encuestaEps[key] = value;
                            break;
                    }
                }
                encuestaEps.idUsuario = Coomuce.Util.DatosUsuario.idUsuario;
                var conf = {
                        url: Coomuce.Url.Funciones + "EncuestaEpsGuardar",
                        data: {
                            encuestaEps: encuestaEps,
                            respPregunta: resPre,
                            respLiteral: resLit
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            form.getForm().reset();
                            var tabPanel = Ext.getCmp("CoomuceEncuestaEPS");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-EncuestaEps");
                form.getForm().reset();
                var tabPanel = Ext.getCmp("CoomuceEncuestaEPS");
                tabPanel.destroy();
            }
        });
    }
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaEpsModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.informacionorientacion-encuestaeps",
    stores: {
        //getAfiliado: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.ActualizacionBd.FuanAfiliado",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetFuanAfiliadoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        //getIps: {
        //    autoLoad: true,
        //    fields: ["idIps", "nombreCompletoIps"],
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetIpsAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        getEncuesta: {
            autoLoad: false,
            fields: [
                "idEncuestaCategoria",
                "nombreEncuestaCategoria",
                "preguntas"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetEncuestaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaEps", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.InformacionOrientacion.EncuestaEpsController",
        "CoomuceMod.view.InformacionOrientacion.EncuestaEpsModel"
    ],
    controller: "informacionorientacion-encuestaeps",
    viewModel: {
        type: "informacionorientacion-encuestaeps"
    },
    layout: "fit",
    listeners: {
        afterrender: "onAfterRender"
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "100%",
                labelWidth: 150
            },
            scrollable: true,
            id: "Form-EncuestaEps",
            items: [
                {
                    xtype: "label",
                    html: "ENCUESTA DE SATISFACCION DE USUARIO DE LA EPS-S"
                },
                {
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hidden: true,
                                    name: "idFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "No. de identificación",
                                    labelWidth: 150,
                                    name: "compAfiliado",
                                    readOnly: true,
                                    reference: "compAfiliado",
                                    width: 700
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "button",
                                    componentReference: [
                                        "idFuanAfiliado",
                                        "compAfiliado"
                                    ],
                                    handler: Coomuce.Util.buscarAfiliado,
                                    iconCls: "x-fa fa-list-alt",
                                    reference: "botonBuscarAfiliado",
                                    tooltip: "Lista de Afiliados",
                                    width: 30
                                }
                            ]
                        }
                    ]
                },
                {
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hidden: true,
                                    name: "idIps"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Punto de Atención",
                                    labelWidth: 150,
                                    name: "nombreCompletoIps",
                                    readOnly: true,
                                    reference: "nombreCompletoIps",
                                    width: 700
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "button",
                                    componentReference: [
                                        "idIps",
                                        "nombreCompletoIps"
                                    ],
                                    handler: Coomuce.Util.buscarIps,
                                    iconCls: "x-fa fa-list-alt",
                                    reference: "botonBuscarIps",
                                    tooltip: "Lista de Ips",
                                    width: 30
                                }
                            ]
                        }
                    ]
                },
                //{
                //    xtype: "combo",
                //    allowBlank: false,
                //    bind: {
                //        store: "{getIps}"
                //    },
                //    displayField: "nombreCompletoIps",
                //    fieldLabel: "Punto de Atención",
                //    hideTrigger: true,
                //    name: "idIps",
                //    queryMode: "local",
                //    valueField: "idIps"
                //},
                {
                    xtype: "label",
                    html: "Esta encuesta tiene por objeto conocer su opinion  sobre los servicios prestados por la ARS."
                },
                {
                    xtype: "label",
                    html: "Su opinión es muy importante para nosotros porque nos permite organizar nuestros servicios para poder satisfacer sus expectativas, por eso le solicitamos que responda con sinceridad marcando (X) y solo una respuesta por pregunta."
                },
                {
                    bodyPadding: 10,
                    border: true,
                    height: 400,
                    id: "ContenidoEncuestaEps",
                    scrollable: true
                },
                {
                    xtype: "textarea",
                    fieldLabel: "Observaciones",
                    name: "observacionEncuestaEps"
                }
            ]
        }
    ]
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaIpsController", {
    extend: "Ext.app.ViewController",
    alias: "controller.informacionorientacion-encuestaips",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    fnGenerarPlantilla: function(data) {
        var contenedorEncuesta = Ext.getCmp("ContenidoEncuestaIps");
        Ext.Array.each(data, function(itemCat) {
            var fs = Ext.create("Ext.form.FieldSet", {
                    anchor: "100%",
                    defaults: {
                        anchor: "100%"
                    },
                    layout: "anchor",
                    style: "padding-top: 5px;padding-bottom: 5px;",
                    title: itemCat.nombreEncuestaCategoria
                });
            Ext.Array.each(itemCat.preguntas, function(itemPre) {
                var obj, label;
                label = Ext.create("Ext.form.Label", {
                    text: itemPre.textoEncuestaPregunta
                });
                fs.add(label);
                switch (itemPre.tipoPreEncuestaPregunta) {
                    case 1:
                        // "ÚNICA RESPUESTA"
                        obj = Ext.create("Ext.form.RadioGroup", {
                            allowBlank: false,
                            columns: 1,
                            name: "id_pre_" + itemPre.idEncuestaPregunta,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral,
                                checked: itemPre.literales[i].checkedEncuestaLiteral
                            });
                        };
                        //obj = Ext.create("Ext.form.RadioGroup", {
                        //    name: "id_pre_" + itemPre.idEncuestaPregunta,
                        //    items: [
                        //        { boxLabel: "SI", inputValue: itemPre.valorEncuestaPregunta },
                        //        { boxLabel: "NO", inputValue: 0, checked: true }
                        //    ],
                        //    vertical: true
                        //});
                        break;
                    case 2:
                        // "MÚLTIPLES RESPUESTAS"
                        obj = Ext.create("Ext.form.CheckboxGroup", {
                            allowBlank: false,
                            columns: 1,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                name: "id_lit_" + itemPre.literales[i].idEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral
                            });
                        };
                        break;
                    case 3:
                        //"SELECCIONE UNA"
                        obj = Ext.create("Ext.form.RadioGroup", {
                            allowBlank: false,
                            columns: 1,
                            vertical: false
                        });
                        for (var i = 0; i < itemPre.literales.length; i++) {
                            obj.add({
                                boxLabel: itemPre.literales[i].textoEncuestaLiteral,
                                name: "id_lit_" + itemPre.literales[i].idEncuestaLiteral,
                                inputValue: itemPre.literales[i].valorEncuestaLiteral
                            });
                        };
                        break;
                }
                fs.add(obj);
            });
            contenedorEncuesta.add(fs);
        });
    },
    onAfterRender: function(view) {
        var me = this;
        var store = me.getViewModel().getStore("getEncuesta");
        store.on("load", function(store, records, successful, operation, eOpts) {
            var res = Ext.decode(operation._response.responseText);
            me.fnGenerarPlantilla(res.data);
        });
        store.load({
            params: {
                idDomVista: me.getView().getId()
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-EncuestaIps");
                if (!form.getForm().isValid()) {
                    Coomuce.Util.ShowMessage({
                        type: "ERROR",
                        title: titleView,
                        msg: "Hay campos obligatorios que deben ser diligenciados."
                    });
                    return false;
                }
                var datos = form.getForm().getValues();
                var encuestaIps = {};
                var resPre = [];
                var resLit = [];
                for (var key in datos) {
                    if (key === 'length' || !datos.hasOwnProperty(key))  {
                        
                        continue;
                    }
                    
                    var value = datos[key];
                    switch (key.substring(0, 6)) {
                        case "id_pre":
                            resPre.push({
                                idEncuestaIps: 0,
                                // inicializo este campo que no se captura en pantalla
                                idEncuestaPregunta: parseInt(key.substring(7)),
                                valorEncuestaIpsRespPregunta: value
                            });
                            break;
                        case "id_lit":
                            resLit.push({
                                idEncuestaIps: 0,
                                // inicializo este campo que no se captura en pantalla
                                idEncuestaLiteral: parseInt(key.substring(7)),
                                valorEncuestaIpsRespLiteral: value
                            });
                            break;
                        default:
                            encuestaIps[key] = value;
                            break;
                    }
                }
                encuestaIps.idUsuario = Coomuce.Util.DatosUsuario.idUsuario;
                var conf = {
                        url: Coomuce.Url.Funciones + "EncuestaIpsGuardar",
                        data: {
                            encuestaIps: encuestaIps,
                            respPregunta: resPre,
                            respLiteral: resLit
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            form.getForm().reset();
                            var tabPanel = Ext.getCmp("CoomuceEncuestaIPS");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-EncuestaIps");
                form.getForm().reset();
                var tabPanel = Ext.getCmp("CoomuceEncuestaIPS");
                tabPanel.destroy();
            }
        });
    }
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaIpsModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.informacionorientacion-encuestaips",
    stores: {
        //getAfiliado: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.ActualizacionBd.FuanAfiliado",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetFuanAfiliadoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        //getIps: {
        //    autoLoad: true,
        //    fields: ["idIps", "nombreCompletoIps"],
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetIpsAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        getEncuesta: {
            autoLoad: false,
            fields: [
                "idEncuestaCategoria",
                "nombreEncuestaCategoria",
                "preguntas"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetEncuestaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.InformacionOrientacion.EncuestaIps", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.InformacionOrientacion.EncuestaIpsController",
        "CoomuceMod.view.InformacionOrientacion.EncuestaIpsModel"
    ],
    controller: "informacionorientacion-encuestaips",
    viewModel: {
        type: "informacionorientacion-encuestaips"
    },
    layout: "fit",
    listeners: {
        afterrender: "onAfterRender"
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            defaults: {
                anchor: "100%",
                labelWidth: 150
            },
            scrollable: true,
            id: "Form-EncuestaIps",
            items: [
                {
                    xtype: "label",
                    html: "ENCUESTA DE SATISFACCION DE USUARIO DE LA  I.P.S DE I NIVEL"
                },
                {
                    xtype: "label",
                    html: "ESTIMADO USUARIO SI USTED HA RECIBIDO EN ESTE MES LOS SERVICIOS DE INSTITUCIONES DE SALUD ( HOSPITAL, CENTRO DE SALUD, IPS) LO INVITAMOS A RESPONDER LAS SIGUIENTES PREGUNTAS SOBRE LA ATENCION"
                },
                {
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hidden: true,
                                    name: "idFuanAfiliado"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "No. de identificación",
                                    labelWidth: 150,
                                    name: "compAfiliado",
                                    readOnly: true,
                                    reference: "compAfiliado",
                                    width: 700
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "button",
                                    componentReference: [
                                        "idFuanAfiliado",
                                        "compAfiliado"
                                    ],
                                    handler: Coomuce.Util.buscarAfiliado,
                                    iconCls: "x-fa fa-list-alt",
                                    reference: "botonBuscarAfiliado",
                                    tooltip: "Lista de Afiliados",
                                    width: 30
                                }
                            ]
                        }
                    ]
                },
                {
                    layout: {
                        type: "table",
                        columns: 2
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hidden: true,
                                    name: "idIps"
                                },
                                {
                                    xtype: "textfield",
                                    fieldLabel: "Nombre de la institución donde fue atendido",
                                    labelWidth: 150,
                                    name: "nombreCompletoIps",
                                    readOnly: true,
                                    reference: "nombreCompletoIps",
                                    width: 700
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "button",
                                    componentReference: [
                                        "idIps",
                                        "nombreCompletoIps"
                                    ],
                                    handler: Coomuce.Util.buscarIps,
                                    iconCls: "x-fa fa-list-alt",
                                    reference: "botonBuscarIps",
                                    tooltip: "Lista de Ips",
                                    width: 30
                                }
                            ]
                        }
                    ]
                },
                //{
                //    xtype: "combo",
                //    allowBlank: false,
                //    bind: {
                //        store: "{getIps}"
                //    },
                //    displayField: "nombreCompletoIps",
                //    fieldLabel: "Nombre de la institución donde fue atendido",
                //    hideTrigger: true,
                //    name: "idIps",
                //    queryMode: "local",
                //    valueField: "idIps"
                //},
                {
                    xtype: "label",
                    html: "Su opinión es muy importante para nosotros porque nos permite organizar nuestros servicios para poder satisfacer sus expectativas por esto le solicitamos que responda con sinceridad marcando con una (X) solo una respuesta por pregunta"
                },
                {
                    bodyPadding: 10,
                    border: true,
                    height: 400,
                    id: "ContenidoEncuestaIps",
                    scrollable: true
                },
                {
                    xtype: "textarea",
                    fieldLabel: "Observaciones",
                    name: "observacionEncuestaIps"
                }
            ]
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.CondicionDiscapacidadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-condiciondiscapacidad',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-CondicionDiscapacidad-Principal').getStore();
        var nextId = storeGrid.max("idCondicionDiscapacidad");
        var row = [
                {
                    idCondicionDiscapacidad: (nextId == undefined ? 1 : nextId + 1),
                    codigoCondicionDiscapacidad: "",
                    nombreCondicionDiscapacidad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-CondicionDiscapacidad-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceCondicionDiscapacidad");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-CondicionDiscapacidad-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "CondicionDiscapacidadCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-CondicionDiscapacidad-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.CondicionDiscapacidadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-condiciondiscapacidad',
    stores: {
        getCondicionDiscapacidad: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.CondicionDiscapacidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCondicionDiscapacidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.CondicionDiscapacidad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.CondicionDiscapacidadController",
        "CoomuceMod.view.Parametros.ActualizacionBd.CondicionDiscapacidadModel"
    ],
    controller: "parametros-actualizacionbd-condiciondiscapacidad",
    viewModel: {
        type: "parametros-actualizacionbd-condiciondiscapacidad"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getCondicionDiscapacidad}'
            },
            columns: [
                {
                    dataIndex: "idCondicionDiscapacidad",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoCondicionDiscapacidad",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreCondicionDiscapacidad",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-CondicionDiscapacidad-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.DeclaracionAutorizacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-declaracionautorizacion',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-DeclaracionAutorizacion-Principal').getStore();
        var nextId = storeGrid.max("idDeclaracionAutorizacion");
        var row = [
                {
                    idDeclaracionAutorizacion: (nextId == undefined ? 1 : nextId + 1),
                    codigoDeclaracionAutorizacion: "",
                    descripcionDeclaracionAutorizacion: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-DeclaracionAutorizacion-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceDeclaracionAutorizacion");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-DeclaracionAutorizacion-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "DeclaracionAutorizacionCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-DeclaracionAutorizacion-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.DeclaracionAutorizacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-declaracionautorizacion',
    stores: {
        getDeclaracionAutorizacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.DeclaracionAutorizacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetDeclaracionAutorizacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.DeclaracionAutorizacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.DeclaracionAutorizacionController",
        "CoomuceMod.view.Parametros.ActualizacionBd.DeclaracionAutorizacionModel"
    ],
    controller: "parametros-actualizacionbd-declaracionautorizacion",
    viewModel: {
        type: "parametros-actualizacionbd-declaracionautorizacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getDeclaracionAutorizacion}'
            },
            columns: [
                {
                    dataIndex: "idDeclaracionAutorizacion",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoDeclaracionAutorizacion",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionDeclaracionAutorizacion",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-DeclaracionAutorizacion-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.GrupoPoblacionalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-grupopoblacional',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-GrupoPoblacional-Principal').getStore();
        var nextId = storeGrid.max("idGrupoPoblacional");
        var row = [
                {
                    idGrupoPoblacional: (nextId == undefined ? 1 : nextId + 1),
                    codigoGrupoPoblacional: "",
                    nombreGrupoPoblacional: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-GrupoPoblacional-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceGrupoPoblacional");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-GrupoPoblacional-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "GrupoPoblacionalCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-GrupoPoblacional-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.GrupoPoblacionalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-grupopoblacional',
    stores: {
        getGrupoPoblacional: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.GrupoPoblacional",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGrupoPoblacionalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.GrupoPoblacional", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.GrupoPoblacionalController",
        "CoomuceMod.view.Parametros.ActualizacionBd.GrupoPoblacionalModel"
    ],
    controller: "parametros-actualizacionbd-grupopoblacional",
    viewModel: {
        type: "parametros-actualizacionbd-grupopoblacional"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getGrupoPoblacional}'
            },
            columns: [
                {
                    dataIndex: "idGrupoPoblacional",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoGrupoPoblacional",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreGrupoPoblacional",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-GrupoPoblacional-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.MotivoTrasladoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-motivotraslado',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-MotivoTraslado-Principal').getStore();
        var nextId = storeGrid.max("idMotivoTraslado");
        var row = [
                {
                    idMotivoTraslado: (nextId == undefined ? 1 : nextId + 1),
                    codigoMotivoTraslado: "",
                    descripcionMotivoTraslado: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-MotivoTraslado-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceMotivoTraslado");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-MotivoTraslado-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "MotivoTrasladoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-MotivoTraslado-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.MotivoTrasladoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-motivotraslado',
    stores: {
        getMotivoTraslado: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.MotivoTraslado",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoTrasladoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.MotivoTraslado", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.MotivoTrasladoController",
        "CoomuceMod.view.Parametros.ActualizacionBd.MotivoTrasladoModel"
    ],
    controller: "parametros-actualizacionbd-motivotraslado",
    viewModel: {
        type: "parametros-actualizacionbd-motivotraslado"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getMotivoTraslado}'
            },
            columns: [
                {
                    dataIndex: "idMotivoTraslado",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoMotivoTraslado",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionMotivoTraslado",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-MotivoTraslado-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipoafiliacion',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoAfiliacion-Principal').getStore();
        var nextId = storeGrid.max("idTipoAfiliacion");
        var row = [
                {
                    idTipoAfiliacion: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoAfiliacion: "",
                    nombreTipoAfiliacion: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoAfiliacion-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoAfiliacion");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoAfiliacion-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoAfiliacionCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoAfiliacion-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipoafiliacion',
    stores: {
        getTipoAfiliacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoAfiliacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliacionController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliacionModel"
    ],
    controller: "parametros-actualizacionbd-tipoafiliacion",
    viewModel: {
        type: "parametros-actualizacionbd-tipoafiliacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoAfiliacion}'
            },
            columns: [
                {
                    dataIndex: "idTipoAfiliacion",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoAfiliacion",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoAfiliacion",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoAfiliacion-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliadoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipoafiliado',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoAfiliado-Principal').getStore();
        var nextId = storeGrid.max("idTipoAfiliado");
        var row = [
                {
                    idTipoAfiliado: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoAfiliado: "",
                    nombreTipoAfiliado: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoAfiliado-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoAfiliado");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoAfiliado-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoAfiliadoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoAfiliado-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliadoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipoafiliado',
    stores: {
        getTipoAfiliado: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoAfiliado",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoAfiliadoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliado", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliadoController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoAfiliadoModel"
    ],
    controller: "parametros-actualizacionbd-tipoafiliado",
    viewModel: {
        type: "parametros-actualizacionbd-tipoafiliado"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoAfiliado}'
            },
            columns: [
                {
                    dataIndex: "idTipoAfiliado",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoAfiliado",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoAfiliado",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoAfiliado-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoCotizanteController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipocotizante',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoCotizante-Principal').getStore();
        var nextId = storeGrid.max("idTipoCotizante");
        var row = [
                {
                    idTipoCotizante: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoCotizante: "",
                    nombreTipoCotizante: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoCotizante-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoCotizante");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoCotizante-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoCotizanteCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoCotizante-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoCotizanteModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipocotizante',
    stores: {
        getTipoCotizante: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoCotizante",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoCotizanteAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoCotizante", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoCotizanteController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoCotizanteModel"
    ],
    controller: "parametros-actualizacionbd-tipocotizante",
    viewModel: {
        type: "parametros-actualizacionbd-tipocotizante"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoCotizante}'
            },
            columns: [
                {
                    dataIndex: "idTipoCotizante",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoCotizante",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoCotizante",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoCotizante-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoDiscapacidadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipodiscapacidad',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoDiscapacidad-Principal').getStore();
        var nextId = storeGrid.max("idTipoDiscapacidad");
        var row = [
                {
                    idTipoDiscapacidad: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoDiscapacidad: "",
                    nombreTipoDiscapacidad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoDiscapacidad-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoDiscapacidad");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoDiscapacidad-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoDiscapacidadCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoDiscapacidad-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoDiscapacidadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipodiscapacidad',
    stores: {
        getTipoDiscapacidad: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoDiscapacidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoDiscapacidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoDiscapacidad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoDiscapacidadController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoDiscapacidadModel"
    ],
    controller: "parametros-actualizacionbd-tipodiscapacidad",
    viewModel: {
        type: "parametros-actualizacionbd-tipodiscapacidad"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoDiscapacidad}'
            },
            columns: [
                {
                    dataIndex: "idTipoDiscapacidad",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoDiscapacidad",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoDiscapacidad",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoDiscapacidad-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoEtniaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipoetnia',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoEtnia-Principal').getStore();
        var nextId = storeGrid.max("idTipoEtnia");
        var row = [
                {
                    idTipoEtnia: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoEtnia: "",
                    nombreTipoEtnia: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoEtnia-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoEtnia");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoEtnia-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoEtniaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoEtnia-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoEtniaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipoetnia',
    stores: {
        getTipoEtnia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoEtnia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoEtniaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoEtnia", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoEtniaController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoEtniaModel"
    ],
    controller: "parametros-actualizacionbd-tipoetnia",
    viewModel: {
        type: "parametros-actualizacionbd-tipoetnia"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoEtnia}'
            },
            columns: [
                {
                    dataIndex: "idTipoEtnia",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoEtnia",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoEtnia",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoEtnia-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoNovedadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tiponovedad',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoNovedad-Principal').getStore();
        var nextId = storeGrid.max("idTipoNovedad");
        var row = [
                {
                    idTipoNovedad: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoNovedad: "",
                    nombreTipoNovedad: "",
                    tipoValorCampoTipoNovedad: "",
                    valorCampoTipoNovedad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoNovedad-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoNovedad");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoNovedad-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoNovedadCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoNovedad-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoNovedadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tiponovedad',
    stores: {
        getTipoNovedad: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoNovedad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoNovedadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getTipoValorCampoNovedad: {
            fields: [
                "nombre"
            ],
            data: [
                [
                    "Texto"
                ],
                [
                    "Lista"
                ]
            ]
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoNovedad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoNovedadController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoNovedadModel"
    ],
    controller: "parametros-actualizacionbd-tiponovedad",
    viewModel: {
        type: "parametros-actualizacionbd-tiponovedad"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoNovedad}'
            },
            columns: [
                {
                    dataIndex: "idTipoNovedad",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoNovedad",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoNovedad",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "tipoValorCampoTipoNovedad",
                    header: "Tipo Valor Campo",
                    width: 100,
                    editor: {
                        xtype: "combo",
                        allowBlank: true,
                        bind: {
                            store: "{getTipoValorCampoNovedad}"
                        },
                        displayField: "nombre",
                        editable: false,
                        queryMode: "local",
                        valueField: "nombre"
                    }
                },
                {
                    dataIndex: "valorCampoTipoNovedad",
                    header: "Valor Campo",
                    width: 200,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoNovedad-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoParentescoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipoparentesco',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoParentesco-Principal').getStore();
        var nextId = storeGrid.max("idTipoParentesco");
        var row = [
                {
                    idTipoParentesco: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoParentesco: "",
                    nombreTipoParentesco: "",
                    descripcionTipoParentesco: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoParentesco-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoParentesco");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoParentesco-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoParentescoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoParentesco-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoParentescoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipoparentesco',
    stores: {
        getTipoParentesco: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoParentesco",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoParentescoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoParentesco", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoParentescoController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoParentescoModel"
    ],
    controller: "parametros-actualizacionbd-tipoparentesco",
    viewModel: {
        type: "parametros-actualizacionbd-tipoparentesco"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoParentesco}'
            },
            columns: [
                {
                    dataIndex: "idTipoParentesco",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoParentesco",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoParentesco",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionTipoParentesco",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: true
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoParentesco-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoRegimenController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tiporegimen',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoRegimen-Principal').getStore();
        var nextId = storeGrid.max("idTipoRegimen");
        var row = [
                {
                    idTipoRegimen: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoRegimen: "",
                    nombreTipoRegimen: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoRegimen-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoRegimen");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoRegimen-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoRegimenCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoRegimen-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoRegimenModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tiporegimen',
    stores: {
        getTipoRegimen: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoRegimen",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoRegimenAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoRegimen", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoRegimenController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoRegimenModel"
    ],
    controller: "parametros-actualizacionbd-tiporegimen",
    viewModel: {
        type: "parametros-actualizacionbd-tiporegimen"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoRegimen}'
            },
            columns: [
                {
                    dataIndex: "idTipoRegimen",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoRegimen",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoRegimen",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoRegimen-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoTramiteController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-actualizacionbd-tipotramite',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoTramite-Principal').getStore();
        var nextId = storeGrid.max("idTipoTramite");
        var row = [
                {
                    idTipoTramite: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoTramite: "",
                    nombreTipoTramite: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoTramite-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoTramite");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoTramite-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoTramiteCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoTramite-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ActualizacionBd.TipoTramiteModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-actualizacionbd-tipotramite',
    stores: {
        getTipoTramite: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ActualizacionBd.TipoTramite",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoTramiteAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ActualizacionBd.TipoTramite", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoTramiteController",
        "CoomuceMod.view.Parametros.ActualizacionBd.TipoTramiteModel"
    ],
    controller: "parametros-actualizacionbd-tipotramite",
    viewModel: {
        type: "parametros-actualizacionbd-tipotramite"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoTramite}'
            },
            columns: [
                {
                    dataIndex: "idTipoTramite",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoTramite",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoTramite",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoTramite-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalGestanteController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-ciclovitalgestante',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-CicloVitalGestante-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceCicloVitalGestante");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-CicloVitalGestante-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    nuevos.push(ob.data);
                });
                var conf = {
                        url: Coomuce.Url.Parametros + "PreguntasCicloVitalGestanteCUD",
                        data: {
                            nuevos: nuevos
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-CicloVitalGestante-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.loadCombo) {
            var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
            var store = subFactorRiesgo.getStore();
            store.load({
                params: {
                    idFactorRiesgo: record.get("idFactorRiesgo")
                }
            });
        } else {
            var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo').getStore();
            storeGrid.load({
                params: {
                    idSubFactorRiesgo: record.get("idSubFactorRiesgo")
                }
            });
        }
    },
    onBotonAgregarItemListaClick: function() {
        var me = this;
        var storeGrid = Ext.getCmp('Grid-CicloVitalGestante-Principal').getStore();
        var nextId = storeGrid.max("idCicloVitalGestante");
        var factorRiesgo = me.lookupReference("factorRiesgo");
        var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
        var grid = Ext.getCmp("Grid-PreguntasSubFactorRiesgo");
        var selection = grid.getSelectionModel().getSelection();
        var rows = [];
        Ext.each(selection, function(item, index, allItems) {
            nextId = (nextId == undefined ? 1 : nextId + 1);
            rows.push({
                idCicloVitalGestante: nextId,
                compFactorRiesgo: factorRiesgo.getRawValue(),
                compSubFactorRiesgo: subFactorRiesgo.getRawValue(),
                idPreguntasSubFactorRiesgo: item.data.idPreguntasSubFactorRiesgo,
                compPreguntasSubFactorRiesgo: item.data.compPreguntasSubFactorRiesgo
            });
        });
        storeGrid.add(rows);
        grid.getSelectionModel().deselectAll();
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalGestanteModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-ciclovitalgestante',
    stores: {
        getCicloVitalGestante: {
            autoLoad: true,
            fields: [
                {
                    name: "idCicloVitalGestante",
                    type: "int"
                },
                {
                    name: "compFactorRiesgo",
                    type: "string"
                },
                {
                    name: "compSubFactorRiesgo",
                    type: "string"
                },
                {
                    name: "idPreguntasSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: "compPreguntasSubFactorRiesgo",
                    type: "string"
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasCicloVitalGestanteAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getFactorRiesgo: {
            autoLoad: true,
            fields: [
                {
                    name: "idFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'nombreFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoFactorRiesgo") + ") " + record.get("nombreFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getSubFactorRiesgo: {
            autoLoad: false,
            fields: [
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'nombreSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compSubFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoSubFactorRiesgo") + ") " + record.get("nombreSubFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasSubFactorRiesgo: {
            autoLoad: false,
            fields: [
                {
                    name: "idPreguntasSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoPreguntasSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'descripcionPreguntasSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compPreguntasSubFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoPreguntasSubFactorRiesgo") + ") " + record.get("descripcionPreguntasSubFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasCicloVital: {
            autoLoad: false,
            fields: [
                {
                    name: "idCicloVital",
                    type: "int"
                },
                {
                    name: 'compCicloVital',
                    type: 'string'
                },
                {
                    name: "idTipoSexo",
                    type: "int"
                },
                {
                    name: 'compTipoSexo',
                    type: 'string'
                },
                {
                    name: "idPreguntasSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'compPreguntasSubFactorRiesgo',
                    type: 'string'
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasCicloVitalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalGestante", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalGestanteController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalGestanteModel"
    ],
    controller: "parametros-caracterizacionpoblacional-ciclovitalgestante",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-ciclovitalgestante"
    },
    layout: "border",
    items: [
        {
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getFactorRiesgo}"
                    },
                    displayField: "compFactorRiesgo",
                    editable: false,
                    fieldLabel: "Factor de Riesgo",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    loadCombo: true,
                    queryMode: "local",
                    reference: "factorRiesgo",
                    valueField: "idFactorRiesgo",
                    width: 350
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getSubFactorRiesgo}"
                    },
                    displayField: "compSubFactorRiesgo",
                    editable: false,
                    fieldLabel: "Sub-Factor de Riesgo",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    loadCombo: false,
                    queryMode: "local",
                    reference: "subFactorRiesgo",
                    valueField: "idSubFactorRiesgo",
                    width: 350
                },
                {
                    xtype: "grid",
                    bind: {
                        store: '{getPreguntasSubFactorRiesgo}'
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "idPreguntasSubFactorRiesgo",
                            header: "Id",
                            hidden: true
                        },
                        {
                            dataIndex: "idSubFactorRiesgo",
                            header: "Id Sub Factor",
                            hidden: true
                        },
                        {
                            dataIndex: "compPreguntasSubFactorRiesgo",
                            header: "Descripción",
                            width: 400
                        }
                    ],
                    columnLines: true,
                    height: 450,
                    id: "Grid-PreguntasSubFactorRiesgo",
                    loadMask: true,
                    selModel: {
                        type: 'checkboxmodel',
                        checkOnly: true
                    },
                    //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                    sortableColumns: false
                }
            ],
            rbar: {
                items: [
                    {
                        handler: "onBotonAgregarItemListaClick",
                        iconCls: "x-fa fa-arrow-circle-right",
                        tooltip: "Agregar preguntas seleccionadas a la lista."
                    }
                ],
                layout: {
                    pack: "center"
                },
                ui: "footer"
            },
            region: "west",
            width: 500
        },
        {
            xtype: "grid",
            bind: {
                store: '{getCicloVitalGestante}'
            },
            border: true,
            columns: [
                {
                    dataIndex: "idCicloVitalGestante",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "compFactorRiesgo",
                    header: "Factor Riesgo",
                    width: 200
                },
                {
                    dataIndex: "compSubFactorRiesgo",
                    header: "Sub Factor Riesgo",
                    width: 300
                },
                {
                    dataIndex: "idPreguntasSubFactorRiesgo",
                    header: "Id Pregunta",
                    hidden: true
                },
                {
                    dataIndex: "compPreguntasSubFactorRiesgo",
                    header: "Pregunta",
                    width: 400
                }
            ],
            columnLines: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    ui: 'footer',
                    layout: {
                        pack: 'left'
                    },
                    items: [
                        {
                            minWidth: 80,
                            text: 'Guardar',
                            handler: 'onBotonGuardarClick'
                        },
                        {
                            minWidth: 80,
                            text: 'Cancelar',
                            handler: 'onBotonCancelarClick'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'footer',
                    items: [
                        {
                            text: "Eliminar",
                            iconCls: "x-fa fa-eraser",
                            handler: "onBotonEliminarClick",
                            reference: 'eliminarButton',
                            disabled: true
                        }
                    ]
                }
            ],
            id: "Grid-CicloVitalGestante-Principal",
            loadMask: true,
            region: "center",
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});
//{
//    bbar: {
//        items: [
//            { text: "Agregar selecciones", handler: "onBotonAgregarSeleccionClick" }
//        ]
//    },
//    items: [
//        {
//            bodyPadding: 10,
//            border: true,
//            defaults: { anchor: "90%" },
//            items: [
//                {
//                    xtype: "combo",
//                    bind: { store: "{getCicloVital}" },
//                    displayField: "compCicloVital",
//                    editable: false,
//                    fieldLabel: "Ciclo Vital",
//                    gridCiclo: true,
//                    listeners: {
//                        select: "onSelectCombo"
//                    },
//                    queryMode: "local",
//                    reference: "idCicloVital",
//                    valueField: "idCicloVital"
//                },
//                {
//                    xtype: "combo",
//                    bind: { store: "{getTipoSexo}" },
//                    displayField: "compTipoSexo",
//                    editable: false,
//                    fieldLabel: "Sexo",
//                    gridCiclo: true,
//                    listeners: {
//                        select: "onSelectCombo"
//                    },
//                    queryMode: "local",
//                    reference: "idTipoSexo",
//                    valueField: "idTipoSexo"
//                }
//            ],
//            region: "west",
//            width: 350
//        },
//    ],
//    layout: "border",
//    region: "center"
//},
//{
//    xtype: "grid",
//    bind: {
//        store: '{getPreguntasCicloVital}'
//    },
//    border: true,
//    columns: [
//        { dataIndex: "idCicloVital", header: "Id Ciclo", hidden: true },
//        { dataIndex: "compCicloVital", header: "Ciclo Vital", width: 200 },
//        { dataIndex: "idTipoSexo", header: "Id Sexo", hidden: true },
//        { dataIndex: "compTipoSexo", header: "Sexo", width: 150 },
//        { dataIndex: "idPreguntasSubFactorRiesgo", header: "Id Pregunta", hidden: true },
//        { dataIndex: "compPreguntasSubFactorRiesgo", header: "Pregunta", width: 450 }
//    ],
//    columnLines: true,
//    dockedItems: [
//        {
//            xtype: 'toolbar',
//            dock: 'bottom',
//            ui: 'footer',
//            layout: {
//                pack: 'left'
//            },
//            items: [
//                { minWidth: 80, text: 'Guardar', handler: 'onBotonGuardarClick' },
//                { minWidth: 80, text: 'Cancelar', handler: 'onBotonCancelarClick' }
//            ]
//        },
//        {
//            xtype: 'toolbar',
//            dock: 'top',
//            ui: 'footer',
//            items: [
//                { text: "Eliminar", iconCls: "x-fa fa-eraser", handler: "onBotonEliminarClick", reference: 'eliminarButton', disabled: true }
//            ]
//        }
//    ],
//    height: 400,
//    id: "Grid-PreguntasCicloVital-Principal",
//    loadMask: true,
//    region: "south",
//    selModel: {
//        type: 'checkboxmodel',
//        checkOnly: true, //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
//        listeners: {
//            selectionchange: 'onGridSelectionChange'
//        }
//    },
//    sortableColumns: false
//}

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-ciclovital',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-CicloVital-Principal').getStore();
        var nextId = storeGrid.max("idCicloVital");
        var row = [
                {
                    idCicloVital: (nextId == undefined ? 1 : nextId + 1),
                    edadMinCicloVital: 0,
                    edadMaxCicloVital: 0
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-CicloVital-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceCicloVital");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-CicloVital-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "CicloVitalCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-CicloVital-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-ciclovital',
    stores: {
        getCicloVital: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CicloVital",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCicloVitalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVital", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CicloVitalModel"
    ],
    controller: "parametros-caracterizacionpoblacional-ciclovital",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-ciclovital"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getCicloVital}'
            },
            columns: [
                {
                    dataIndex: "idCicloVital",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "edadMinCicloVital",
                    header: "Edad Min.",
                    width: 150,
                    editor: {
                        xtype: "numberfield",
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "edadMaxCicloVital",
                    header: "Edad Max.",
                    width: 150,
                    editor: {
                        xtype: "numberfield",
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-CicloVital-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionessocioambientales-tipoanimal',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoAnimal-Principal').getStore();
        var nextId = storeGrid.max("idTipoAnimal");
        var row = [
                {
                    idTipoAnimal: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoAnimal: "",
                    nombreTipoAnimal: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoAnimal-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoAnimal");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoAnimal-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoAnimalCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoAnimal-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionessocioambientales-tipoanimal',
    stores: {
        getTipoAnimal: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimal",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoAnimalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimal", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimalController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesSocioambientales.TipoAnimalModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionessocioambientales-tipoanimal",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionessocioambientales-tipoanimal"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoAnimal}'
            },
            columns: [
                {
                    dataIndex: "idTipoAnimal",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoAnimal",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoAnimal",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoAnimal-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionViviendaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-condicionvivienda',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-CondicionVivienda-Principal').getStore();
        var nextId = storeGrid.max("idCondicionVivienda");
        var row = [
                {
                    idCondicionVivienda: (nextId == undefined ? 1 : nextId + 1),
                    nombreCondicionVivienda: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-CondicionVivienda-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceCondicionVivienda");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-CondicionVivienda-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "CondicionViviendaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-CondicionVivienda-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionViviendaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-condicionvivienda',
    stores: {
        getCondicionVivienda: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionVivienda",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCondicionViviendaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionVivienda", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionViviendaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.CondicionViviendaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-condicionvivienda",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-condicionvivienda"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getCondicionVivienda}'
            },
            columns: [
                {
                    dataIndex: "idCondicionVivienda",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "nombreCondicionVivienda",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-CondicionVivienda-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasuraController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-disposicionbasura',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-DisposicionBasura-Principal').getStore();
        var nextId = storeGrid.max("idDisposicionBasura");
        var row = [
                {
                    idDisposicionBasura: (nextId == undefined ? 1 : nextId + 1),
                    codigoDisposicionBasura: "",
                    nombreDisposicionBasura: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-DisposicionBasura-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceDisposicionBasura");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-DisposicionBasura-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "DisposicionBasuraCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-DisposicionBasura-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasuraModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-disposicionbasura',
    stores: {
        getDisposicionBasura: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasura",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetDisposicionBasuraAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasura", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasuraController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionBasuraModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-disposicionbasura",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-disposicionbasura"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getDisposicionBasura}'
            },
            columns: [
                {
                    dataIndex: "idDisposicionBasura",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoDisposicionBasura",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreDisposicionBasura",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-DisposicionBasura-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcretaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-disposicionexcreta',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-DisposicionExcreta-Principal').getStore();
        var nextId = storeGrid.max("idDisposicionExcreta");
        var row = [
                {
                    idDisposicionExcreta: (nextId == undefined ? 1 : nextId + 1),
                    codigoDisposicionExcreta: "",
                    nombreDisposicionExcreta: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-DisposicionExcreta-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceDisposicionExcretas");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-DisposicionExcreta-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "DisposicionExcretaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-DisposicionExcreta-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcretaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-disposicionexcreta',
    stores: {
        getDisposicionExcreta: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcreta",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetDisposicionExcretaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcreta", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcretaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.DisposicionExcretaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-disposicionexcreta",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-disposicionexcreta"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getDisposicionExcreta}'
            },
            columns: [
                {
                    dataIndex: "idDisposicionExcreta",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoDisposicionExcreta",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreDisposicionExcreta",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-DisposicionExcreta-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TenenciaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-tenencia',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Tenencia-Principal').getStore();
        var nextId = storeGrid.max("idTenencia");
        var row = [
                {
                    idTenencia: (nextId == undefined ? 1 : nextId + 1),
                    codigoTenencia: "",
                    nombreTenencia: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Tenencia-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTenencia");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Tenencia-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TenenciaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Tenencia-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TenenciaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-tenencia',
    stores: {
        getTenencia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.Tenencia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTenenciaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.Tenencia", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TenenciaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TenenciaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-tenencia",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-tenencia"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTenencia}'
            },
            columns: [
                {
                    dataIndex: "idTenencia",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTenencia",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTenencia",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Tenencia-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustibleController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-tipocombustible',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoCombustible-Principal').getStore();
        var nextId = storeGrid.max("idTipoCombustible");
        var row = [
                {
                    idTipoCombustible: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoCombustible: "",
                    nombreTipoCombustible: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoCombustible-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoCombustible");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoCombustible-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoCombustibleCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoCombustible-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustibleModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-tipocombustible',
    stores: {
        getTipoCombustible: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustible",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoCombustibleAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustible", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustibleController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoCombustibleModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-tipocombustible",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-tipocombustible"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoCombustible}'
            },
            columns: [
                {
                    dataIndex: "idTipoCombustible",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoCombustible",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoCombustible",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoCombustible-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoViviendaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-tipovivienda',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoVivienda-Principal').getStore();
        var nextId = storeGrid.max("idTipoVivienda");
        var row = [
                {
                    idTipoVivienda: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoVivienda: "",
                    nombreTipoVivienda: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoVivienda-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoVivienda");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoVivienda-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoViviendaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoVivienda-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoViviendaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-tipovivienda',
    stores: {
        getTipoVivienda: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoVivienda",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoViviendaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoVivienda", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoViviendaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TipoViviendaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-tipovivienda",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-tipovivienda"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoVivienda}'
            },
            columns: [
                {
                    dataIndex: "idTipoVivienda",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoVivienda",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoVivienda",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoVivienda-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAguaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-condicionesvivienda-tratamientoagua',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TratamientoAgua-Principal').getStore();
        var nextId = storeGrid.max("idTratamientoAgua");
        var row = [
                {
                    idTratamientoAgua: (nextId == undefined ? 1 : nextId + 1),
                    codigoTratamientoAgua: "",
                    nombreTratamientoAgua: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TratamientoAgua-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTratamientoAgua");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TratamientoAgua-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TratamientoAguaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TratamientoAgua-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAguaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-condicionesvivienda-tratamientoagua',
    stores: {
        getTratamientoAgua: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAgua",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTratamientoAguaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAgua", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAguaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.CondicionesVivienda.TratamientoAguaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-condicionesvivienda-tratamientoagua",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-condicionesvivienda-tratamientoagua"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTratamientoAgua}'
            },
            columns: [
                {
                    dataIndex: "idTratamientoAgua",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTratamientoAgua",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTratamientoAgua",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TratamientoAgua-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.FactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-factorriesgo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-FactorRiesgo-Principal').getStore();
        var nextId = storeGrid.max("idFactorRiesgo");
        var row = [
                {
                    idFactorRiesgo: (nextId == undefined ? 1 : nextId + 1),
                    codigoFactorRiesgo: "",
                    nombreFactorRiesgo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-FactorRiesgo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceFactorRiesgo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-FactorRiesgo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "FactorRiesgoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-FactorRiesgo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.FactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-factorriesgo',
    stores: {
        getFactorRiesgo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.FactorRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.FactorRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.FactorRiesgoController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.FactorRiesgoModel"
    ],
    controller: "parametros-caracterizacionpoblacional-factorriesgo",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-factorriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getFactorRiesgo}'
            },
            columns: [
                {
                    dataIndex: "idFactorRiesgo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoFactorRiesgo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreFactorRiesgo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-FactorRiesgo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.NivelEducativoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-niveleducativo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-NivelEducativo-Principal').getStore();
        var nextId = storeGrid.max("idNivelEducativo");
        var row = [
                {
                    idNivelEducativo: (nextId == undefined ? 1 : nextId + 1),
                    codigoNivelEducativo: "",
                    nombreNivelEducativo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-NivelEducativo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceNivelEducativo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-NivelEducativo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "NivelEducativoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-NivelEducativo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.NivelEducativoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-niveleducativo',
    stores: {
        getNivelEducativo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.NivelEducativo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetNivelEducativoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.NivelEducativo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.NivelEducativoController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.NivelEducativoModel"
    ],
    controller: "parametros-caracterizacionpoblacional-niveleducativo",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-niveleducativo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getNivelEducativo}'
            },
            columns: [
                {
                    dataIndex: "idNivelEducativo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoNivelEducativo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreNivelEducativo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-NivelEducativo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasCicloVitalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-preguntasciclovital',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-PreguntasCicloVital-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomucePreguntasCicloVital");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var ciclo = me.lookupReference("idCicloVital");
                var sexo = me.lookupReference("idTipoSexo");
                var grid = Ext.getCmp('Grid-PreguntasCicloVital-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    nuevos.push(ob.data);
                });
                var conf = {
                        url: Coomuce.Url.Parametros + "PreguntasCicloVitalCUD",
                        data: {
                            idCicloVital: ciclo.getValue(),
                            idTipoSexo: sexo.getValue(),
                            nuevos: nuevos
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-PreguntasCicloVital-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.loadCombo) {
            var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
            var store = subFactorRiesgo.getStore();
            store.load({
                params: {
                    idFactorRiesgo: record.get("idFactorRiesgo")
                }
            });
        } else {
            if (combo.gridCiclo) {
                var ciclo = me.lookupReference("idCicloVital");
                var sexo = me.lookupReference("idTipoSexo");
                var storeGrid = Ext.getCmp('Grid-PreguntasCicloVital-Principal').getStore();
                storeGrid.load({
                    params: {
                        idCicloVital: ciclo.getValue(),
                        idTipoSexo: sexo.getValue()
                    }
                });
            } else {
                var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo').getStore();
                storeGrid.load({
                    params: {
                        idSubFactorRiesgo: record.get("idSubFactorRiesgo")
                    }
                });
            }
        }
    },
    onBotonAgregarSeleccionClick: function() {
        var me = this;
        var ciclo = me.lookupReference("idCicloVital");
        var sexo = me.lookupReference("idTipoSexo");
        var seleccion = Ext.getCmp('Grid-PreguntasSubFactorRiesgo').selModel.getSelection();
        var preg = [];
        Ext.each(seleccion, function(item, index, allItems) {
            preg.push({
                idCicloVital: ciclo.getValue(),
                compCicloVital: ciclo.getRawValue(),
                idTipoSexo: sexo.getValue(),
                compTipoSexo: sexo.getRawValue(),
                idPreguntasSubFactorRiesgo: item.data.idPreguntasSubFactorRiesgo,
                compPreguntasSubFactorRiesgo: item.data.compPreguntasSubFactorRiesgo
            });
        });
        Ext.getCmp('Grid-PreguntasCicloVital-Principal').getStore().insert(0, preg);
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasCicloVitalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-preguntasciclovital',
    stores: {
        getTipoSexo: {
            autoLoad: true,
            fields: [
                {
                    name: "idTipoSexo",
                    type: "int"
                },
                {
                    name: 'codigoTipoSexo',
                    type: 'string'
                },
                {
                    name: 'nombreTipoSexo',
                    type: 'string'
                },
                {
                    name: "compTipoSexo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoTipoSexo") + ") " + record.get("nombreTipoSexo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoSexoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCicloVital: {
            autoLoad: true,
            fields: [
                {
                    name: "idCicloVital",
                    type: "int"
                },
                {
                    name: 'edadMinCicloVital',
                    type: 'int'
                },
                {
                    name: 'edadMaxCicloVital',
                    type: 'int'
                },
                {
                    name: "compCicloVital",
                    convert: function(v, record) {
                        return record.get("edadMinCicloVital") + " - " + record.get("edadMaxCicloVital");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetCicloVitalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getFactorRiesgo: {
            autoLoad: true,
            fields: [
                {
                    name: "idFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'nombreFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoFactorRiesgo") + ") " + record.get("nombreFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getSubFactorRiesgo: {
            autoLoad: false,
            fields: [
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'nombreSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compSubFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoSubFactorRiesgo") + ") " + record.get("nombreSubFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasSubFactorRiesgo: {
            autoLoad: false,
            fields: [
                {
                    name: "idPreguntasSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: "idSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'codigoPreguntasSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: 'descripcionPreguntasSubFactorRiesgo',
                    type: 'string'
                },
                {
                    name: "compPreguntasSubFactorRiesgo",
                    convert: function(v, record) {
                        return "(" + record.get("codigoPreguntasSubFactorRiesgo") + ") " + record.get("descripcionPreguntasSubFactorRiesgo");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasCicloVital: {
            autoLoad: false,
            fields: [
                {
                    name: "idCicloVital",
                    type: "int"
                },
                {
                    name: 'compCicloVital',
                    type: 'string'
                },
                {
                    name: "idTipoSexo",
                    type: "int"
                },
                {
                    name: 'compTipoSexo',
                    type: 'string'
                },
                {
                    name: "idPreguntasSubFactorRiesgo",
                    type: "int"
                },
                {
                    name: 'compPreguntasSubFactorRiesgo',
                    type: 'string'
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasCicloVitalAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasCicloVital", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasCicloVitalController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasCicloVitalModel"
    ],
    controller: "parametros-caracterizacionpoblacional-preguntasciclovital",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-preguntasciclovital"
    },
    layout: "border",
    items: [
        {
            bbar: {
                items: [
                    {
                        text: "Agregar selecciones",
                        handler: "onBotonAgregarSeleccionClick"
                    }
                ]
            },
            items: [
                {
                    bodyPadding: 10,
                    border: true,
                    defaults: {
                        anchor: "90%"
                    },
                    items: [
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getCicloVital}"
                            },
                            displayField: "compCicloVital",
                            editable: false,
                            fieldLabel: "Ciclo Vital",
                            gridCiclo: true,
                            listeners: {
                                select: "onSelectCombo"
                            },
                            queryMode: "local",
                            reference: "idCicloVital",
                            valueField: "idCicloVital"
                        },
                        {
                            xtype: "combo",
                            bind: {
                                store: "{getTipoSexo}"
                            },
                            displayField: "compTipoSexo",
                            editable: false,
                            fieldLabel: "Sexo",
                            gridCiclo: true,
                            listeners: {
                                select: "onSelectCombo"
                            },
                            queryMode: "local",
                            reference: "idTipoSexo",
                            valueField: "idTipoSexo"
                        }
                    ],
                    region: "west",
                    width: 350
                },
                {
                    xtype: "grid",
                    bind: {
                        store: '{getPreguntasSubFactorRiesgo}'
                    },
                    border: true,
                    columns: [
                        {
                            dataIndex: "idPreguntasSubFactorRiesgo",
                            header: "Id",
                            hidden: true
                        },
                        {
                            dataIndex: "idSubFactorRiesgo",
                            header: "Id Sub Factor",
                            hidden: true
                        },
                        {
                            dataIndex: "codigoPreguntasSubFactorRiesgo",
                            header: "Código",
                            width: 100
                        },
                        {
                            dataIndex: "descripcionPreguntasSubFactorRiesgo",
                            header: "Descripción",
                            width: 400
                        }
                    ],
                    columnLines: true,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getFactorRiesgo}"
                                    },
                                    displayField: "compFactorRiesgo",
                                    editable: false,
                                    fieldLabel: "Factor de Riesgo",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    loadCombo: true,
                                    queryMode: "local",
                                    reference: "factorRiesgo",
                                    valueField: "idFactorRiesgo",
                                    width: 350
                                },
                                {
                                    xtype: "combo",
                                    bind: {
                                        store: "{getSubFactorRiesgo}"
                                    },
                                    displayField: "compSubFactorRiesgo",
                                    editable: false,
                                    fieldLabel: "Sub-Factor de Riesgo",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    loadCombo: false,
                                    queryMode: "local",
                                    reference: "subFactorRiesgo",
                                    valueField: "idSubFactorRiesgo",
                                    width: 350
                                }
                            ]
                        }
                    ],
                    id: "Grid-PreguntasSubFactorRiesgo",
                    loadMask: true,
                    region: "center",
                    selModel: {
                        type: 'checkboxmodel',
                        checkOnly: true
                    },
                    //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                    sortableColumns: false
                }
            ],
            layout: "border",
            region: "center"
        },
        {
            xtype: "grid",
            bind: {
                store: '{getPreguntasCicloVital}'
            },
            border: true,
            columns: [
                {
                    dataIndex: "idCicloVital",
                    header: "Id Ciclo",
                    hidden: true
                },
                {
                    dataIndex: "compCicloVital",
                    header: "Ciclo Vital",
                    width: 200
                },
                {
                    dataIndex: "idTipoSexo",
                    header: "Id Sexo",
                    hidden: true
                },
                {
                    dataIndex: "compTipoSexo",
                    header: "Sexo",
                    width: 150
                },
                {
                    dataIndex: "idPreguntasSubFactorRiesgo",
                    header: "Id Pregunta",
                    hidden: true
                },
                {
                    dataIndex: "compPreguntasSubFactorRiesgo",
                    header: "Pregunta",
                    width: 450
                }
            ],
            columnLines: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    ui: 'footer',
                    layout: {
                        pack: 'left'
                    },
                    items: [
                        {
                            minWidth: 80,
                            text: 'Guardar',
                            handler: 'onBotonGuardarClick'
                        },
                        {
                            minWidth: 80,
                            text: 'Cancelar',
                            handler: 'onBotonCancelarClick'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'footer',
                    items: [
                        {
                            text: "Eliminar",
                            iconCls: "x-fa fa-eraser",
                            handler: "onBotonEliminarClick",
                            reference: 'eliminarButton',
                            disabled: true
                        }
                    ]
                }
            ],
            height: 400,
            id: "Grid-PreguntasCicloVital-Principal",
            loadMask: true,
            region: "south",
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-preguntassubfactorriesgo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo-Principal').getStore();
        var max = storeGrid.max("idPreguntasSubFactorRiesgo");
        var nextId = storeGrid.identity;
        if (max > nextId)  {
            nextId = max;
        }
        
        var row = [
                {
                    idPreguntasSubFactorRiesgo: (nextId == undefined ? 1 : nextId + 1),
                    idSubFactorRiesgo: subFactorRiesgo.getValue(),
                    codigoPreguntasSubFactorRiesgo: "",
                    nombrePreguntasSubFactorRiesgo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomucePreguntasSubFactorRiesgo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "PreguntasSubFactorRiesgoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idSubFactorRiesgo: subFactorRiesgo.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.loadCombo) {
            var subFactorRiesgo = me.lookupReference("subFactorRiesgo");
            var store = subFactorRiesgo.getStore();
            store.load({
                params: {
                    idFactorRiesgo: record.get("idFactorRiesgo")
                }
            });
        } else {
            var storeGrid = Ext.getCmp('Grid-PreguntasSubFactorRiesgo-Principal').getStore();
            storeGrid.load({
                params: {
                    idSubFactorRiesgo: record.get("idSubFactorRiesgo")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-preguntassubfactorriesgo',
    stores: {
        getFactorRiesgo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.FactorRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getSubFactorRiesgo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.SubFactorRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getPreguntasSubFactorRiesgo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgo",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    if (operation._response != null) {
                        // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                        var res = Ext.decode(operation._response.responseText);
                        store.identity = res.identity;
                    }
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPreguntasSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgoController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.PreguntasSubFactorRiesgoModel"
    ],
    controller: "parametros-caracterizacionpoblacional-preguntassubfactorriesgo",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-preguntassubfactorriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getFactorRiesgo}"
                    },
                    displayField: "compFactorRiesgo",
                    editable: false,
                    fieldLabel: "Factor de Riesgo",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    loadCombo: true,
                    queryMode: "local",
                    reference: "factorRiesgo",
                    valueField: "idFactorRiesgo",
                    width: 350
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getSubFactorRiesgo}"
                    },
                    displayField: "compSubFactorRiesgo",
                    editable: false,
                    fieldLabel: "Sub-Factor de Riesgo",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    loadCombo: false,
                    queryMode: "local",
                    reference: "subFactorRiesgo",
                    valueField: "idSubFactorRiesgo",
                    width: 350
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getPreguntasSubFactorRiesgo}'
            },
            columns: [
                {
                    dataIndex: "idPreguntasSubFactorRiesgo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "idSubFactorRiesgo",
                    header: "Id Sub Factor",
                    hidden: true
                },
                {
                    dataIndex: "codigoPreguntasSubFactorRiesgo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionPreguntasSubFactorRiesgo",
                    header: "Descripción",
                    width: 400,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-PreguntasSubFactorRiesgo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.ProcedenciaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-procedencia',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Procedencia-Principal').getStore();
        var nextId = storeGrid.max("idProcedencia");
        var row = [
                {
                    idProcedencia: (nextId == undefined ? 1 : nextId + 1),
                    codigoProcedencia: "",
                    nombreProcedencia: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Procedencia-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceProcedencia");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Procedencia-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "ProcedenciaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Procedencia-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.ProcedenciaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-procedencia',
    stores: {
        getProcedencia: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.Procedencia",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetProcedenciaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.Procedencia", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.ProcedenciaController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.ProcedenciaModel"
    ],
    controller: "parametros-caracterizacionpoblacional-procedencia",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-procedencia"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getProcedencia}'
            },
            columns: [
                {
                    dataIndex: "idProcedencia",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoProcedencia",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreProcedencia",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Procedencia-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.SubFactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-caracterizacionpoblacional-subfactorriesgo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var factorRiesgo = me.lookupReference("factorRiesgo");
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-SubFactorRiesgo-Principal').getStore();
        var max = storeGrid.max("idSubFactorRiesgo");
        var nextId = storeGrid.identity;
        if (max > nextId)  {
            nextId = max;
        }
        
        var row = [
                {
                    idSubFactorRiesgo: (nextId == undefined ? 1 : nextId + 1),
                    idFactorRiesgo: factorRiesgo.getValue(),
                    codigoSubFactorRiesgo: "",
                    nombreSubFactorRiesgo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-SubFactorRiesgo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceSubFactorRiesgo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var factorRiesgo = me.lookupReference("factorRiesgo");
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-SubFactorRiesgo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "SubFactorRiesgoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idFactorRiesgo: factorRiesgo.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-SubFactorRiesgo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var storeGrid = Ext.getCmp('Grid-SubFactorRiesgo-Principal').getStore();
        storeGrid.load({
            params: {
                idFactorRiesgo: record.get("idFactorRiesgo")
            }
        });
    }
});

Ext.define('CoomuceMod.view.Parametros.CaracterizacionPoblacional.SubFactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-caracterizacionpoblacional-subfactorriesgo',
    stores: {
        getFactorRiesgo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.FactorRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getSubFactorRiesgo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.CaracterizacionPoblacional.SubFactorRiesgo",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    if (operation._response != null) {
                        // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                        var res = Ext.decode(operation._response.responseText);
                        store.identity = res.identity;
                    }
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSubFactorRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.CaracterizacionPoblacional.SubFactorRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.SubFactorRiesgoController",
        "CoomuceMod.view.Parametros.CaracterizacionPoblacional.SubFactorRiesgoModel"
    ],
    controller: "parametros-caracterizacionpoblacional-subfactorriesgo",
    viewModel: {
        type: "parametros-caracterizacionpoblacional-subfactorriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getFactorRiesgo}"
                    },
                    displayField: "compFactorRiesgo",
                    editable: false,
                    fieldLabel: "Factor de Riesgo",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "factorRiesgo",
                    valueField: "idFactorRiesgo",
                    width: 350
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getSubFactorRiesgo}'
            },
            columns: [
                {
                    dataIndex: "idSubFactorRiesgo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "idFactorRiesgo",
                    header: "Id Factor",
                    hidden: true
                },
                {
                    dataIndex: "codigoSubFactorRiesgo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreSubFactorRiesgo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-SubFactorRiesgo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.GrupoInteresController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-grupointeres',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-GrupoInteres-Principal').getStore();
        var nextId = storeGrid.max("idGrupoInteres");
        var row = [
                {
                    idGrupoInteres: (nextId == undefined ? 1 : nextId + 1),
                    codigoGrupoInteres: "",
                    descripcionGrupoInteres: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-GrupoInteres-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceGrupoInteres");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-GrupoInteres-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "GrupoInteresCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-GrupoInteres-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.GrupoInteresModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-grupointeres',
    stores: {
        getGrupoInteres: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.GrupoInteres",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGrupoInteresAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.GrupoInteres", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.GrupoInteresController",
        "CoomuceMod.view.Parametros.DemandaInducida.GrupoInteresModel"
    ],
    controller: "parametros-demandainducida-grupointeres",
    viewModel: {
        type: "parametros-demandainducida-grupointeres"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getGrupoInteres}'
            },
            columns: [
                {
                    dataIndex: "idGrupoInteres",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoGrupoInteres",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionGrupoInteres",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-GrupoInteres-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.MotivoConsultaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-motivoconsulta',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-MotivoConsulta-Principal').getStore();
        var nextId = storeGrid.max("idMotivoConsulta");
        var row = [
                {
                    idMotivoConsulta: (nextId == undefined ? 1 : nextId + 1),
                    codigoMotivoConsulta: "",
                    descripcionMotivoConsulta: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-MotivoConsulta-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceMotivoConsulta");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-MotivoConsulta-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "MotivoConsultaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-MotivoConsulta-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.MotivoConsultaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-motivoconsulta',
    stores: {
        getMotivoConsulta: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.MotivoConsulta",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoConsultaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.MotivoConsulta", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.MotivoConsultaController",
        "CoomuceMod.view.Parametros.DemandaInducida.MotivoConsultaModel"
    ],
    controller: "parametros-demandainducida-motivoconsulta",
    viewModel: {
        type: "parametros-demandainducida-motivoconsulta"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getMotivoConsulta}'
            },
            columns: [
                {
                    dataIndex: "idMotivoConsulta",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoMotivoConsulta",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionMotivoConsulta",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-MotivoConsulta-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.MotivoContactoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-motivocontacto',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-MotivoContacto-Principal').getStore();
        var nextId = storeGrid.max("idMotivoContacto");
        var row = [
                {
                    idMotivoContacto: (nextId == undefined ? 1 : nextId + 1),
                    codigoMotivoContacto: "",
                    descripcionMotivoContacto: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-MotivoContacto-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceMotivoContacto");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-MotivoContacto-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "MotivoContactoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-MotivoContacto-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.MotivoContactoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-motivocontacto',
    stores: {
        getMotivoContacto: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.MotivoContacto",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetMotivoContactoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.MotivoContacto", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.MotivoContactoController",
        "CoomuceMod.view.Parametros.DemandaInducida.MotivoContactoModel"
    ],
    controller: "parametros-demandainducida-motivocontacto",
    viewModel: {
        type: "parametros-demandainducida-motivocontacto"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getMotivoContacto}'
            },
            columns: [
                {
                    dataIndex: "idMotivoContacto",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoMotivoContacto",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionMotivoContacto",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-MotivoContacto-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.PiezasInformativasController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-piezasinformativas',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-PiezasInformativas-Principal').getStore();
        var nextId = storeGrid.max("idPiezasInformativas");
        var row = [
                {
                    idPiezasInformativas: (nextId == undefined ? 1 : nextId + 1),
                    codigoPiezasInformativas: "",
                    descripcionPiezasInformativas: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-PiezasInformativas-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomucePiezasInformativas");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-PiezasInformativas-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "PiezasInformativasCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-PiezasInformativas-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.PiezasInformativasModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-piezasinformativas',
    stores: {
        getPiezasInformativas: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.PiezasInformativas",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetPiezasInformativasAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.PiezasInformativas", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.PiezasInformativasController",
        "CoomuceMod.view.Parametros.DemandaInducida.PiezasInformativasModel"
    ],
    controller: "parametros-demandainducida-piezasinformativas",
    viewModel: {
        type: "parametros-demandainducida-piezasinformativas"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getPiezasInformativas}'
            },
            columns: [
                {
                    dataIndex: "idPiezasInformativas",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoPiezasInformativas",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionPiezasInformativas",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-PiezasInformativas-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.ProgramaResolucion412Controller', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-programaresolucion412',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-ProgramaResolucion412-Principal').getStore();
        var nextId = storeGrid.max("idProgramaResolucion412");
        var row = [
                {
                    idProgramaResolucion412: (nextId == undefined ? 1 : nextId + 1),
                    codigoProgramaResolucion412: "",
                    descripcionProgramaResolucion412: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-ProgramaResolucion412-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceProgramaResolucion412");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-ProgramaResolucion412-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "ProgramaResolucion412CUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-ProgramaResolucion412-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.ProgramaResolucion412Model', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-programaresolucion412',
    stores: {
        getProgramaResolucion412: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.ProgramaResolucion412",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetProgramaResolucion412All",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.ProgramaResolucion412", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.ProgramaResolucion412Controller",
        "CoomuceMod.view.Parametros.DemandaInducida.ProgramaResolucion412Model"
    ],
    controller: "parametros-demandainducida-programaresolucion412",
    viewModel: {
        type: "parametros-demandainducida-programaresolucion412"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getProgramaResolucion412}'
            },
            columns: [
                {
                    dataIndex: "idProgramaResolucion412",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoProgramaResolucion412",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "descripcionProgramaResolucion412",
                    header: "Descripción",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-ProgramaResolucion412-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-seguimientoprogramasintervencionriesgo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-SeguimientoProgramasIntervencionRiesgo-Principal').getStore();
        var nextId = storeGrid.max("idSeguimientoProgramasIntervencionRiesgo");
        var row = [
                {
                    idSeguimientoProgramasIntervencionRiesgo: (nextId == undefined ? 1 : nextId + 1),
                    codigoSeguimientoProgramasIntervencionRiesgo: "",
                    nombreSeguimientoProgramasIntervencionRiesgo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-SeguimientoProgramasIntervencionRiesgo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceSeguimientoProgramasIntervencionRiesgo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-SeguimientoProgramasIntervencionRiesgo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "SeguimientoProgramasIntervencionRiesgoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-SeguimientoProgramasIntervencionRiesgo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-seguimientoprogramasintervencionriesgo',
    stores: {
        getSeguimientoProgramasIntervencionRiesgo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetSeguimientoProgramasIntervencionRiesgoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgoController",
        "CoomuceMod.view.Parametros.DemandaInducida.SeguimientoProgramasIntervencionRiesgoModel"
    ],
    controller: "parametros-demandainducida-seguimientoprogramasintervencionriesgo",
    viewModel: {
        type: "parametros-demandainducida-seguimientoprogramasintervencionriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getSeguimientoProgramasIntervencionRiesgo}'
            },
            columns: [
                {
                    dataIndex: "idSeguimientoProgramasIntervencionRiesgo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoSeguimientoProgramasIntervencionRiesgo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreSeguimientoProgramasIntervencionRiesgo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-SeguimientoProgramasIntervencionRiesgo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.TipoVisitaDomiciliariaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-demandainducida-tipovisitadomiciliaria',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoVisitaDomiciliaria-Principal').getStore();
        var nextId = storeGrid.max("idTipoVisitaDomiciliaria");
        var row = [
                {
                    idTipoVisitaDomiciliaria: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoVisitaDomiciliaria: "",
                    nombreTipoVisitaDomiciliaria: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoVisitaDomiciliaria-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoVisitaDomiciliaria");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoVisitaDomiciliaria-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoVisitaDomiciliariaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoVisitaDomiciliaria-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.DemandaInducida.TipoVisitaDomiciliariaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-demandainducida-tipovisitadomiciliaria',
    stores: {
        getTipoVisitaDomiciliaria: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.DemandaInducida.TipoVisitaDomiciliaria",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoVisitaDomiciliariaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.DemandaInducida.TipoVisitaDomiciliaria", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.DemandaInducida.TipoVisitaDomiciliariaController",
        "CoomuceMod.view.Parametros.DemandaInducida.TipoVisitaDomiciliariaModel"
    ],
    controller: "parametros-demandainducida-tipovisitadomiciliaria",
    viewModel: {
        type: "parametros-demandainducida-tipovisitadomiciliaria"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoVisitaDomiciliaria}'
            },
            columns: [
                {
                    dataIndex: "idTipoVisitaDomiciliaria",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoVisitaDomiciliaria",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoVisitaDomiciliaria",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoVisitaDomiciliaria-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.Generales.GruposFocalesController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-generales-gruposfocales',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-GruposFocales-Principal').getStore();
        var nextId = storeGrid.max("idGruposFocales");
        var row = [
                {
                    idGruposFocales: (nextId == undefined ? 1 : nextId + 1),
                    codigoGruposFocales: "",
                    nombreGruposFocales: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-GruposFocales-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceGruposFocales");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-GruposFocales-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "GruposFocalesCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-GruposFocales-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.Generales.GruposFocalesModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-generales-gruposfocales',
    stores: {
        getGruposFocales: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.GruposFocales",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGruposFocalesAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.GruposFocales", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.Generales.GruposFocalesController",
        "CoomuceMod.view.Parametros.Generales.GruposFocalesModel"
    ],
    controller: "parametros-generales-gruposfocales",
    viewModel: {
        type: "parametros-generales-gruposfocales"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getGruposFocales}'
            },
            columns: [
                {
                    dataIndex: "idGruposFocales",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoGruposFocales",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreGruposFocales",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-GruposFocales-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.Generales.IpsController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-generales-ips',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Ips-Principal').getStore();
        var nextId = storeGrid.max("idIps");
        var row = [
                {
                    idIps: (nextId == undefined ? 1 : nextId + 1),
                    codigoIps: "",
                    razonIps: "",
                    idTipoIdentificacion: 0,
                    compTipoIdentificacion: "",
                    identificacionIps: "",
                    direccionIps: "",
                    telefonoIps: "",
                    idDepartamento: 0,
                    compDepartamento: "",
                    idCiudad: 0,
                    compCiudad: "",
                    representanteIps: "",
                    nivelIps: "",
                    contactoIps: "",
                    emailIps: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Ips-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceIps");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Ips-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "IpsCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Ips-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onBotonImportarClick: function(btn) {
        var titleView = this.getTitleView();
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Este funcionalidad se encuentra en desarrollo."
        });
        return false;
        var form = Ext.create("Ext.form.Panel", {
                bodyPadding: 10,
                buttons: [
                    {
                        text: 'Importar',
                        handler: function() {
                            var data = [];
                            var form = this.up('form');
                            //.getForm();
                            //if (form.isValid()) {
                            var file = form.down("filefield").getEl().down("input[type=file]").dom.files[0];
                            var reader = new FileReader();
                            reader.onload = (function(theFile) {
                                return function(e) {
                                    data.push(e.target.result);
                                };
                            })(//console.log(e.target.result);
                            file);
                            reader.readAsBinaryString(file);
                            console.log(data);
                        }
                    }
                ],
                //form.submit({
                //    url: Coomuce.Url.Parametros + "IpsImportar",
                //    waitMsg: 'Importando archivo...',
                //    success: function (fp, o) {
                //        Coomuce.Util.ShowMessage({ type: "INFO", title: titleView, msg: "El archivo ha sido importado correctamente." });
                //    }
                //});
                //}
                items: [
                    {
                        xtype: 'filefield',
                        name: 'archivo',
                        fieldLabel: 'Archivo',
                        labelWidth: 50,
                        msgTarget: 'side',
                        allowBlank: false,
                        anchor: '100%',
                        buttonText: 'Seleccione archivo plano...'
                    }
                ]
            });
        var win = Ext.create("Ext.window.Window", {
                //height: 200,
                items: [
                    form
                ],
                modal: true,
                title: btn.text,
                width: 400
            });
        win.show();
    },
    onSelectCombo: function(combo, record, eOpts) {
        var rec = Ext.getCmp("Grid-Ips-Principal").selModel.getSelection();
        rec[0].set(combo.idCampo, record.get(combo.idCampo));
    },
    onFocusCombo: function(combo, event, eOpts) {
        var record = Ext.getCmp("Grid-Ips-Principal").selModel.getSelection()[0];
        combo.getStore().load({
            params: {
                idDepartamento: record.get("idDepartamento")
            }
        });
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.IpsModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.parametros-generales-ips",
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getIps: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.Ips",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetIpsAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getNivel: {
            fields: [
                "nivelIps"
            ],
            data: [
                [
                    "I"
                ],
                [
                    "II"
                ],
                [
                    "III"
                ],
                [
                    "IV"
                ]
            ]
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.Ips", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.Generales.IpsController",
        "CoomuceMod.view.Parametros.Generales.IpsModel"
    ],
    controller: "parametros-generales-ips",
    viewModel: {
        type: "parametros-generales-ips"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                },
                "->",
                {
                    text: "Importar ips desde plano",
                    iconCls: "x-fa fa-upload",
                    handler: "onBotonImportarClick"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getIps}'
            },
            columns: [
                {
                    dataIndex: "idIps",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoIps",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "razonIps",
                    header: "Razón Social",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "idTipoIdentificacion",
                    header: "Id Tipo Identificacion",
                    hidden: true
                },
                {
                    dataIndex: "compTipoIdentificacion",
                    header: "Tipo Identificación",
                    width: 100,
                    editor: {
                        xtype: "combo",
                        allowBlank: false,
                        bind: {
                            store: "{getTipoIdentificacion}"
                        },
                        displayField: "compTipoIdentificacion",
                        editable: false,
                        idCampo: "idTipoIdentificacion",
                        listeners: {
                            select: "onSelectCombo"
                        },
                        queryMode: "local",
                        valueField: "compTipoIdentificacion"
                    }
                },
                {
                    dataIndex: "identificacionIps",
                    header: "Identificación",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "direccionIps",
                    header: "Dirección",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "telefonoIps",
                    header: "Teléfono",
                    width: 100,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "idDepartamento",
                    header: "Id Departamento",
                    hidden: true
                },
                {
                    dataIndex: "compDepartamento",
                    header: "Departamento",
                    width: 100,
                    editor: {
                        xtype: "combo",
                        allowBlank: false,
                        bind: {
                            store: "{getDepartamento}"
                        },
                        displayField: "compDepartamento",
                        editable: false,
                        idCampo: "idDepartamento",
                        listeners: {
                            select: "onSelectCombo"
                        },
                        queryMode: "local",
                        valueField: "compDepartamento"
                    }
                },
                {
                    dataIndex: "idCiudad",
                    header: "Id Ciudad",
                    hidden: true
                },
                {
                    dataIndex: "compCiudad",
                    header: "Ciudad",
                    width: 100,
                    editor: {
                        xtype: 'combo',
                        allowBlank: false,
                        bind: {
                            store: '{getCiudad}'
                        },
                        displayField: 'compCiudad',
                        editable: false,
                        idCampo: "idCiudad",
                        listeners: {
                            focus: "onFocusCombo",
                            select: "onSelectCombo"
                        },
                        queryMode: 'local',
                        valueField: 'compCiudad'
                    }
                },
                {
                    dataIndex: "representanteIps",
                    header: "Representante",
                    width: 100,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "nivelIps",
                    header: "Nivel",
                    width: 100,
                    editor: {
                        xtype: 'combo',
                        allowBlank: true,
                        bind: {
                            store: '{getNivel}'
                        },
                        displayField: 'nivelIps',
                        editable: false,
                        idCampo: "nivelIps",
                        listeners: {
                            select: "onSelectCombo"
                        },
                        queryMode: 'local',
                        valueField: 'nivelIps'
                    }
                },
                {
                    dataIndex: "contactoIps",
                    header: "Contacto",
                    width: 100,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    dataIndex: "emailIps",
                    header: "E-mail",
                    width: 100,
                    editor: {
                        allowBlank: true,
                        vtype: "email"
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Ips-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: false,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoIdentificacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-generales-tipoidentificacion',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoIdentificacion-Principal').getStore();
        var nextId = storeGrid.max("idTipoIdentificacion");
        var row = [
                {
                    idTipoIdentificacion: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoIdentificacion: "",
                    nombreTipoIdentificacion: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoIdentificacion-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoIdentificacion");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoIdentificacion-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoIdentificacionCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoIdentificacion-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoIdentificacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-generales-tipoidentificacion',
    stores: {
        getTipoIdentificacion: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoIdentificacion",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoIdentificacionAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.TipoIdentificacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.Generales.TipoIdentificacionController",
        "CoomuceMod.view.Parametros.Generales.TipoIdentificacionModel"
    ],
    controller: "parametros-generales-tipoidentificacion",
    viewModel: {
        type: "parametros-generales-tipoidentificacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoIdentificacion}'
            },
            columns: [
                {
                    dataIndex: "idTipoIdentificacion",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoIdentificacion",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoIdentificacion",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoIdentificacion-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoSexoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-generales-tiposexo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoSexo-Principal').getStore();
        var nextId = storeGrid.max("idTipoSexo");
        var row = [
                {
                    idTipoSexo: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoSexo: "",
                    nombreTipoSexo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoSexo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoSexo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoSexo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoSexoCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoSexo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoSexoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-generales-tiposexo',
    stores: {
        getTipoSexo: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoSexo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoSexoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.TipoSexo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.Generales.TipoSexoController",
        "CoomuceMod.view.Parametros.Generales.TipoSexoModel"
    ],
    controller: "parametros-generales-tiposexo",
    viewModel: {
        type: "parametros-generales-tiposexo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoSexo}'
            },
            columns: [
                {
                    dataIndex: "idTipoSexo",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoSexo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoSexo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoSexo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoZonaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-generales-tipozona',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-TipoZona-Principal').getStore();
        var nextId = storeGrid.max("idTipoZona");
        var row = [
                {
                    idTipoZona: (nextId == undefined ? 1 : nextId + 1),
                    codigoTipoZona: "",
                    nombreTipoZona: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        Ext.Msg.confirm(this.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-TipoZona-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceTipoZona");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var titleView = this.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-TipoZona-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "TipoZonaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-TipoZona-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.Generales.TipoZonaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-generales-tipozona',
    stores: {
        getTipoZona: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.TipoZona",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetTipoZonaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.Generales.TipoZona", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.Generales.TipoZonaController",
        "CoomuceMod.view.Parametros.Generales.TipoZonaModel"
    ],
    controller: "parametros-generales-tipozona",
    viewModel: {
        type: "parametros-generales-tipozona"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getTipoZona}'
            },
            columns: [
                {
                    dataIndex: "idTipoZona",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoTipoZona",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreTipoZona",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-TipoZona-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                //Hacer esto para seleccionar elementos de un grid sólo cuando se checken
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaCategoriaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-informacionorientacion-encuestacategoria',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var valueVista = Ext.getCmp("idDomVista").getValue();
        if (Ext.isEmpty(valueVista)) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un formato de encuesta."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-EncuestaCategoria-Principal').getStore();
        var max = storeGrid.max("idEncuestaCategoria");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idEncuestaCategoria: (nextId == undefined ? 1 : nextId + 1),
                    idDomVista: valueVista,
                    codigoEncuestaCategoria: "",
                    nombreEncuestaCategoria: "",
                    ordenEncuestaCategoria: 0
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-EncuestaCategoria-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceEncuestaCategoria");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-EncuestaCategoria-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "EncuestaCategoriaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idDomVista: Ext.getCmp("idDomVista").getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-EncuestaCategoria-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var grid = Ext.getCmp("Grid-EncuestaCategoria-Principal");
        grid.getStore().load({
            params: {
                idDomVista: record.data.id
            }
        });
    }
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaCategoriaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-informacionorientacion-encuestacategoria',
    stores: {
        getVista: {
            fields: [
                {
                    name: "id",
                    type: "string"
                },
                {
                    name: "nombre",
                    type: "string"
                }
            ],
            data: [
                [
                    "CoomuceEncuestaIPS",
                    "Encuesta de Satisfacción de usuario de la I.P.S de primer Nivel"
                ],
                [
                    "CoomuceEncuestaEPS",
                    "Encuesta de Satisfacción de usuario de la EPS-S"
                ]
            ]
        },
        getEncuestaCategoria: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaCategoria",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaCategoriaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaCategoria", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaCategoriaController",
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaCategoriaModel"
    ],
    controller: "parametros-informacionorientacion-encuestacategoria",
    viewModel: {
        type: "parametros-informacionorientacion-encuestacategoria"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getVista}"
                    },
                    displayField: "nombre",
                    emptyText: "-- Seleccione encuesta --",
                    id: "idDomVista",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    valueField: "id",
                    width: 400
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getEncuestaCategoria}'
            },
            columns: [
                {
                    dataIndex: "idEncuestaCategoria",
                    header: "Id Encuesta Categoria",
                    hidden: true
                },
                {
                    dataIndex: "idDomVista",
                    header: "Id Encuesta",
                    hidden: true
                },
                {
                    dataIndex: "codigoEncuestaCategoria",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreEncuestaCategoria",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "ordenEncuestaCategoria",
                    header: "Orden",
                    width: 80,
                    editor: {
                        xtype: "numberfield",
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-EncuestaCategoria-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaLiteralController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-informacionorientacion-encuestaliteral',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var vista = me.lookupReference("vista");
        var categoria = me.lookupReference("categoria");
        var pregunta = me.lookupReference("pregunta");
        if (Ext.isEmpty(vista.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un formato de encuesta."
            });
            return false;
        }
        if (Ext.isEmpty(categoria.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar una categoria."
            });
            return false;
        }
        if (Ext.isEmpty(pregunta.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar una pregunta."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-EncuestaLiteral-Principal').getStore();
        var max = storeGrid.max("idEncuestaLiteral");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idEncuestaLiteral: (nextId == undefined ? 1 : nextId + 1),
                    idEncuestaPregunta: pregunta.getValue(),
                    liteEncuestaLiteral: "",
                    textoEncuestaLiteral: "",
                    valorEncuestaLiteral: 0
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-EncuestaLiteral-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceEncuentaLiteral");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var pregunta = me.lookupReference("pregunta");
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-EncuestaLiteral-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "EncuestaLiteralCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idEncuestaPregunta: pregunta.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-EncuestaLiteral-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.categoriaField !== undefined) {
            var categoria = me.lookupReference("categoria");
            categoria.getStore().load({
                params: {
                    idDomVista: record.data.id
                }
            });
        }
        if (combo.preguntaField !== undefined) {
            var categoria = me.lookupReference("pregunta");
            categoria.getStore().load({
                params: {
                    idEncuestaCategoria: record.data.idEncuestaCategoria
                }
            });
        } else if (combo.gridField !== undefined) {
            var grid = Ext.getCmp("Grid-EncuestaLiteral-Principal");
            grid.getStore().load({
                params: {
                    idEncuestaPregunta: record.data.idEncuestaPregunta
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaLiteralModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-informacionorientacion-encuestaliteral',
    stores: {
        getVista: {
            fields: [
                {
                    name: "id",
                    type: "string"
                },
                {
                    name: "nombre",
                    type: "string"
                }
            ],
            data: [
                [
                    "CoomuceEncuestaIPS",
                    "Encuesta de Satisfacción de usuario de la I.P.S de primer Nivel"
                ],
                [
                    "CoomuceEncuestaEPS",
                    "Encuesta de Satisfacción de usuario de la EPS-S"
                ]
            ]
        },
        getEncuestaCategoria: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaCategoria",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaCategoriaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getEncuestaPregunta: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaPregunta",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaPreguntaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getEncuestaLiteral: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaLiteral",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaLiteralAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaLiteral", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaLiteralController",
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaLiteralModel"
    ],
    controller: "parametros-informacionorientacion-encuestaliteral",
    viewModel: {
        type: "parametros-informacionorientacion-encuestaliteral"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getVista}"
                    },
                    displayField: "nombre",
                    emptyText: "-- Seleccione encuesta --",
                    categoriaField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "vista",
                    valueField: "id",
                    width: 300
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getEncuestaCategoria}"
                    },
                    displayField: "compEncuestaCategoria",
                    emptyText: "-- Seleccione categoria --",
                    preguntaField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "categoria",
                    valueField: "idEncuestaCategoria",
                    width: 300
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getEncuestaPregunta}"
                    },
                    displayField: "compEncuestaPregunta",
                    emptyText: "-- Seleccione pregunta --",
                    gridField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "pregunta",
                    valueField: "idEncuestaPregunta",
                    width: 300
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getEncuestaLiteral}'
            },
            columns: [
                {
                    dataIndex: "idEncuestaLiteral",
                    header: "Id Encuesta Literal",
                    hidden: true
                },
                {
                    dataIndex: "liteEncuestaLiteral",
                    header: "Literal",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "textoEncuestaLiteral",
                    header: "Texto",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "valorEncuestaLiteral",
                    header: "Valor",
                    width: 100,
                    editor: {
                        xtype: "numberfield",
                        allowBlank: false
                    }
                },
                {
                    xtype: "checkcolumn",
                    dataIndex: "checkedEncuestaLiteral",
                    header: "Selección Default"
                }
            ],
            columnLines: true,
            id: "Grid-EncuestaLiteral-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaPreguntaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-informacionorientacion-encuestapregunta',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var vista = me.lookupReference("vista");
        var categoria = me.lookupReference("categoria");
        if (Ext.isEmpty(vista.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un formato de encuesta."
            });
            return false;
        }
        if (Ext.isEmpty(categoria.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar una categoria."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-EncuestaPregunta-Principal').getStore();
        var max = storeGrid.max("idEncuestaPregunta");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idEncuestaPregunta: (nextId == undefined ? 1 : nextId + 1),
                    idEncuestaCategoria: categoria.getValue(),
                    codigoEncuestaPregunta: "",
                    textoEncuestaPregunta: "",
                    tipoPreEncuestaPregunta: 1,
                    valorEncuestaPregunta: 0
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-EncuestaPregunta-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceEncuestaPregunta");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var categoria = me.lookupReference("categoria");
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-EncuestaPregunta-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "EncuestaPreguntaCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idEncuestaCategoria: categoria.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-EncuestaPregunta-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.categoriaField !== undefined) {
            var categoria = me.lookupReference("categoria");
            categoria.getStore().load({
                params: {
                    idDomVista: record.data.id
                }
            });
        } else if (combo.gridField !== undefined) {
            var grid = Ext.getCmp("Grid-EncuestaPregunta-Principal");
            grid.getStore().load({
                params: {
                    idEncuestaCategoria: record.data.idEncuestaCategoria
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaPreguntaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-informacionorientacion-encuestapregunta',
    stores: {
        getVista: {
            fields: [
                {
                    name: "id",
                    type: "string"
                },
                {
                    name: "nombre",
                    type: "string"
                }
            ],
            data: [
                [
                    "CoomuceEncuestaIPS",
                    "Encuesta de Satisfacción de usuario de la I.P.S de primer Nivel"
                ],
                [
                    "CoomuceEncuestaEPS",
                    "Encuesta de Satisfacción de usuario de la EPS-S"
                ]
            ]
        },
        getTipoPregunta: {
            fields: [
                {
                    name: "id",
                    type: "int"
                },
                {
                    name: "nombre",
                    type: "string"
                }
            ],
            data: [
                [
                    1,
                    "ÚNICA RESPUESTA"
                ],
                [
                    2,
                    "MÚLTIPLES RESPUESTAS"
                ],
                [
                    3,
                    "SELECCIONE UNA"
                ]
            ]
        },
        getEncuestaCategoria: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaCategoria",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaCategoriaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getEncuestaPregunta: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.InformacionOrientacion.EncuestaPregunta",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEncuestaPreguntaAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaPregunta", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaPreguntaController",
        "CoomuceMod.view.Parametros.InformacionOrientacion.EncuestaPreguntaModel"
    ],
    controller: "parametros-informacionorientacion-encuestapregunta",
    viewModel: {
        type: "parametros-informacionorientacion-encuestapregunta"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getVista}"
                    },
                    displayField: "nombre",
                    emptyText: "-- Seleccione encuesta --",
                    categoriaField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "vista",
                    valueField: "id",
                    width: 400
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getEncuestaCategoria}"
                    },
                    displayField: "compEncuestaCategoria",
                    emptyText: "-- Seleccione categoria --",
                    gridField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "categoria",
                    valueField: "idEncuestaCategoria",
                    width: 400
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getEncuestaPregunta}'
            },
            columns: [
                {
                    dataIndex: "idEncuestaPregunta",
                    header: "Id Encuesta Pregunta",
                    hidden: true
                },
                {
                    dataIndex: "codigoEncuestaPregunta",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "textoEncuestaPregunta",
                    header: "Texto",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "tipoPreEncuestaPregunta",
                    header: "Tipo Pregunta",
                    width: 150,
                    editor: {
                        xtype: "combo",
                        allowBlank: false,
                        bind: {
                            store: "{getTipoPregunta}"
                        },
                        displayField: "nombre",
                        queryMode: "local",
                        valueField: "id"
                    }
                },
                {
                    dataIndex: "valorEncuestaPregunta",
                    header: "Valor",
                    width: 100,
                    editor: {
                        xtype: "numberfield",
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-EncuestaPregunta-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.EjeController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-participacionsocial-eje',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Eje-Principal').getStore();
        var nextId = storeGrid.max("idEje");
        var row = [
                {
                    idEje: (nextId === undefined ? 1 : nextId + 1),
                    codigoEje: "",
                    nombreEje: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Eje-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceEje");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Eje-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "EjeCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Eje-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    }
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.EjeModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-participacionsocial-eje',
    stores: {
        getEje: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Eje",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEjeAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ParticipacionSocial.Eje", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ParticipacionSocial.EjeController",
        "CoomuceMod.view.Parametros.ParticipacionSocial.EjeModel"
    ],
    controller: "parametros-participacionsocial-eje",
    viewModel: {
        type: "parametros-participacionsocial-eje"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getEje}'
            },
            columns: [
                {
                    dataIndex: "idEje",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoEje",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreEje",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Eje-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.ModuloController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-participacionsocial-modulo',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var eje = me.lookupReference("eje");
        var unidad = me.lookupReference("unidad");
        if (Ext.isEmpty(eje.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un eje."
            });
            return false;
        }
        if (Ext.isEmpty(unidad.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar una unidad."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Modulo-Principal').getStore();
        var max = storeGrid.max("idModulo");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idModulo: (nextId == undefined ? 1 : nextId + 1),
                    idUnidad: unidad.getValue(),
                    codigoModulo: "",
                    nombreModulo: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Modulo-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceModulo");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var unidad = me.lookupReference("unidad");
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Modulo-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "ModuloCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idUnidad: unidad.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Modulo-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.unidadField !== undefined) {
            var unidad = me.lookupReference("unidad");
            unidad.getStore().load({
                params: {
                    idEje: record.data.idEje
                }
            });
        } else if (combo.gridField !== undefined) {
            var grid = Ext.getCmp("Grid-Modulo-Principal");
            grid.getStore().load({
                params: {
                    idUnidad: record.data.idUnidad
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.ModuloModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-participacionsocial-modulo',
    stores: {
        getEje: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Eje",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEjeAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getUnidad: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Unidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetUnidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getModulo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Modulo",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetModuloAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ParticipacionSocial.Modulo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ParticipacionSocial.ModuloController",
        "CoomuceMod.view.Parametros.ParticipacionSocial.ModuloModel"
    ],
    controller: "parametros-participacionsocial-modulo",
    viewModel: {
        type: "parametros-participacionsocial-modulo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getEje}"
                    },
                    displayField: "compEje",
                    emptyText: "-- Seleccione eje --",
                    unidadField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "eje",
                    valueField: "idEje",
                    width: 300
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getUnidad}"
                    },
                    displayField: "compUnidad",
                    emptyText: "-- Seleccione unidad --",
                    gridField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "unidad",
                    valueField: "idUnidad",
                    width: 300
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getModulo}'
            },
            columns: [
                {
                    dataIndex: "idModulo",
                    header: "IdLiteral",
                    hidden: true
                },
                {
                    dataIndex: "codigoModulo",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreModulo",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Modulo-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.UnidadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.parametros-participacionsocial-unidad',
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onGridSelectionChange: function(sm, selections) {
        this.getReferences().eliminarButton.setDisabled(selections.length === 0);
    },
    onBotonAdicionarClick: function() {
        var me = this;
        var eje = me.lookupReference("eje");
        if (Ext.isEmpty(eje.getValue())) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: me.getTitleView(),
                msg: "Debe seleccionar un eje."
            });
            return false;
        }
        // Create a record instance
        var storeGrid = Ext.getCmp('Grid-Unidad-Principal').getStore();
        var max = storeGrid.max("idUnidad");
        var nextId = storeGrid.identity;
        if (max > nextId) {
            nextId = max;
        }
        var row = [
                {
                    idUnidad: (nextId == undefined ? 1 : nextId + 1),
                    idEje: eje.getValue(),
                    codigoUnidad: "",
                    nombreUnidad: ""
                }
            ];
        storeGrid.insert(0, row);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var storeGrid = Ext.getCmp('Grid-Unidad-Principal').getStore();
                storeGrid.rejectChanges();
                var tabPanel = Ext.getCmp("CoomuceUnidad");
                tabPanel.destroy();
            }
        });
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var eje = me.lookupReference("eje");
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var grid = Ext.getCmp('Grid-Unidad-Principal');
                var storeGrid = grid.getStore();
                var nuevos = [];
                var viejos = [];
                var eliminados = [];
                var itemsValidar = [];
                Ext.each(storeGrid.data.items, function(ob, index, all) {
                    if (ob.dirty) {
                        if (ob.phantom) {
                            nuevos.push(ob.data);
                        } else {
                            viejos.push(ob.data);
                        }
                        itemsValidar.push(ob);
                    }
                });
                Ext.each(storeGrid.getRemovedRecords(), function(ob, index) {
                    if (!ob.phantom) {
                        eliminados.push(ob.getData());
                    }
                });
                // solo validar cuando se edita o adiciona registros
                if (itemsValidar.length > 0) {
                    var validator = Coomuce.Util.dataValidate(itemsValidar);
                    if (!validator.success) {
                        Coomuce.Util.ShowMessage({
                            type: "ERROR",
                            title: titleView,
                            msg: validator.msg
                        });
                        return false;
                    }
                }
                var conf = {
                        url: Coomuce.Url.Parametros + "UnidadCUD",
                        data: {
                            nuevos: nuevos,
                            viejos: viejos,
                            eliminados: eliminados
                        },
                        targetMask: grid,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            storeGrid.load({
                                params: {
                                    idEje: eje.getValue()
                                }
                            });
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonEliminarClick: function() {
        var storeGrid = Ext.getCmp('Grid-Unidad-Principal');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        var grid = Ext.getCmp("Grid-Unidad-Principal");
        grid.getStore().load({
            params: {
                idEje: record.data.idEje
            }
        });
    }
});

Ext.define('CoomuceMod.view.Parametros.ParticipacionSocial.UnidadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.parametros-participacionsocial-unidad',
    stores: {
        getEje: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Eje",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEjeAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getUnidad: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Unidad",
            listeners: {
                load: function(store, records, successful, operation, eOpts) {
                    // este proceso se realiza para obtener la ultima entidad generada y agregarla en una propiedad del store
                    var res = Ext.decode(operation._response.responseText);
                    store.identity = res.identity;
                }
            },
            identity: 0,
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetUnidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Parametros.ParticipacionSocial.Unidad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Parametros.ParticipacionSocial.UnidadController",
        "CoomuceMod.view.Parametros.ParticipacionSocial.UnidadModel"
    ],
    controller: "parametros-participacionsocial-unidad",
    viewModel: {
        type: "parametros-participacionsocial-unidad"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getEje}"
                    },
                    displayField: "compEje",
                    emptyText: "-- Seleccione eje --",
                    gridField: true,
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    reference: "eje",
                    valueField: "idEje",
                    width: 400
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick'
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    text: "Adicionar",
                    iconCls: "x-fa fa-file-o",
                    handler: "onBotonAdicionarClick"
                },
                "-",
                {
                    text: "Eliminar",
                    iconCls: "x-fa fa-eraser",
                    handler: "onBotonEliminarClick",
                    reference: 'eliminarButton',
                    disabled: true
                }
            ]
        }
    ],
    items: [
        {
            xtype: "grid",
            bind: {
                store: '{getUnidad}'
            },
            columns: [
                {
                    dataIndex: "idUnidad",
                    header: "Id",
                    hidden: true
                },
                {
                    dataIndex: "codigoUnidad",
                    header: "Código",
                    width: 100,
                    editor: {
                        allowBlank: false
                    }
                },
                {
                    dataIndex: "nombreUnidad",
                    header: "Nombre",
                    width: 300,
                    editor: {
                        allowBlank: false
                    }
                }
            ],
            columnLines: true,
            id: "Grid-Unidad-Principal",
            loadMask: true,
            plugins: {
                ptype: 'cellediting',
                clicksToEdit: 1
            },
            selModel: {
                type: 'checkboxmodel',
                checkOnly: true,
                listeners: {
                    selectionchange: 'onGridSelectionChange'
                }
            },
            sortableColumns: false
        }
    ]
});

Ext.define("CoomuceMod.view.ParticipacionSocial.ListadoAsistenciaGeneralController", {
    extend: "Ext.app.ViewController",
    alias: "controller.participacionsocial-listadoasistenciageneral",
    getTitleView: function() {
        return this.getView().getTitle();
    },
    onBotonGuardarClick: function() {
        var me = this;
        var titleView = me.getTitleView();
        var form = Ext.getCmp("Form-ListadoAsistenciaGeneral-Principal");
        // hay datos en los campos
        if (!form.getForm().isValid()) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: titleView,
                msg: "Se encontraron campos obligatorios que deben ser diligenciados."
            });
            return false;
        }
        var storeGrid = Ext.getCmp('Grid-ListadoAsistenciaGeneral').getStore();
        var listaAsistencia = [];
        Ext.each(storeGrid.data.items, function(ob, index, all) {
            if (ob.dirty) {
                if (ob.phantom && ob.data.idFuanAfiliado !== 0) {
                    var cont = 0;
                    console.log(ob.data);
                    listaAsistencia.forEach(function(item) {
                        if (ob.data.identificacionFuanAfiliado == listaAsistencia.identificacionFuanAfiliado) {
                            cont++;
                        }
                    });
                    if (cont == 0) {
                        listaAsistencia.push(ob.data);
                    }
                }
            }
        });
        // validar si registros en el listado
        if (listaAsistencia.length === 0) {
            Coomuce.Util.ShowMessage({
                type: "ERROR",
                title: titleView,
                msg: "Debe agregar items en la lista."
            });
            return false;
        }
        Ext.Msg.confirm(titleView, "Desea guardar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var infoAsistencia = form.getForm().getValues();
                infoAsistencia.idAsistenciaGeneral = Ext.isEmpty(infoAsistencia.idAsistenciaGeneral) ? 0 : parseInt(infoAsistencia.idAsistenciaGeneral);
                infoAsistencia.idUsuario = Coomuce.Util.DatosUsuario.idUsuario;
                var conf = {
                        url: Coomuce.Url.Funciones + "ListaAsistenciaGeneralGuardar",
                        data: {
                            infoAsistencia: infoAsistencia,
                            listaAsistencia: listaAsistencia
                        },
                        targetMask: form,
                        msgMask: "Guardando datos...",
                        fnSuccess: function(response) {
                            form.getForm().reset();
                            storeGrid.removeAll();
                            var tabPanel = Ext.getCmp("CoomuceListadoAsistenciaGeneral");
                            tabPanel.destroy();
                        }
                    };
                Coomuce.Util.EnviarPost(conf);
            }
        });
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm(me.getTitleView(), "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var form = Ext.getCmp("Form-ListadoAsistenciaGeneral-Principal");
                form.getForm().reset();
                var storeGrid = Ext.getCmp('Grid-ListadoAsistenciaGeneral').getStore();
                storeGrid.removeAll();
                var tabPanel = Ext.getCmp("CoomuceListadoAsistenciaGeneral");
                tabPanel.destroy();
            }
        });
    },
    onBotonConsultarClick: function() {
        var me = this;
        var store = me.getViewModel().getStore("getAsistenciaGeneral");
        var grid = Ext.create("Ext.grid.Panel", {
                columns: [
                    {
                        dataIndex: "idAsistenciaGeneral",
                        header: "No. Formato",
                        width: 100
                    },
                    {
                        xtype: "datecolumn",
                        dataIndex: "fechaAsistenciaGeneral",
                        format: "d/m/Y",
                        header: "Fecha",
                        width: 100
                    },
                    {
                        dataIndex: "formadorAsistenciaGeneral",
                        header: "Formador",
                        width: 200
                    }
                ],
                columnLines: true,
                listeners: {
                    rowdblclick: function(grd, record, tr, rowIndex, e, eOpts) {
                        var obCiudad = me.lookupReference("idCiudad");
                        var obUnidad = me.lookupReference("idUnidad");
                        var obModulo = me.lookupReference("idModulo");
                        obCiudad.getStore().load({
                            params: {
                                idDepartamento: record.get("idDepartamento")
                            }
                        });
                        obUnidad.getStore().load({
                            params: {
                                idEje: record.get("idEje")
                            }
                        });
                        obModulo.getStore().load({
                            params: {
                                idUnidad: record.get("idUnidad")
                            }
                        });
                        var form = Ext.getCmp("Form-ListadoAsistenciaGeneral-Principal");
                        var storeGrid = Ext.getCmp('Grid-ListadoAsistenciaGeneral').getStore();
                        form.loadRecord(record);
                        storeGrid.add(record.data.listaAsistencia);
                        win.close();
                    }
                },
                store: store
            });
        var win = Ext.create("Ext.window.Window", {
                height: 400,
                items: [
                    grid
                ],
                layout: "fit",
                modal: true,
                title: "Consulta Asistencia General",
                width: 500
            });
        win.show();
        store.load();
    },
    onBotonGridAdicionarClick: function() {
        var me = this;
        var idAsistenciaGeneral = me.lookupReference("idAsistenciaGeneral");
        var grid = Ext.getCmp('Grid-ListadoAsistenciaGeneral');
        // Create a record instance
        var storeGrid = grid.getStore();
        var ult = storeGrid.getCount();
        var id = Ext.isEmpty(idAsistenciaGeneral.getValue()) ? 0 : parseInt(idAsistenciaGeneral.getValue());
        var row = [
                {
                    idAsistenciaGeneral: id,
                    idFuanAfiliado: 0,
                    nombreCompletoAfiliado: "",
                    codigoTipoIdentificacion: "",
                    identificacionFuanAfiliado: "",
                    direccionFuanAfiliado: "",
                    areaEntidadListaAsistenciaGeneral: "",
                    telefonoFuanAfiliado: "",
                    firmaListaAsistenciaGeneral: ""
                }
            ];
        storeGrid.insert(ult, row);
        grid.focus();
        grid.getSelectionModel().select(ult);
    },
    onBotonGridRemoverClick: function() {
        var storeGrid = Ext.getCmp('Grid-ListadoAsistenciaGeneral');
        storeGrid.getStore().remove(storeGrid.selModel.getSelection());
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        console.log(combo);
        if (!combo.dependent) {
            var rec = Ext.getCmp("Grid-ListadoAsistenciaGeneral").selModel.getSelection();
            if (combo.updateRecords !== undefined) {
                for (var i = 0; i < combo.campos.length; i++) {
                    rec[0].set(combo.campos[i], record.get(combo.campos[i]));
                }
            } else {
                rec[0].set(combo.idCampo, record.get(combo.idCampo));
            }
        } else {
            if (combo.campoReference != undefined) {
                var ob = me.lookupReference(combo.campoReference);
                ob.setValue(record.get(combo.campo));
            } else {
                var ob = me.lookupReference(combo.campoDependent);
                console.log(ob.getStore());
                var params = {};
                params[combo.name] = record.get(combo.name);
                ob.getStore().load({
                    params: params
                });
            }
        }
    },
    onUploadDataComplete: function(source, file) {
        var titleView = this.getTitleView();
        var record = source.getWidgetRecord();
        record.set("firmaListaAsistenciaGeneral", file.data);
        Coomuce.Util.ShowMessage({
            type: "INFO",
            title: titleView,
            msg: "Archivo de firma importado correctamente."
        });
    },
    onUploadError: function(src, data) {
        var me = this;
        var titleView = me.getTitleView();
        var msg = 'ErrorType: ' + data.errorType;
        switch (data.errorType) {
            case 'FileSize':
                msg = 'Este archivo es demasiado grande: ' + Ext.util.Format.fileSize(data.fileSize) + '. El tamaño máximo de subida es ' + Ext.util.Format.fileSize(data.maxFileSize) + '.';
                break;
            case 'QueueLength':
                msg = 'La longitud de la cola es demasiado larga: ' + data.queueLength + '. La longitud máxima de la cola es ' + data.maxQueueLength + '.';
                break;
        }
        Coomuce.Util.ShowMessage({
            type: "ERROR",
            title: titleView,
            msg: msg
        });
    },
    onBotonEliminarArchivoClick: function(btn) {
        var record = btn.getWidgetRecord();
        record.set("firmaListaAsistenciaGeneral", "");
    }
});

Ext.define("CoomuceMod.view.ParticipacionSocial.ListadoAsistenciaGeneralModel", {
    extend: "Ext.app.ViewModel",
    alias: "viewmodel.participacionsocial-listadoasistenciageneral",
    stores: {
        getGruposFocales: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.Generales.GruposFocales",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetGruposFocalesAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getEje: {
            autoLoad: true,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Eje",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetEjeAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getUnidad: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Unidad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetUnidadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getModulo: {
            autoLoad: false,
            model: "CoomuceMod.model.Parametros.ParticipacionSocial.Modulo",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Parametros + "GetModuloAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        //getAfiliado: {
        //    autoLoad: true,
        //    model: "CoomuceMod.model.ActualizacionBd.FuanAfiliado",
        //    proxy: {
        //        timeout: 600000,
        //        useDefaultXhrHeader: false,
        //        type: 'ajax',
        //        url: Coomuce.Url.Funciones + "GetFuanAfiliadoAll",
        //        reader: {
        //            type: 'json',
        //            rootProperty: 'data',
        //            totalProperty: "total"
        //        }
        //    }
        //},
        setListadoAsistencia: {
            fields: [
                "idListaAsistenciaGeneral",
                "idFuanAfiliado",
                "nombreCompletoAfiliado",
                "codigoTipoIdentificacion",
                "identificacionFuanAfiliado",
                "direccionFuanAfiliado",
                "telefonoFuanAfiliado",
                "areaEntidadListaAsistenciaGeneral",
                "firmaListaAsistenciaGeneral"
            ]
        },
        getAsistenciaGeneral: {
            autoLoad: false,
            fields: [
                "idAsistenciaGeneral",
                {
                    name: "fechaAsistenciaGeneral",
                    convert: Coomuce.Util.parseDate
                },
                "idDepartamento",
                "compDepartamento",
                "idCiudad",
                "compCiudad",
                "idGruposFocales",
                "idEje",
                "idUnidad",
                "idModulo",
                "temaAsistenciaGeneral",
                "formadorAsistenciaGeneral",
                "listaAsistencia"
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Funciones + "GetAsistenciaGeneralAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.ParticipacionSocial.ListadoAsistenciaGeneral", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ParticipacionSocial.ListadoAsistenciaGeneralController",
        "CoomuceMod.view.ParticipacionSocial.ListadoAsistenciaGeneralModel"
    ],
    controller: "participacionsocial-listadoasistenciageneral",
    viewModel: {
        type: "participacionsocial-listadoasistenciageneral"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            ui: "footer",
            layout: {
                pack: "right"
            },
            items: [
                {
                    minWidth: 80,
                    iconCls: "x-fa fa-list-alt",
                    text: "Consultar",
                    handler: "onBotonConsultarClick"
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'left'
            },
            items: [
                {
                    minWidth: 80,
                    text: 'Guardar',
                    handler: 'onBotonGuardarClick',
                    reference: "botonGuardar"
                },
                {
                    minWidth: 80,
                    text: 'Cancelar',
                    handler: 'onBotonCancelarClick',
                    reference: "botonCancelar"
                }
            ]
        }
    ],
    items: [
        {
            xtype: "form",
            bodyPadding: 10,
            scrollable: true,
            id: "Form-ListadoAsistenciaGeneral-Principal",
            items: [
                //{ xtype: "label", html: "Seccional Regional Sur" },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha",
                    format: "d/m/Y",
                    name: "fechaAsistenciaGeneral",
                    value: new Date(),
                    width: 300
                },
                {
                    layout: {
                        type: "table",
                        columns: 3
                    },
                    items: [
                        {
                            items: [
                                {
                                    xtype: "numberfield",
                                    hidden: true,
                                    name: "idAsistenciaGeneral",
                                    reference: "idAsistenciaGeneral"
                                },
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getDepartamento}"
                                    },
                                    campoDependent: "idCiudad",
                                    dependent: true,
                                    displayField: "compDepartamento",
                                    editable: false,
                                    fieldLabel: "Departamento",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idDepartamento",
                                    queryMode: "local",
                                    reference: "idDepartamento",
                                    valueField: "idDepartamento",
                                    width: 300
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getCiudad}"
                                    },
                                    displayField: "compCiudad",
                                    editable: false,
                                    fieldLabel: "Municipio",
                                    name: "idCiudad",
                                    queryMode: "local",
                                    reference: "idCiudad",
                                    valueField: "idCiudad",
                                    width: 300
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getEje}"
                                    },
                                    campoDependent: "idUnidad",
                                    dependent: true,
                                    displayField: "compEje",
                                    editable: false,
                                    fieldLabel: "Eje",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idEje",
                                    queryMode: "local",
                                    reference: "idEje",
                                    valueField: "idEje",
                                    width: 300
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getGruposFocales}"
                                    },
                                    displayField: "compGruposFocales",
                                    editable: false,
                                    fieldLabel: "Grupo Focal",
                                    name: "idGruposFocales",
                                    queryMode: "local",
                                    valueField: "idGruposFocales",
                                    width: 300
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "textfield",
                                    allowBlank: false,
                                    fieldLabel: "Tema",
                                    name: "temaAsistenciaGeneral",
                                    readOnly: true,
                                    reference: "temaAsistenciaGeneral",
                                    width: 300
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getUnidad}"
                                    },
                                    campoDependent: "idModulo",
                                    dependent: true,
                                    displayField: "compUnidad",
                                    editable: false,
                                    fieldLabel: "Unidad",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idUnidad",
                                    queryMode: "local",
                                    reference: "idUnidad",
                                    valueField: "idUnidad",
                                    width: 300
                                }
                            ]
                        },
                        {
                            colspan: 2,
                            items: [
                                {
                                    xtype: "textfield",
                                    allowBlank: false,
                                    fieldLabel: "Formador",
                                    name: "formadorAsistenciaGeneral",
                                    value: Coomuce.Util.DatosUsuario.nombreUsuario,
                                    width: 600
                                }
                            ]
                        },
                        {
                            items: [
                                {
                                    xtype: "combo",
                                    allowBlank: false,
                                    bind: {
                                        store: "{getModulo}"
                                    },
                                    campo: "nombreModulo",
                                    campoReference: "temaAsistenciaGeneral",
                                    dependent: true,
                                    displayField: "codigoModulo",
                                    editable: false,
                                    fieldLabel: "Modulo",
                                    listeners: {
                                        select: "onSelectCombo"
                                    },
                                    name: "idModulo",
                                    queryMode: "local",
                                    reference: "idModulo",
                                    valueField: "idModulo",
                                    width: 300
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: "grid",
                    bind: {
                        store: "{setListadoAsistencia}"
                    },
                    border: true,
                    columns: [
                        {
                            xtype: "rownumberer"
                        },
                        {
                            dataIndex: "identificacionFuanAfiliado",
                            header: "No. Documento de Identidad",
                            width: 200
                        },
                        //, editor: {
                        //    xtype: "combo",
                        //    bind: {
                        //        store: "{getAfiliado}"
                        //    },
                        //    campos: ["idFuanAfiliado", "nombreCompletoAfiliado", "codigoTipoIdentificacion", "direccionFuanAfiliado", "telefonoFuanAfiliado"],
                        //    dependent: false,
                        //    displayField: "compAfiliado",
                        //    hideTrigger: true,
                        //    listeners: {
                        //        select: "onSelectCombo"
                        //    },
                        //    queryMode: "local",
                        //    updateRecords: true,
                        //    valueField: "identificacionFuanAfiliado"
                        //}
                        {
                            xtype: "widgetcolumn",
                            header: "",
                            width: 40,
                            widget: {
                                xtype: "button",
                                componentReference: [
                                    "idFuanAfiliado",
                                    "codigoTipoIdentificacion",
                                    "identificacionFuanAfiliado",
                                    "nombreCompletoAfiliado",
                                    "direccionFuanAfiliado",
                                    "telefonoFuanAfiliado"
                                ],
                                handler: Coomuce.Util.buscarAfiliado,
                                inGrid: true,
                                iconCls: "x-fa fa-list-alt",
                                tooltip: "Lista de Afiliados"
                            }
                        },
                        {
                            dataIndex: "codigoTipoIdentificacion",
                            header: "Tipo Documento",
                            width: 150
                        },
                        {
                            dataIndex: "nombreCompletoAfiliado",
                            header: "Nombre y Apellido",
                            width: 300
                        },
                        {
                            dataIndex: "direccionFuanAfiliado",
                            header: "Dirección",
                            width: 200
                        },
                        {
                            dataIndex: "telefonoFuanAfiliado",
                            header: "Teléfono",
                            width: 200
                        },
                        {
                            dataIndex: "areaEntidadListaAsistenciaGeneral",
                            header: "Entidad",
                            width: 150
                        },
                        {
                            xtype: "widgetcolumn",
                            header: "",
                            width: 60,
                            widget: {
                                xtype: 'uploader',
                                uploadConfig: {
                                    uploadUrl: Coomuce.Url.Funciones + "ImportarFirma",
                                    maxFileSize: 10 * 1024 * 1024
                                },
                                inputAttrTpl: "data-qtip='Seleccione el archivo.'",
                                listeners: {
                                    'uploaddatacomplete': "onUploadDataComplete",
                                    'uploaderror': "onUploadError"
                                }
                            }
                        },
                        {
                            xtype: "widgetcolumn",
                            dataIndex: "firmaListaAsistenciaGeneral",
                            header: "Archivo de firma",
                            width: 200,
                            widget: {
                                xtype: "button",
                                iconCls: "x-fa fa-minus-circle",
                                textAlign: "left",
                                handler: "onBotonEliminarArchivoClick"
                            }
                        }
                    ],
                    columnLines: true,
                    height: 350,
                    id: "Grid-ListadoAsistenciaGeneral",
                    plugins: {
                        ptype: 'cellediting',
                        clicksToEdit: 1
                    },
                    sortableColumns: false,
                    tbar: {
                        items: [
                            {
                                handler: "onBotonGridAdicionarClick",
                                iconCls: "x-fa fa-plus-circle",
                                text: "Adicionar"
                            },
                            {
                                handler: "onBotonGridRemoverClick",
                                iconCls: "x-fa fa-minus-circle",
                                text: "Remover"
                            }
                        ]
                    }
                }
            ]
        }
    ]
});

Ext.define('CoomuceMod.view.ReportesIndividuales.GenerarController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-individuales-generar',
    onBotonAbrirTabClick: function() {
        var me = this;
        var grid = me.lookupReference("gridListaReportesIndividuales");
        var selection = grid.selModel.getSelection();
        var tab = me.lookupReference("tabReportes");
        var existe = tab.items.findIndex('$className', selection[0].data.vista);
        console.log(existe);
        // si la pestaña ya existe, solamente la activo en caso contrario la creo
        if (existe > -1) {
            tab.setActiveTab(existe);
            return false;
        }
        Ext.destroy(selection[0].data.vista);
        var panel = Ext.create(selection[0].data.vista, {
                border: true,
                closable: true,
                idReporte: selection[0].data.idReporte,
                iconCls: "x-fa fa-book",
                listeners: {
                    destroy: function(view, eOpts) {
                        Ext.destroy(selection[0].data.vista);
                    }
                },
                title: "Reporte de " + selection[0].data.nombreReporte
            });
        tab.add(panel);
        tab.setActiveTab(panel);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm("Atención", "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var tabPanel = Ext.getCmp("CoomuceGenerarReporteIndividual");
                tabPanel.destroy();
            }
        });
    }
});

Ext.define('CoomuceMod.view.ReportesIndividuales.GenerarModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-individuales-generar',
    stores: {
        getListaReportesIndividuales: {
            autoLoad: true,
            proxy: {
                type: "ajax",
                url: "../resources/ListaReportesIndividuales.json",
                reader: {
                    type: "json",
                    rootProperty: "data"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.ReportesIndividuales.Generar", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ReportesIndividuales.GenerarController",
        "CoomuceMod.view.ReportesIndividuales.GenerarModel"
    ],
    controller: "reportes-individuales-generar",
    viewModel: {
        type: "reportes-individuales-generar"
    },
    layout: "border",
    items: [
        {
            xtype: "grid",
            bind: {
                store: "{getListaReportesIndividuales}"
            },
            border: true,
            columns: [
                {
                    dataIndex: "nombreReporte",
                    header: "Seleccione reporte",
                    width: 300
                }
            ],
            columnLines: true,
            loadMask: true,
            reference: "gridListaReportesIndividuales",
            region: "west",
            split: true,
            tbar: {
                ui: "footer",
                items: [
                    {
                        text: "Abrir vista de reporte",
                        handler: "onBotonAbrirTabClick"
                    },
                    {
                        minWidth: 80,
                        text: 'Cancelar',
                        handler: 'onBotonCancelarClick'
                    }
                ]
            },
            width: 250
        },
        {
            xtype: "tabpanel",
            reference: "tabReportes",
            region: "center",
            split: true
        }
    ]
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoAsistenciaGeneralController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-individuales-interfaces-consolidadoasistenciageneral',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAsistenciaGeneral", "Fecha", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&documento=" + Ext.getCmp("CAG-ParamDocumento").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    }
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoAsistenciaGeneralModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-individuales-interfaces-consolidadoasistenciageneral'
});

Ext.define("CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoAsistenciaGeneral", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoAsistenciaGeneralController",
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoAsistenciaGeneralModel"
    ],
    controller: "reportes-individuales-interfaces-consolidadoasistenciageneral",
    viewModel: {
        type: "reportes-individuales-interfaces-consolidadoasistenciageneral"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "textfield",
                    fieldLabel: "Documento del Afiliado",
                    hideLabel: false,
                    id: "CAG-ParamDocumento",
                    width: 300
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoFactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-individuales-interfaces-consolidadofactorriesgo',
    onBotonGenerarReporteClick: function() {
        var opcional = "&documento=" + Ext.getCmp("CFR-ParamDocumento").getValue() + "&fechahistoria=" + Ext.getCmp("CFR-ParamFichas").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onBotonBuscarClick: function() {
        var form = Ext.getCmp("Form-Hfdfr-Report");
        var conf = {
                url: Coomuce.Url.Funciones + "HfdfrConsultar",
                data: {
                    documento: Ext.getCmp("CFR-ParamDocumento").getValue()
                },
                targetMask: form,
                msgMask: "Buscando Historias...",
                fnSuccess: function(response) {
                    if (response.data.length > 0) {
                        var historiaStore = Ext.getStore('getHistoriasStore');
                        historiaStore.removeAll();
                        historiaStore.add(response.data);
                    }
                }
            };
        console.log(conf);
        Coomuce.Util.EnviarPost(conf);
    }
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoFactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-individuales-interfaces-consolidadofactorriesgo',
    stores: {
        getHistorias: {
            storeId: "getHistoriasStore",
            autoLoad: true,
            fields: [
                "IdHistoria",
                "fechaHistoria"
            ],
            data: []
        }
    }
});

Ext.define("CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoFactorRiesgo", {
    extend: "Ext.panel.Panel",
    id: "Form-Hfdfr-Report",
    requires: [
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoFactorRiesgoController",
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoFactorRiesgoModel"
    ],
    controller: "reportes-individuales-interfaces-consolidadofactorriesgo",
    viewModel: {
        type: "reportes-individuales-interfaces-consolidadofactorriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "textfield",
                    fieldLabel: "Documento del Afiliado",
                    hideLabel: false,
                    id: "CFR-ParamDocumento",
                    width: 300
                },
                "->",
                {
                    text: "Buscar",
                    handler: "onBotonBuscarClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getHistorias}"
                    },
                    displayField: "fechaVisitaHfdfr",
                    editable: false,
                    fieldLabel: "Historias Disponibles",
                    id: "CFR-ParamFichas",
                    queryMode: "local",
                    valueField: "fechaVisitaHfdfr"
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoPlanillaUnicaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-individuales-interfaces-consolidadoplanillaunica',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAtencionPurisu", "Fecha Atención", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&documento=" + Ext.getCmp("CPU-ParamDocumento").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    }
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoPlanillaUnicaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-individuales-interfaces-consolidadoplanillaunica'
});

Ext.define("CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoPlanillaUnica", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoPlanillaUnicaController",
        "CoomuceMod.view.ReportesIndividuales.Interfaces.ConsolidadoPlanillaUnicaModel"
    ],
    controller: "reportes-individuales-interfaces-consolidadoplanillaunica",
    viewModel: {
        type: "reportes-individuales-interfaces-consolidadoplanillaunica"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "textfield",
                    fieldLabel: "Documento del Afiliado",
                    hideLabel: false,
                    id: "CPU-ParamDocumento",
                    width: 300
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.FichaIdentificacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-individuales-interfaces-fichaidentificacion',
    onBotonGenerarReporteClick: function() {
        var opcional = "&documento=" + Ext.getCmp("FDI-ParamDocumento").getValue() + "&fechaFicha=" + Ext.getCmp("FDI-ParamFichas").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onBotonBuscarClick: function() {
        var form = Ext.getCmp("Form-Ifppir-Report");
        var conf = {
                url: Coomuce.Url.Funciones + "IfppirConsultar",
                data: {
                    documento: Ext.getCmp("FDI-ParamDocumento").getValue()
                },
                targetMask: form,
                msgMask: "Buscando Fichas...",
                fnSuccess: function(response) {
                    if (response.data.length > 0) {
                        var fichasStore = Ext.getStore('getFichasStore');
                        fichasStore.removeAll();
                        fichasStore.add(response.data);
                    }
                }
            };
        Coomuce.Util.EnviarPost(conf);
    }
});

Ext.define('CoomuceMod.view.ReportesIndividuales.Interfaces.FichaIdentificacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-individuales-interfaces-fichaidentificacion',
    stores: {
        getFichas: {
            storeId: "getFichasStore",
            autoLoad: true,
            fields: [
                "IdFicha",
                "fechaFicha"
            ],
            data: []
        }
    }
});

Ext.define("CoomuceMod.view.ReportesIndividuales.Interfaces.FichaIdentificacion", {
    extend: "Ext.panel.Panel",
    id: "Form-Ifppir-Report",
    requires: [
        "CoomuceMod.view.ReportesIndividuales.Interfaces.FichaIdentificacionController",
        "CoomuceMod.view.ReportesIndividuales.Interfaces.FichaIdentificacionModel"
    ],
    controller: "reportes-individuales-interfaces-fichaidentificacion",
    viewModel: {
        type: "reportes-individuales-interfaces-fichaidentificacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "textfield",
                    fieldLabel: "Documento del Afiliado",
                    hideLabel: false,
                    id: "FDI-ParamDocumento",
                    width: 300
                },
                "->",
                {
                    text: "Buscar",
                    handler: "onBotonBuscarClick",
                    width: 200
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getFichas}"
                    },
                    displayField: "fechaAplicacionIfppir",
                    editable: false,
                    fieldLabel: "Fichas Disponibles",
                    id: "FDI-ParamFichas",
                    queryMode: "local",
                    valueField: "fechaAplicacionIfppir",
                    width: 300
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick",
                    width: 200
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.GenerarController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-generar',
    onBotonAbrirTabClick: function() {
        var me = this;
        var grid = me.lookupReference("gridListaReportes");
        var selection = grid.selModel.getSelection();
        var tab = me.lookupReference("tabReportes");
        var existe = tab.items.findIndex('$className', selection[0].data.vista);
        console.log(existe);
        // si la pestaña ya existe, solamente la activo en caso contrario la creo
        if (existe > -1) {
            tab.setActiveTab(existe);
            return false;
        }
        Ext.destroy(selection[0].data.vista);
        var panel = Ext.create(selection[0].data.vista, {
                border: true,
                closable: true,
                idReporte: selection[0].data.idReporte,
                iconCls: "x-fa fa-book",
                listeners: {
                    destroy: function(view, eOpts) {
                        Ext.destroy(selection[0].data.vista);
                    }
                },
                title: "Reporte de " + selection[0].data.nombreReporte
            });
        tab.add(panel);
        tab.setActiveTab(panel);
    },
    onBotonCancelarClick: function() {
        var me = this;
        Ext.Msg.confirm("Atención", "Desea cancelar las modificaciones?", function(btn) {
            if (btn === "yes") {
                var tabPanel = Ext.getCmp("CoomuceGenerarReporte");
                tabPanel.destroy();
            }
        });
    }
});

Ext.define('CoomuceMod.view.Reportes.GenerarModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-generar',
    stores: {
        getListaReportes: {
            autoLoad: true,
            proxy: {
                type: "ajax",
                url: "../resources/ListaReportes.json",
                reader: {
                    type: "json",
                    rootProperty: "data"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Generar", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.GenerarController",
        "CoomuceMod.view.Reportes.GenerarModel"
    ],
    controller: "reportes-generar",
    viewModel: {
        type: "reportes-generar"
    },
    layout: "border",
    items: [
        {
            xtype: "grid",
            bind: {
                store: "{getListaReportes}"
            },
            border: true,
            columns: [
                {
                    dataIndex: "nombreReporte",
                    header: "Seleccione reporte",
                    width: 300
                }
            ],
            columnLines: true,
            loadMask: true,
            reference: "gridListaReportes",
            region: "west",
            split: true,
            tbar: {
                ui: "footer",
                items: [
                    {
                        text: "Abrir vista de reporte",
                        handler: "onBotonAbrirTabClick"
                    },
                    {
                        minWidth: 80,
                        text: 'Cancelar',
                        handler: 'onBotonCancelarClick'
                    }
                ]
            },
            width: 250
        },
        {
            xtype: "tabpanel",
            reference: "tabReportes",
            region: "center",
            split: true
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CicloVitalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-ciclovital',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "edadMinCicloVital",
                    "Edad Min.",
                    "int"
                ],
                [
                    "edadMaxCicloVital",
                    "Edad Max.",
                    "int"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CicloVitalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-ciclovital'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.CicloVital", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.CicloVitalController",
        "CoomuceMod.view.Reportes.Interfaces.CicloVitalModel"
    ],
    controller: "reportes-interfaces-ciclovital",
    viewModel: {
        type: "reportes-interfaces-ciclovital"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CondicionDiscapacidadController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-condiciondiscapacidad',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoCondicionDiscapacidad",
                    "Código",
                    "string"
                ],
                [
                    "nombreCondicionDiscapacidad",
                    "Nombre",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CondicionDiscapacidadModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-condiciondiscapacidad'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.CondicionDiscapacidad", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.CondicionDiscapacidadController",
        "CoomuceMod.view.Reportes.Interfaces.CondicionDiscapacidadModel"
    ],
    controller: "reportes-interfaces-condiciondiscapacidad",
    viewModel: {
        type: "reportes-interfaces-condiciondiscapacidad"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CondicionesViviendaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-condicionesvivienda',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "nombreCondicionVivienda",
                    "Nombre",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.CondicionesViviendaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-condicionesvivienda'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.CondicionesVivienda", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.CondicionesViviendaController",
        "CoomuceMod.view.Reportes.Interfaces.CondicionesViviendaModel"
    ],
    controller: "reportes-interfaces-condicionesvivienda",
    viewModel: {
        type: "reportes-interfaces-condicionesvivienda"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoAsistenciaGeneralController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-consolidadoasistenciageneral',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAsistenciaGeneral", "Fecha", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("CAG-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("CAG-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("CAG-ParamCiudad").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoAsistenciaGeneralModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-consolidadoasistenciageneral',
    stores: {
        getUsuario: {
            autoLoad: true,
            fields: [
                {
                    name: "idUsuario",
                    type: "int"
                },
                {
                    name: "idTipoIdentificacion",
                    type: "int"
                },
                {
                    name: "nombreTipoIdentificacion",
                    type: "string"
                },
                {
                    name: "identificacionUsuario",
                    type: "string"
                },
                {
                    name: "primerApellidoUsuario",
                    type: "string"
                },
                {
                    name: "segundoApellidoUsuario",
                    type: "string"
                },
                {
                    name: "primerNombreUsuario",
                    type: "string"
                },
                {
                    name: "segundoNombreUsuario",
                    type: "string"
                },
                {
                    name: "nombreCompletoGestor",
                    convert: function(v, record) {
                        return record.get("primerApellidoUsuario") + " " + record.get("segundoApellidoUsuario") + " " + record.get("primerNombreUsuario") + " " + record.get("segundoNombreUsuario");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetUsuarioAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.ConsolidadoAsistenciaGeneral", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoAsistenciaGeneralController",
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoAsistenciaGeneralModel"
    ],
    controller: "reportes-interfaces-consolidadoasistenciageneral",
    viewModel: {
        type: "reportes-interfaces-consolidadoasistenciageneral"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "CAG-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "CAG-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "CAG-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "CAG-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "CAG-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoFactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-consolidadofactorriesgo',
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("CFR-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("CFR-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("CFR-ParamCiudad").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoFactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-consolidadofactorriesgo',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.ConsolidadoFactorRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoFactorRiesgoController",
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoFactorRiesgoModel"
    ],
    controller: "reportes-interfaces-consolidadofactorriesgo",
    viewModel: {
        type: "reportes-interfaces-consolidadofactorriesgo"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "CFR-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "CFR-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "CFR-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "CFR-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "CFR-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoPlanillaUnicaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-consolidadoplanillaunica',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAtencionPurisu", "Fecha Atención", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("CPU-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("CPU-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("CPU-ParamCiudad").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ConsolidadoPlanillaUnicaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-consolidadoplanillaunica',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.ConsolidadoPlanillaUnica", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoPlanillaUnicaController",
        "CoomuceMod.view.Reportes.Interfaces.ConsolidadoPlanillaUnicaModel"
    ],
    controller: "reportes-interfaces-consolidadoplanillaunica",
    viewModel: {
        type: "reportes-interfaces-consolidadoplanillaunica"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "CPU-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "CPU-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "CPU-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "CPU-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "CPU-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.DeclaracionAutorizacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-declaracionautorizacion',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoDeclaracionAutorizacion",
                    "Código",
                    "string"
                ],
                [
                    "descripcionDeclaracionAutorizacion",
                    "Descripción",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.DeclaracionAutorizacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-declaracionautorizacion'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.DeclaracionAutorizacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.DeclaracionAutorizacionController",
        "CoomuceMod.view.Reportes.Interfaces.DeclaracionAutorizacionModel"
    ],
    controller: "reportes-interfaces-declaracionautorizacion",
    viewModel: {
        type: "reportes-interfaces-declaracionautorizacion"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.EjeUnidadModuloController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-ejeunidadmodulo',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoEje",
                    "Código Eje",
                    "string"
                ],
                [
                    "nombreEje",
                    "Eje",
                    "string"
                ],
                [
                    "codigoUnidad",
                    "Código Unidad",
                    "string"
                ],
                [
                    "nombreUnidad",
                    "Unidad",
                    "string"
                ],
                [
                    "codigoModulo",
                    "Código Modulo",
                    "string"
                ],
                [
                    "nombreModulo",
                    "Modulo",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.EjeUnidadModuloModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-ejeunidadmodulo'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.EjeUnidadModulo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.EjeUnidadModuloController",
        "CoomuceMod.view.Reportes.Interfaces.EjeUnidadModuloModel"
    ],
    controller: "reportes-interfaces-ejeunidadmodulo",
    viewModel: {
        type: "reportes-interfaces-ejeunidadmodulo"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FactorRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-factorriesgo',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoFactorRiesgo",
                    "Código Factor",
                    "string"
                ],
                [
                    "nombreFactorRiesgo",
                    "Factor",
                    "string"
                ],
                [
                    "codigoSubFactorRiesgo",
                    "Código Sub Factor",
                    "string"
                ],
                [
                    "nombreSubFactorRiesgo",
                    "Sub Factor",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FactorRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-factorriesgo'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.FactorRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.FactorRiesgoController",
        "CoomuceMod.view.Reportes.Interfaces.FactorRiesgoModel"
    ],
    controller: "reportes-interfaces-factorriesgo",
    viewModel: {
        type: "reportes-interfaces-factorriesgo"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FichaIdentificacionController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-fichaidentificacion',
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("FDI-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("FDI-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("FDI-ParamCiudad").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FichaIdentificacionModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-fichaidentificacion',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.FichaIdentificacion", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.FichaIdentificacionController",
        "CoomuceMod.view.Reportes.Interfaces.FichaIdentificacionModel"
    ],
    controller: "reportes-interfaces-fichaidentificacion",
    viewModel: {
        type: "reportes-interfaces-fichaidentificacion"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "FDI-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "FDI-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "FDI-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "FDI-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "FDI-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FindriskController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-findrisk',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAtencionPurisu", "Fecha Atención", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("FIN-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("FIN-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("FIN-ParamCiudad").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FindriskModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-findrisk',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.Findrisk", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.FindriskController",
        "CoomuceMod.view.Reportes.Interfaces.FindriskModel"
    ],
    controller: "reportes-interfaces-findrisk",
    viewModel: {
        type: "reportes-interfaces-findrisk"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "FIN-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "FIN-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "FIN-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "FIN-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "FIN-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FramighamController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-framigham',
    //onToolbarBeforeRender: function (tool, eOpts) {
    //    var barra = Coomuce.Util.barraFiltroReportes([
    //        ["a.fechaAtencionPurisu", "Fecha Atención", "date"]
    //    ], this, { idReporte: this.getView().idReporte });
    //    tool.add(barra.items);
    //}
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("FRA-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("FRA-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("FRA-ParamCiudad").getValue();
        console.log(opcional);
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.FramighamModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-framigham',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.Framigham", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.FramighamController",
        "CoomuceMod.view.Reportes.Interfaces.FramighamModel"
    ],
    controller: "reportes-interfaces-framigham",
    viewModel: {
        type: "reportes-interfaces-framigham"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "FRA-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "FRA-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "FRA-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "FRA-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "FRA-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GestionFormatosController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-gestionformatos',
    onBotonGenerarReporteClick: function() {
        var opcional = "&nombreTabla=" + Ext.getCmp("ParamFormatos").getValue() + "&fechaInicio=" + Ext.getCmp("ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("ParamFechaFin").getSubmitValue() + "&idUsuario=" + Ext.getCmp("ParamGestores").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GestionFormatosModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-gestionformatos',
    stores: {
        getFormatos: {
            fields: [
                {
                    name: "nombreTabla",
                    type: "string"
                },
                {
                    name: "nombreFormato",
                    type: "string"
                }
            ],
            data: [
                [
                    "",
                    "- Todos"
                ],
                [
                    "Fuan",
                    "- Afiliación"
                ],
                [
                    "FuanReporteNovedad",
                    "- Novedades"
                ],
                [
                    "InfoHfdfr",
                    "- Historia Familiar para Detección de Factores de Riesgo"
                ],
                [
                    "InfoIfppir",
                    "- Identificación y Focalización de pacientes para programas de intervención del riesgo"
                ],
                [
                    "InfoPurisu",
                    "- Planilla Única de Registro de Información y Servicios al Usuario"
                ],
                [
                    "EncuestaIps",
                    "- Encuesta de Satisfacción de usuario de la I.P.S de primer Nivel"
                ],
                [
                    "EncuestaEps",
                    "- Encuesta de Satisfacción de usuario de la EPS-S"
                ],
                [
                    "AsistenciaGeneral",
                    "- Lista asistencia general"
                ]
            ]
        },
        getUsuario: {
            autoLoad: true,
            fields: [
                {
                    name: "idUsuario",
                    type: "int"
                },
                {
                    name: "idTipoIdentificacion",
                    type: "int"
                },
                {
                    name: "nombreTipoIdentificacion",
                    type: "string"
                },
                {
                    name: "identificacionUsuario",
                    type: "string"
                },
                {
                    name: "primerApellidoUsuario",
                    type: "string"
                },
                {
                    name: "segundoApellidoUsuario",
                    type: "string"
                },
                {
                    name: "primerNombreUsuario",
                    type: "string"
                },
                {
                    name: "segundoNombreUsuario",
                    type: "string"
                },
                {
                    name: "nombreCompletoGestor",
                    convert: function(v, record) {
                        return record.get("primerApellidoUsuario") + " " + record.get("segundoApellidoUsuario") + " " + record.get("primerNombreUsuario") + " " + record.get("segundoNombreUsuario");
                    }
                }
            ],
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetUsuarioAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.GestionFormatos", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.GestionFormatosController",
        "CoomuceMod.view.Reportes.Interfaces.GestionFormatosModel"
    ],
    controller: "reportes-interfaces-gestionformatos",
    viewModel: {
        type: "reportes-interfaces-gestionformatos"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getFormatos}"
                    },
                    displayField: "nombreFormato",
                    editable: false,
                    fieldLabel: "Formatos",
                    id: "ParamFormatos",
                    labelWidth: 70,
                    queryMode: "local",
                    valueField: "nombreTabla",
                    width: 400
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getUsuario}"
                    },
                    displayField: "nombreCompletoGestor",
                    editable: false,
                    fieldLabel: "Gestores",
                    id: "ParamGestores",
                    labelWidth: 60,
                    queryMode: "local",
                    valueField: "idUsuario",
                    width: 300
                }
            ]
        }
    ]
});
//},
//{
//    xtype: "toolbar",
//    dock: "top",
//    items: [
//        {
//            xtype: "combo",
//            bind: {
//                store: "{getDepartamento}"
//            },
//            ciudadReference: "idCiudad",
//            displayField: "compDepartamento",
//            editable: false,
//            fieldLabel: "Departamento",
//            id: "ParamDepartamento",
//            listeners: {
//                select: "onSelectCombo"
//            },
//            queryMode: "local",
//            ubicacion: true,
//            valueField: "idDepartamento"
//        },
//        {
//            xtype: "combo",
//            bind: {
//                store: "{getCiudad}"
//            },
//            displayField: "compCiudad",
//            editable: false,
//            fieldLabel: "Municipio/Distrito",
//            id: "ParamCiudad",
//            queryMode: "local",
//            valueField: "idCiudad"
//        }
//    ],
//    ui: "footer"

Ext.define('CoomuceMod.view.Reportes.Interfaces.GrupoInteresController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-grupointeres',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoGrupoInteres",
                    "Código",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GrupoInteresModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-grupointeres'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.GrupoInteres", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.GrupoInteresController",
        "CoomuceMod.view.Reportes.Interfaces.GrupoInteresModel"
    ],
    controller: "reportes-interfaces-grupointeres",
    viewModel: {
        type: "reportes-interfaces-grupointeres"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GrupoPoblacionalController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-grupopoblacional',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoGrupoPoblacional",
                    "Código",
                    "string"
                ],
                [
                    "nombreGrupoPoblacional",
                    "Nombre",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GrupoPoblacionalModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-grupopoblacional'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.GrupoPoblacional", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.GrupoPoblacionalController",
        "CoomuceMod.view.Reportes.Interfaces.GrupoPoblacionalModel"
    ],
    controller: "reportes-interfaces-grupopoblacional",
    viewModel: {
        type: "reportes-interfaces-grupopoblacional"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GruposFocalesController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-gruposfocales',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoGruposFocales",
                    "Código",
                    "string"
                ],
                [
                    "nombreGruposFocales",
                    "Nombre",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.GruposFocalesModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-gruposfocales'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.GruposFocales", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.GruposFocalesController",
        "CoomuceMod.view.Reportes.Interfaces.GruposFocalesModel"
    ],
    controller: "reportes-interfaces-gruposfocales",
    viewModel: {
        type: "reportes-interfaces-gruposfocales"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.IpsController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-ips',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoIps",
                    "Código",
                    "string"
                ],
                [
                    "razonIps",
                    "Razón Social",
                    "string"
                ],
                [
                    "identificacionIps",
                    "Identificación",
                    "string"
                ],
                [
                    "nombreDepartamento",
                    "Departamento",
                    "string"
                ],
                [
                    "nombreCiudad",
                    "Ciudad",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.IpsModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-ips'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.Ips", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.IpsController",
        "CoomuceMod.view.Reportes.Interfaces.IpsModel"
    ],
    controller: "reportes-interfaces-ips",
    viewModel: {
        type: "reportes-interfaces-ips"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoConsultaController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-motivoconsulta',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoMotivoConsulta",
                    "Código",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoConsultaModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-motivoconsulta'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.MotivoConsulta", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.MotivoConsultaController",
        "CoomuceMod.view.Reportes.Interfaces.MotivoConsultaModel"
    ],
    controller: "reportes-interfaces-motivoconsulta",
    viewModel: {
        type: "reportes-interfaces-motivoconsulta"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoContactoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-motivocontacto',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoMotivoContacto",
                    "Código",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoContactoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-motivocontacto'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.MotivoContacto", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.MotivoContactoController",
        "CoomuceMod.view.Reportes.Interfaces.MotivoContactoModel"
    ],
    controller: "reportes-interfaces-motivocontacto",
    viewModel: {
        type: "reportes-interfaces-motivocontacto"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoTrasladoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-motivotraslado',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoMotivoTraslado",
                    "Código",
                    "string"
                ],
                [
                    "descripcionMotivoTraslado",
                    "Descripción",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.MotivoTrasladoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-motivotraslado'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.MotivoTraslado", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.MotivoTrasladoController",
        "CoomuceMod.view.Reportes.Interfaces.MotivoTrasladoModel"
    ],
    controller: "reportes-interfaces-motivotraslado",
    viewModel: {
        type: "reportes-interfaces-motivotraslado"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.PiezasInformativasController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-piezasinformativas',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoPiezasInformativas",
                    "Código",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.PiezasInformativasModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-piezasinformativas'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.PiezasInformativas", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.PiezasInformativasController",
        "CoomuceMod.view.Reportes.Interfaces.PiezasInformativasModel"
    ],
    controller: "reportes-interfaces-piezasinformativas",
    viewModel: {
        type: "reportes-interfaces-piezasinformativas"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ProgramasResolucion412Controller', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-programasresolucion412',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoProgramaResolucion412",
                    "Código",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ProgramasResolucion412Model', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-programasresolucion412'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.ProgramasResolucion412", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.ProgramasResolucion412Controller",
        "CoomuceMod.view.Reportes.Interfaces.ProgramasResolucion412Model"
    ],
    controller: "reportes-interfaces-programasresolucion412",
    viewModel: {
        type: "reportes-interfaces-programasresolucion412"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ReporteGestantesController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-reportegestantes',
    onBotonGenerarReporteClick: function() {
        var opcional = "&fechaInicio=" + Ext.getCmp("GES-ParamFechaInicio").getSubmitValue() + "&fechaFin=" + Ext.getCmp("GES-ParamFechaFin").getSubmitValue() + "&idCiudad=" + Ext.getCmp("GES-ParamCiudad").getValue();
        Coomuce.Util.lanzarReporte(this.getView(), {
            idReporte: this.getView().idReporte,
            optional: opcional
        });
    },
    onSelectCombo: function(combo, record, eOpts) {
        var me = this;
        if (combo.ubicacion !== undefined) {
            var idCiudad = Ext.getCmp(combo.ciudadReference);
            console.log(idCiudad);
            idCiudad.getStore().load({
                params: {
                    idDepartamento: record.get("idDepartamento")
                }
            });
        }
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.ReporteGestantesModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-reportegestantes',
    stores: {
        getCiudad: {
            autoLoad: false,
            model: "CoomuceMod.model.Administracion.Ciudad",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetCiudadAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        },
        getDepartamento: {
            autoLoad: true,
            model: "CoomuceMod.model.Administracion.Departamento",
            proxy: {
                timeout: 600000,
                useDefaultXhrHeader: false,
                type: 'ajax',
                url: Coomuce.Url.Administracion + "GetDepartamentoAll",
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: "total"
                }
            }
        }
    }
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.ReporteGestantes", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.ReporteGestantesController",
        "CoomuceMod.view.Reportes.Interfaces.ReporteGestantesModel"
    ],
    controller: "reportes-interfaces-reportegestantes",
    viewModel: {
        type: "reportes-interfaces-reportegestantes"
    },
    layout: "fit",
    dockedItems: [
        {
            xtype: "toolbar",
            dock: "top",
            layout: {
                align: "middle"
            },
            items: [
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Inicio",
                    format: "Y-m-d",
                    id: "GES-ParamFechaInicio",
                    labelWidth: 70,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                {
                    xtype: "datefield",
                    fieldLabel: "Fecha Fin",
                    format: "Y-m-d",
                    id: "GES-ParamFechaFin",
                    labelWidth: 60,
                    maxValue: new Date(),
                    submitFormat: "Y-m-d",
                    value: new Date(),
                    width: 200
                },
                "->",
                {
                    text: "Generar",
                    handler: "onBotonGenerarReporteClick"
                }
            ],
            //listeners: {
            //    beforerender: "onToolbarBeforeRender"
            //},
            ui: "footer"
        },
        {
            xtype: "toolbar",
            dock: "top",
            items: [
                {
                    xtype: "combo",
                    bind: {
                        store: "{getDepartamento}"
                    },
                    ciudadReference: "GES-ParamCiudad",
                    displayField: "compDepartamento",
                    editable: false,
                    fieldLabel: "Departamento",
                    id: "GES-ParamDepartamento",
                    listeners: {
                        select: "onSelectCombo"
                    },
                    queryMode: "local",
                    ubicacion: true,
                    valueField: "idDepartamento"
                },
                {
                    xtype: "combo",
                    bind: {
                        store: "{getCiudad}"
                    },
                    displayField: "compCiudad",
                    editable: false,
                    fieldLabel: "Municipio/Distrito",
                    id: "GES-ParamCiudad",
                    queryMode: "local",
                    valueField: "idCiudad"
                }
            ],
            ui: "footer"
        }
    ]
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.SeguimientoProgramasIntervencionRiesgoController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.reportes-interfaces-seguimientoprogramasintervencionriesgo',
    onToolbarBeforeRender: function(tool, eOpts) {
        var barra = Coomuce.Util.barraFiltroReportes([
                [
                    "codigoSeguimientoProgramasIntervencionRiesgo",
                    "Código",
                    "string"
                ],
                [
                    "nombreSeguimientoProgramasIntervencionRiesgo",
                    "Nombre",
                    "string"
                ]
            ], this, {
                idReporte: this.getView().idReporte
            });
        tool.add(barra.items);
    }
});

Ext.define('CoomuceMod.view.Reportes.Interfaces.SeguimientoProgramasIntervencionRiesgoModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.reportes-interfaces-seguimientoprogramasintervencionriesgo'
});

Ext.define("CoomuceMod.view.Reportes.Interfaces.SeguimientoProgramasIntervencionRiesgo", {
    extend: "Ext.panel.Panel",
    requires: [
        "CoomuceMod.view.Reportes.Interfaces.SeguimientoProgramasIntervencionRiesgoController",
        "CoomuceMod.view.Reportes.Interfaces.SeguimientoProgramasIntervencionRiesgoModel"
    ],
    controller: "reportes-interfaces-condiciondiscapacidad",
    viewModel: {
        type: "reportes-interfaces-condiciondiscapacidad"
    },
    layout: "fit",
    tbar: {
        xtype: "toolbar",
        layout: {
            align: "middle"
        },
        listeners: {
            beforerender: "onToolbarBeforeRender"
        },
        ui: "footer"
    }
});

